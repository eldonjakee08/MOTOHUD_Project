
022MOTOHUD_TXer_GAPCENTRAL_GATTSERVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002800  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800293c  0800293c  0000393c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080029e8  080029e8  000039e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080029ec  080029ec  000039ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000000c  20000008  080029f0  00004008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000080  20000014  080029fc  00004014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000094  080029fc  00004094  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b490  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002090  00000000  00000000  0000f4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000011a0  00000000  00000000  00011568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000d32  00000000  00000000  00012708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00020a35  00000000  00000000  0001343a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000d4a1  00000000  00000000  00033e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d32e1  00000000  00000000  00041310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001145f1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004864  00000000  00000000  00114634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000088  00000000  00000000  00118e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08002924 	.word	0x08002924

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08002924 	.word	0x08002924

0800017c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000180:	f000 fa2a 	bl	80005d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000184:	f000 f808 	bl	8000198 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000188:	f000 f864 	bl	8000254 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800018c:	f000 f880 	bl	8000290 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RTC_Init();
 8000190:	f000 f892 	bl	80002b8 <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000194:	bf00      	nop
 8000196:	e7fd      	b.n	8000194 <main+0x18>

08000198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b09a      	sub	sp, #104	@ 0x68
 800019c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019e:	f107 0320 	add.w	r3, r7, #32
 80001a2:	2248      	movs	r2, #72	@ 0x48
 80001a4:	2100      	movs	r1, #0
 80001a6:	4618      	mov	r0, r3
 80001a8:	f002 fb90 	bl	80028cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	2200      	movs	r2, #0
 80001b0:	601a      	str	r2, [r3, #0]
 80001b2:	605a      	str	r2, [r3, #4]
 80001b4:	609a      	str	r2, [r3, #8]
 80001b6:	60da      	str	r2, [r3, #12]
 80001b8:	611a      	str	r2, [r3, #16]
 80001ba:	615a      	str	r2, [r3, #20]
 80001bc:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80001be:	4b24      	ldr	r3, [pc, #144]	@ (8000250 <SystemClock_Config+0xb8>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80001c6:	4a22      	ldr	r2, [pc, #136]	@ (8000250 <SystemClock_Config+0xb8>)
 80001c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80001cc:	6013      	str	r3, [r2, #0]
 80001ce:	4b20      	ldr	r3, [pc, #128]	@ (8000250 <SystemClock_Config+0xb8>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80001d6:	603b      	str	r3, [r7, #0]
 80001d8:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80001da:	232b      	movs	r3, #43	@ 0x2b
 80001dc:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80001e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80001ea:	2301      	movs	r3, #1
 80001ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ee:	2340      	movs	r3, #64	@ 0x40
 80001f0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80001f2:	2300      	movs	r3, #0
 80001f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80001f6:	2360      	movs	r3, #96	@ 0x60
 80001f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80001fa:	2305      	movs	r3, #5
 80001fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001fe:	2300      	movs	r3, #0
 8000200:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000202:	f107 0320 	add.w	r3, r7, #32
 8000206:	4618      	mov	r0, r3
 8000208:	f000 ffa2 	bl	8001150 <HAL_RCC_OscConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000212:	f000 f883 	bl	800031c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000216:	236f      	movs	r3, #111	@ 0x6f
 8000218:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800021a:	2300      	movs	r3, #0
 800021c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800022e:	2300      	movs	r3, #0
 8000230:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f001 fafe 	bl	8001838 <HAL_RCC_ClockConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000242:	f000 f86b 	bl	800031c <Error_Handler>
  }
}
 8000246:	bf00      	nop
 8000248:	3768      	adds	r7, #104	@ 0x68
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	58000400 	.word	0x58000400

08000254 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b094      	sub	sp, #80	@ 0x50
 8000258:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800025a:	463b      	mov	r3, r7
 800025c:	2250      	movs	r2, #80	@ 0x50
 800025e:	2100      	movs	r1, #0
 8000260:	4618      	mov	r0, r3
 8000262:	f002 fb33 	bl	80028cc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000266:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800026a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800026c:	2300      	movs	r3, #0
 800026e:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000270:	2310      	movs	r3, #16
 8000272:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000274:	463b      	mov	r3, r7
 8000276:	4618      	mov	r0, r3
 8000278:	f001 feef 	bl	800205a <HAL_RCCEx_PeriphCLKConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000282:	f000 f84b 	bl	800031c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000286:	bf00      	nop
 8000288:	3750      	adds	r7, #80	@ 0x50
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8000294:	4b06      	ldr	r3, [pc, #24]	@ (80002b0 <MX_IPCC_Init+0x20>)
 8000296:	4a07      	ldr	r2, [pc, #28]	@ (80002b4 <MX_IPCC_Init+0x24>)
 8000298:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800029a:	4805      	ldr	r0, [pc, #20]	@ (80002b0 <MX_IPCC_Init+0x20>)
 800029c:	f000 fb56 	bl	800094c <HAL_IPCC_Init>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80002a6:	f000 f839 	bl	800031c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000030 	.word	0x20000030
 80002b4:	58000c00 	.word	0x58000c00

080002b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80002bc:	4b15      	ldr	r3, [pc, #84]	@ (8000314 <MX_RTC_Init+0x5c>)
 80002be:	4a16      	ldr	r2, [pc, #88]	@ (8000318 <MX_RTC_Init+0x60>)
 80002c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80002c2:	4b14      	ldr	r3, [pc, #80]	@ (8000314 <MX_RTC_Init+0x5c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80002c8:	4b12      	ldr	r3, [pc, #72]	@ (8000314 <MX_RTC_Init+0x5c>)
 80002ca:	227f      	movs	r2, #127	@ 0x7f
 80002cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80002ce:	4b11      	ldr	r3, [pc, #68]	@ (8000314 <MX_RTC_Init+0x5c>)
 80002d0:	22ff      	movs	r2, #255	@ 0xff
 80002d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80002d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000314 <MX_RTC_Init+0x5c>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80002da:	4b0e      	ldr	r3, [pc, #56]	@ (8000314 <MX_RTC_Init+0x5c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80002e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000314 <MX_RTC_Init+0x5c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80002e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000314 <MX_RTC_Init+0x5c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80002ec:	4809      	ldr	r0, [pc, #36]	@ (8000314 <MX_RTC_Init+0x5c>)
 80002ee:	f002 f93b 	bl	8002568 <HAL_RTC_Init>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80002f8:	f000 f810 	bl	800031c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80002fc:	2200      	movs	r2, #0
 80002fe:	2100      	movs	r1, #0
 8000300:	4804      	ldr	r0, [pc, #16]	@ (8000314 <MX_RTC_Init+0x5c>)
 8000302:	f002 fa3d 	bl	8002780 <HAL_RTCEx_SetWakeUpTimer>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800030c:	f000 f806 	bl	800031c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	2000006c 	.word	0x2000006c
 8000318:	40002800 	.word	0x40002800

0800031c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000320:	b672      	cpsid	i
}
 8000322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000324:	bf00      	nop
 8000326:	e7fd      	b.n	8000324 <Error_Handler+0x8>

08000328 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800032c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000334:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000338:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800033c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr

0800034a <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800034a:	b480      	push	{r7}
 800034c:	b085      	sub	sp, #20
 800034e:	af00      	add	r7, sp, #0
 8000350:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000356:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000358:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4313      	orrs	r3, r2
 8000360:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000366:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4013      	ands	r3, r2
 800036c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800036e:	68fb      	ldr	r3, [r7, #12]
}
 8000370:	bf00      	nop
 8000372:	3714      	adds	r7, #20
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr

0800037c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800037c:	b480      	push	{r7}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000388:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800038a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4313      	orrs	r3, r2
 8000392:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000394:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000398:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4013      	ands	r3, r2
 800039e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003a0:	68fb      	ldr	r3, [r7, #12]
}
 80003a2:	bf00      	nop
 80003a4:	3714      	adds	r7, #20
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr

080003ae <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80003b2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80003b6:	f7ff ffc8 	bl	800034a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2100      	movs	r1, #0
 80003be:	202e      	movs	r0, #46	@ 0x2e
 80003c0:	f000 fa6b 	bl	800089a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80003c4:	202e      	movs	r0, #46	@ 0x2e
 80003c6:	f000 fa82 	bl	80008ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
	...

080003d0 <HAL_IPCC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hipcc: IPCC handle pointer
  * @retval None
  */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a05      	ldr	r2, [pc, #20]	@ (80003f4 <HAL_IPCC_MspInit+0x24>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d103      	bne.n	80003ea <HAL_IPCC_MspInit+0x1a>
  {
    /* USER CODE BEGIN IPCC_MspInit 0 */

    /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80003e2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80003e6:	f7ff ffb0 	bl	800034a <LL_AHB3_GRP1_EnableClock>

    /* USER CODE END IPCC_MspInit 1 */

  }

}
 80003ea:	bf00      	nop
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	58000c00 	.word	0x58000c00

080003f8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b096      	sub	sp, #88	@ 0x58
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000400:	f107 0308 	add.w	r3, r7, #8
 8000404:	2250      	movs	r2, #80	@ 0x50
 8000406:	2100      	movs	r1, #0
 8000408:	4618      	mov	r0, r3
 800040a:	f002 fa5f 	bl	80028cc <memset>
  if(hrtc->Instance==RTC)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a0f      	ldr	r2, [pc, #60]	@ (8000450 <HAL_RTC_MspInit+0x58>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d117      	bne.n	8000448 <HAL_RTC_MspInit+0x50>

    /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8000418:	f000 fb1e 	bl	8000a58 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800041c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000420:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000422:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000426:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000428:	f107 0308 	add.w	r3, r7, #8
 800042c:	4618      	mov	r0, r3
 800042e:	f001 fe14 	bl	800205a <HAL_RCCEx_PeriphCLKConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8000438:	f7ff ff70 	bl	800031c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800043c:	f7ff ff74 	bl	8000328 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000440:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000444:	f7ff ff9a 	bl	800037c <LL_APB1_GRP1_EnableClock>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000448:	bf00      	nop
 800044a:	3758      	adds	r7, #88	@ 0x58
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40002800 	.word	0x40002800

08000454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000458:	bf00      	nop
 800045a:	e7fd      	b.n	8000458 <NMI_Handler+0x4>

0800045c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000460:	bf00      	nop
 8000462:	e7fd      	b.n	8000460 <HardFault_Handler+0x4>

08000464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000468:	bf00      	nop
 800046a:	e7fd      	b.n	8000468 <MemManage_Handler+0x4>

0800046c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <BusFault_Handler+0x4>

08000474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <UsageFault_Handler+0x4>

0800047c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr

0800048a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr

080004a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004aa:	f000 f8ef 	bl	800068c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80004b6:	f000 fa25 	bl	8000904 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80004c4:	4b24      	ldr	r3, [pc, #144]	@ (8000558 <SystemInit+0x98>)
 80004c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004ca:	4a23      	ldr	r2, [pc, #140]	@ (8000558 <SystemInit+0x98>)
 80004cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80004d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80004de:	f043 0301 	orr.w	r3, r3, #1
 80004e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80004e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004e8:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80004ec:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80004ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004f8:	4b18      	ldr	r3, [pc, #96]	@ (800055c <SystemInit+0x9c>)
 80004fa:	4013      	ands	r3, r2
 80004fc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80004fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000502:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000506:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800050a:	f023 0305 	bic.w	r3, r3, #5
 800050e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000516:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800051a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800051e:	f023 0301 	bic.w	r3, r3, #1
 8000522:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000526:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800052a:	4a0d      	ldr	r2, [pc, #52]	@ (8000560 <SystemInit+0xa0>)
 800052c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800052e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000532:	4a0b      	ldr	r2, [pc, #44]	@ (8000560 <SystemInit+0xa0>)
 8000534:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000540:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000544:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800054a:	2200      	movs	r2, #0
 800054c:	619a      	str	r2, [r3, #24]
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	e000ed00 	.word	0xe000ed00
 800055c:	faf6fefb 	.word	0xfaf6fefb
 8000560:	22041000 	.word	0x22041000

08000564 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000564:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000566:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000568:	3304      	adds	r3, #4

0800056a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800056a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800056e:	d3f9      	bcc.n	8000564 <CopyDataInit>
  bx lr
 8000570:	4770      	bx	lr

08000572 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000572:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000574:	3004      	adds	r0, #4

08000576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000576:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000578:	d3fb      	bcc.n	8000572 <FillZerobss>
  bx lr
 800057a:	4770      	bx	lr

0800057c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800057c:	480c      	ldr	r0, [pc, #48]	@ (80005b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800057e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000580:	f7ff ff9e 	bl	80004c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000584:	480b      	ldr	r0, [pc, #44]	@ (80005b4 <LoopForever+0x6>)
 8000586:	490c      	ldr	r1, [pc, #48]	@ (80005b8 <LoopForever+0xa>)
 8000588:	4a0c      	ldr	r2, [pc, #48]	@ (80005bc <LoopForever+0xe>)
 800058a:	2300      	movs	r3, #0
 800058c:	f7ff ffed 	bl	800056a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000590:	480b      	ldr	r0, [pc, #44]	@ (80005c0 <LoopForever+0x12>)
 8000592:	490c      	ldr	r1, [pc, #48]	@ (80005c4 <LoopForever+0x16>)
 8000594:	4a0c      	ldr	r2, [pc, #48]	@ (80005c8 <LoopForever+0x1a>)
 8000596:	2300      	movs	r3, #0
 8000598:	f7ff ffe7 	bl	800056a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800059c:	480b      	ldr	r0, [pc, #44]	@ (80005cc <LoopForever+0x1e>)
 800059e:	490c      	ldr	r1, [pc, #48]	@ (80005d0 <LoopForever+0x22>)
 80005a0:	2300      	movs	r3, #0
 80005a2:	f7ff ffe8 	bl	8000576 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005a6:	f002 f999 	bl	80028dc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80005aa:	f7ff fde7 	bl	800017c <main>

080005ae <LoopForever>:

LoopForever:
  b LoopForever
 80005ae:	e7fe      	b.n	80005ae <LoopForever>
  ldr   r0, =_estack
 80005b0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80005b4:	20000008 	.word	0x20000008
 80005b8:	20000014 	.word	0x20000014
 80005bc:	080029f0 	.word	0x080029f0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80005c0:	20030000 	.word	0x20030000
 80005c4:	20030000 	.word	0x20030000
 80005c8:	080029fc 	.word	0x080029fc
  INIT_BSS _sbss, _ebss
 80005cc:	20000014 	.word	0x20000014
 80005d0:	20000094 	.word	0x20000094

080005d4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d4:	e7fe      	b.n	80005d4 <ADC1_IRQHandler>
	...

080005d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005de:	2300      	movs	r3, #0
 80005e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <HAL_Init+0x3c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000614 <HAL_Init+0x3c>)
 80005e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ee:	2003      	movs	r0, #3
 80005f0:	f000 f948 	bl	8000884 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005f4:	200f      	movs	r0, #15
 80005f6:	f000 f80f 	bl	8000618 <HAL_InitTick>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d002      	beq.n	8000606 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000600:	2301      	movs	r3, #1
 8000602:	71fb      	strb	r3, [r7, #7]
 8000604:	e001      	b.n	800060a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000606:	f7ff fed2 	bl	80003ae <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800060a:	79fb      	ldrb	r3, [r7, #7]
}
 800060c:	4618      	mov	r0, r3
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	58004000 	.word	0x58004000

08000618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000624:	4b17      	ldr	r3, [pc, #92]	@ (8000684 <HAL_InitTick+0x6c>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d024      	beq.n	8000676 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800062c:	f001 fab0 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8000630:	4602      	mov	r2, r0
 8000632:	4b14      	ldr	r3, [pc, #80]	@ (8000684 <HAL_InitTick+0x6c>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	4619      	mov	r1, r3
 8000638:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800063c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000640:	fbb2 f3f3 	udiv	r3, r2, r3
 8000644:	4618      	mov	r0, r3
 8000646:	f000 f950 	bl	80008ea <HAL_SYSTICK_Config>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d10f      	bne.n	8000670 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b0f      	cmp	r3, #15
 8000654:	d809      	bhi.n	800066a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000656:	2200      	movs	r2, #0
 8000658:	6879      	ldr	r1, [r7, #4]
 800065a:	f04f 30ff 	mov.w	r0, #4294967295
 800065e:	f000 f91c 	bl	800089a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000662:	4a09      	ldr	r2, [pc, #36]	@ (8000688 <HAL_InitTick+0x70>)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	e007      	b.n	800067a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800066a:	2301      	movs	r3, #1
 800066c:	73fb      	strb	r3, [r7, #15]
 800066e:	e004      	b.n	800067a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000670:	2301      	movs	r3, #1
 8000672:	73fb      	strb	r3, [r7, #15]
 8000674:	e001      	b.n	800067a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000676:	2301      	movs	r3, #1
 8000678:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800067a:	7bfb      	ldrb	r3, [r7, #15]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000010 	.word	0x20000010
 8000688:	2000000c 	.word	0x2000000c

0800068c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <HAL_IncTick+0x20>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	461a      	mov	r2, r3
 8000696:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <HAL_IncTick+0x24>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4413      	add	r3, r2
 800069c:	4a04      	ldr	r2, [pc, #16]	@ (80006b0 <HAL_IncTick+0x24>)
 800069e:	6013      	str	r3, [r2, #0]
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000010 	.word	0x20000010
 80006b0:	20000090 	.word	0x20000090

080006b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  return uwTick;
 80006b8:	4b03      	ldr	r3, [pc, #12]	@ (80006c8 <HAL_GetTick+0x14>)
 80006ba:	681b      	ldr	r3, [r3, #0]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	20000090 	.word	0x20000090

080006cc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80006d0:	4b03      	ldr	r3, [pc, #12]	@ (80006e0 <HAL_GetTickPrio+0x14>)
 80006d2:	681b      	ldr	r3, [r3, #0]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	2000000c 	.word	0x2000000c

080006e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <__NVIC_SetPriorityGrouping+0x44>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000700:	4013      	ands	r3, r2
 8000702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800070c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000716:	4a04      	ldr	r2, [pc, #16]	@ (8000728 <__NVIC_SetPriorityGrouping+0x44>)
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	60d3      	str	r3, [r2, #12]
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000730:	4b04      	ldr	r3, [pc, #16]	@ (8000744 <__NVIC_GetPriorityGrouping+0x18>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	0a1b      	lsrs	r3, r3, #8
 8000736:	f003 0307 	and.w	r3, r3, #7
}
 800073a:	4618      	mov	r0, r3
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	2b00      	cmp	r3, #0
 8000758:	db0b      	blt.n	8000772 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	f003 021f 	and.w	r2, r3, #31
 8000760:	4907      	ldr	r1, [pc, #28]	@ (8000780 <__NVIC_EnableIRQ+0x38>)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	095b      	lsrs	r3, r3, #5
 8000768:	2001      	movs	r0, #1
 800076a:	fa00 f202 	lsl.w	r2, r0, r2
 800076e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000e100 	.word	0xe000e100

08000784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	6039      	str	r1, [r7, #0]
 800078e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	db0a      	blt.n	80007ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	b2da      	uxtb	r2, r3
 800079c:	490c      	ldr	r1, [pc, #48]	@ (80007d0 <__NVIC_SetPriority+0x4c>)
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	0112      	lsls	r2, r2, #4
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	440b      	add	r3, r1
 80007a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007ac:	e00a      	b.n	80007c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4908      	ldr	r1, [pc, #32]	@ (80007d4 <__NVIC_SetPriority+0x50>)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	f003 030f 	and.w	r3, r3, #15
 80007ba:	3b04      	subs	r3, #4
 80007bc:	0112      	lsls	r2, r2, #4
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	440b      	add	r3, r1
 80007c2:	761a      	strb	r2, [r3, #24]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000e100 	.word	0xe000e100
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b089      	sub	sp, #36	@ 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	f1c3 0307 	rsb	r3, r3, #7
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	bf28      	it	cs
 80007f6:	2304      	movcs	r3, #4
 80007f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3304      	adds	r3, #4
 80007fe:	2b06      	cmp	r3, #6
 8000800:	d902      	bls.n	8000808 <NVIC_EncodePriority+0x30>
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3b03      	subs	r3, #3
 8000806:	e000      	b.n	800080a <NVIC_EncodePriority+0x32>
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	f04f 32ff 	mov.w	r2, #4294967295
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	43da      	mvns	r2, r3
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	401a      	ands	r2, r3
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000820:	f04f 31ff 	mov.w	r1, #4294967295
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	43d9      	mvns	r1, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000830:	4313      	orrs	r3, r2
         );
}
 8000832:	4618      	mov	r0, r3
 8000834:	3724      	adds	r7, #36	@ 0x24
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000850:	d301      	bcc.n	8000856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000852:	2301      	movs	r3, #1
 8000854:	e00f      	b.n	8000876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000856:	4a0a      	ldr	r2, [pc, #40]	@ (8000880 <SysTick_Config+0x40>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3b01      	subs	r3, #1
 800085c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085e:	210f      	movs	r1, #15
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	f7ff ff8e 	bl	8000784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000868:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <SysTick_Config+0x40>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086e:	4b04      	ldr	r3, [pc, #16]	@ (8000880 <SysTick_Config+0x40>)
 8000870:	2207      	movs	r2, #7
 8000872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	e000e010 	.word	0xe000e010

08000884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff ff29 	bl	80006e4 <__NVIC_SetPriorityGrouping>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b086      	sub	sp, #24
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	607a      	str	r2, [r7, #4]
 80008a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008a8:	f7ff ff40 	bl	800072c <__NVIC_GetPriorityGrouping>
 80008ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	6978      	ldr	r0, [r7, #20]
 80008b4:	f7ff ff90 	bl	80007d8 <NVIC_EncodePriority>
 80008b8:	4602      	mov	r2, r0
 80008ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff5f 	bl	8000784 <__NVIC_SetPriority>
}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff33 	bl	8000748 <__NVIC_EnableIRQ>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff ffa4 	bl	8000840 <SysTick_Config>
 80008f8:	4603      	mov	r3, r0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800090a:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <HAL_HSEM_IRQHandler+0x30>)
 800090c:	68db      	ldr	r3, [r3, #12]
 800090e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8000910:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <HAL_HSEM_IRQHandler+0x30>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	43db      	mvns	r3, r3
 8000918:	4906      	ldr	r1, [pc, #24]	@ (8000934 <HAL_HSEM_IRQHandler+0x30>)
 800091a:	4013      	ands	r3, r2
 800091c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800091e:	4a05      	ldr	r2, [pc, #20]	@ (8000934 <HAL_HSEM_IRQHandler+0x30>)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f000 f807 	bl	8000938 <HAL_HSEM_FreeCallback>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	58001500 	.word	0x58001500

08000938 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8000954:	2300      	movs	r3, #0
 8000956:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d01e      	beq.n	800099c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800095e:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <HAL_IPCC_Init+0x60>)
 8000960:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b00      	cmp	r3, #0
 800096c:	d102      	bne.n	8000974 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff fd2e 	bl	80003d0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8000974:	68b8      	ldr	r0, [r7, #8]
 8000976:	f000 f85b 	bl	8000a30 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f000 f82c 	bl	80009e4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2200      	movs	r2, #0
 8000990:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2201      	movs	r2, #1
 8000996:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800099a:	e001      	b.n	80009a0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800099c:	2301      	movs	r3, #1
 800099e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	58000c00 	.word	0x58000c00

080009b0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	4613      	mov	r3, r2
 80009bc:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80009be:	bf00      	nop
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b085      	sub	sp, #20
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	60f8      	str	r0, [r7, #12]
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	4613      	mov	r3, r2
 80009d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	e00f      	b.n	8000a12 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	4413      	add	r3, r2
 80009fa:	4a0b      	ldr	r2, [pc, #44]	@ (8000a28 <IPCC_SetDefaultCallbacks+0x44>)
 80009fc:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	3306      	adds	r3, #6
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	4413      	add	r3, r2
 8000a08:	4a08      	ldr	r2, [pc, #32]	@ (8000a2c <IPCC_SetDefaultCallbacks+0x48>)
 8000a0a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2b05      	cmp	r3, #5
 8000a16:	d9ec      	bls.n	80009f2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	080009b1 	.word	0x080009b1
 8000a2c:	080009cb 	.word	0x080009cb

08000a30 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8000a44:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	223f      	movs	r2, #63	@ 0x3f
 8000a4a:	609a      	str	r2, [r3, #8]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000a5c:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a04      	ldr	r2, [pc, #16]	@ (8000a74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000a62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	58000400 	.word	0x58000400

08000a78 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000a7c:	4b04      	ldr	r3, [pc, #16]	@ (8000a90 <HAL_PWREx_GetVoltageRange+0x18>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	58000400 	.word	0x58000400

08000a94 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000aa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000aa6:	d101      	bne.n	8000aac <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e000      	b.n	8000aae <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <LL_RCC_HSE_Enable>:
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000abc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ac6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000aca:	6013      	str	r3, [r2, #0]
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <LL_RCC_HSE_Disable>:
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ae8:	6013      	str	r3, [r2, #0]
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <LL_RCC_HSE_IsReady>:
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000b06:	d101      	bne.n	8000b0c <LL_RCC_HSE_IsReady+0x18>
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e000      	b.n	8000b0e <LL_RCC_HSE_IsReady+0x1a>
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <LL_RCC_HSI_Enable>:
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000b1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <LL_RCC_HSI_Disable>:
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000b3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000b48:	6013      	str	r3, [r2, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <LL_RCC_HSI_IsReady>:
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000b58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b66:	d101      	bne.n	8000b6c <LL_RCC_HSI_IsReady+0x18>
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e000      	b.n	8000b6e <LL_RCC_HSI_IsReady+0x1a>
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <LL_RCC_HSI_SetCalibTrimming>:
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000b80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	061b      	lsls	r3, r3, #24
 8000b8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b92:	4313      	orrs	r3, r2
 8000b94:	604b      	str	r3, [r1, #4]
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <LL_RCC_HSI48_Enable>:
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000ba6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000baa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000bae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <LL_RCC_HSI48_Disable>:
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000bd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000bd4:	f023 0301 	bic.w	r3, r3, #1
 8000bd8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <LL_RCC_HSI48_IsReady>:
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000bea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d101      	bne.n	8000bfe <LL_RCC_HSI48_IsReady+0x18>
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e000      	b.n	8000c00 <LL_RCC_HSI48_IsReady+0x1a>
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <LL_RCC_LSE_Enable>:
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <LL_RCC_LSE_Disable>:
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000c30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000c3c:	f023 0301 	bic.w	r3, r3, #1
 8000c40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <LL_RCC_LSE_EnableBypass>:
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000c52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000c5e:	f043 0304 	orr.w	r3, r3, #4
 8000c62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <LL_RCC_LSE_DisableBypass>:
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000c80:	f023 0304 	bic.w	r3, r3, #4
 8000c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <LL_RCC_LSE_IsReady>:
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d101      	bne.n	8000caa <LL_RCC_LSE_IsReady+0x18>
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e000      	b.n	8000cac <LL_RCC_LSE_IsReady+0x1a>
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <LL_RCC_LSI1_Enable>:
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000cba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <LL_RCC_LSI1_Disable>:
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000cdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ce4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ce8:	f023 0301 	bic.w	r3, r3, #1
 8000cec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <LL_RCC_LSI1_IsReady>:
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8000cfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d101      	bne.n	8000d12 <LL_RCC_LSI1_IsReady+0x18>
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e000      	b.n	8000d14 <LL_RCC_LSI1_IsReady+0x1a>
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <LL_RCC_LSI2_Enable>:
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000d22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d2e:	f043 0304 	orr.w	r3, r3, #4
 8000d32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <LL_RCC_LSI2_Disable>:
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000d44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d50:	f023 0304 	bic.w	r3, r3, #4
 8000d54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <LL_RCC_LSI2_IsReady>:
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000d66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	2b08      	cmp	r3, #8
 8000d74:	d101      	bne.n	8000d7a <LL_RCC_LSI2_IsReady+0x18>
 8000d76:	2301      	movs	r3, #1
 8000d78:	e000      	b.n	8000d7c <LL_RCC_LSI2_IsReady+0x1a>
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <LL_RCC_LSI2_SetTrimming>:
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8000d8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d96:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	021b      	lsls	r3, r3, #8
 8000d9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000da2:	4313      	orrs	r3, r2
 8000da4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <LL_RCC_MSI_Enable>:
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <LL_RCC_MSI_Disable>:
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000dd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000de0:	f023 0301 	bic.w	r3, r3, #1
 8000de4:	6013      	str	r3, [r2, #0]
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <LL_RCC_MSI_IsReady>:
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d101      	bne.n	8000e06 <LL_RCC_MSI_IsReady+0x16>
 8000e02:	2301      	movs	r3, #1
 8000e04:	e000      	b.n	8000e08 <LL_RCC_MSI_IsReady+0x18>
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <LL_RCC_MSI_SetRange>:
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000e1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	600b      	str	r3, [r1, #0]
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <LL_RCC_MSI_GetRange>:
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8000e40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000e4a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2bb0      	cmp	r3, #176	@ 0xb0
 8000e50:	d901      	bls.n	8000e56 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8000e52:	23b0      	movs	r3, #176	@ 0xb0
 8000e54:	607b      	str	r3, [r7, #4]
  return msiRange;
 8000e56:	687b      	ldr	r3, [r7, #4]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <LL_RCC_MSI_SetCalibTrimming>:
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	604b      	str	r3, [r1, #4]
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <LL_RCC_SetSysClkSource>:
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000e96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	f023 0203 	bic.w	r2, r3, #3
 8000ea0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	608b      	str	r3, [r1, #8]
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <LL_RCC_GetSysClkSource>:
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000eba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f003 030c 	and.w	r3, r3, #12
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <LL_RCC_SetAHBPrescaler>:
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000ed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000ee0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	608b      	str	r3, [r1, #8]
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <LL_C2_RCC_SetAHBPrescaler>:
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8000efe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f02:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8000f06:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <LL_RCC_SetAHB4Prescaler>:
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8000f2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8000f32:	f023 020f 	bic.w	r2, r3, #15
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	091b      	lsrs	r3, r3, #4
 8000f3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <LL_RCC_SetAPB1Prescaler>:
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000f62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	608b      	str	r3, [r1, #8]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <LL_RCC_SetAPB2Prescaler>:
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000f80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000f8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	608b      	str	r3, [r1, #8]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <LL_RCC_GetAHBPrescaler>:
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <LL_RCC_GetAHB4Prescaler>:
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8000fbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fc0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8000fc4:	011b      	lsls	r3, r3, #4
 8000fc6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fe2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000ff6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001000:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001004:	6013      	str	r3, [r2, #0]
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001014:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800101e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001022:	d101      	bne.n	8001028 <LL_RCC_PLL_IsReady+0x18>
 8001024:	2301      	movs	r3, #1
 8001026:	e000      	b.n	800102a <LL_RCC_PLL_IsReady+0x1a>
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001038:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	0a1b      	lsrs	r3, r3, #8
 8001040:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001044:	4618      	mov	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001052:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800106a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001082:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	f003 0303 	and.w	r3, r3, #3
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800109a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010a8:	d101      	bne.n	80010ae <LL_RCC_IsActiveFlag_HPRE+0x18>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80010be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80010c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80010ce:	d101      	bne.n	80010d4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80010d0:	2301      	movs	r3, #1
 80010d2:	e000      	b.n	80010d6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80010e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80010ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010f4:	d101      	bne.n	80010fa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800110a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001114:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001118:	d101      	bne.n	800111e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800112e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001138:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800113c:	d101      	bne.n	8001142 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b08d      	sub	sp, #52	@ 0x34
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e363      	b.n	800182a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0320 	and.w	r3, r3, #32
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 808d 	beq.w	800128a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001170:	f7ff fea1 	bl	8000eb6 <LL_RCC_GetSysClkSource>
 8001174:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001176:	f7ff ff82 	bl	800107e <LL_RCC_PLL_GetMainSource>
 800117a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800117c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800117e:	2b00      	cmp	r3, #0
 8001180:	d005      	beq.n	800118e <HAL_RCC_OscConfig+0x3e>
 8001182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001184:	2b0c      	cmp	r3, #12
 8001186:	d147      	bne.n	8001218 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800118a:	2b01      	cmp	r3, #1
 800118c:	d144      	bne.n	8001218 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e347      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800119e:	f7ff fe4c 	bl	8000e3a <LL_RCC_MSI_GetRange>
 80011a2:	4603      	mov	r3, r0
 80011a4:	429c      	cmp	r4, r3
 80011a6:	d914      	bls.n	80011d2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 fd03 	bl	8001bb8 <RCC_SetFlashLatencyFromMSIRange>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e336      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fe26 	bl	8000e12 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fe4a 	bl	8000e64 <LL_RCC_MSI_SetCalibTrimming>
 80011d0:	e013      	b.n	80011fa <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fe1b 	bl	8000e12 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fe3f 	bl	8000e64 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fce4 	bl	8001bb8 <RCC_SetFlashLatencyFromMSIRange>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e317      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80011fa:	f000 fcc9 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 80011fe:	4603      	mov	r3, r0
 8001200:	4aa4      	ldr	r2, [pc, #656]	@ (8001494 <HAL_RCC_OscConfig+0x344>)
 8001202:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001204:	4ba4      	ldr	r3, [pc, #656]	@ (8001498 <HAL_RCC_OscConfig+0x348>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fa05 	bl	8000618 <HAL_InitTick>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d039      	beq.n	8001288 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e308      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69db      	ldr	r3, [r3, #28]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d01e      	beq.n	800125e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001220:	f7ff fdc8 	bl	8000db4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001224:	f7ff fa46 	bl	80006b4 <HAL_GetTick>
 8001228:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800122c:	f7ff fa42 	bl	80006b4 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e2f5      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800123e:	f7ff fdd7 	bl	8000df0 <LL_RCC_MSI_IsReady>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0f1      	beq.n	800122c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fde0 	bl	8000e12 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fe04 	bl	8000e64 <LL_RCC_MSI_SetCalibTrimming>
 800125c:	e015      	b.n	800128a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800125e:	f7ff fdb8 	bl	8000dd2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001262:	f7ff fa27 	bl	80006b4 <HAL_GetTick>
 8001266:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800126a:	f7ff fa23 	bl	80006b4 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e2d6      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800127c:	f7ff fdb8 	bl	8000df0 <LL_RCC_MSI_IsReady>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f1      	bne.n	800126a <HAL_RCC_OscConfig+0x11a>
 8001286:	e000      	b.n	800128a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001288:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	2b00      	cmp	r3, #0
 8001294:	d047      	beq.n	8001326 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001296:	f7ff fe0e 	bl	8000eb6 <LL_RCC_GetSysClkSource>
 800129a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800129c:	f7ff feef 	bl	800107e <LL_RCC_PLL_GetMainSource>
 80012a0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80012a2:	6a3b      	ldr	r3, [r7, #32]
 80012a4:	2b08      	cmp	r3, #8
 80012a6:	d005      	beq.n	80012b4 <HAL_RCC_OscConfig+0x164>
 80012a8:	6a3b      	ldr	r3, [r7, #32]
 80012aa:	2b0c      	cmp	r3, #12
 80012ac:	d108      	bne.n	80012c0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d105      	bne.n	80012c0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d134      	bne.n	8001326 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e2b4      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012c8:	d102      	bne.n	80012d0 <HAL_RCC_OscConfig+0x180>
 80012ca:	f7ff fbf5 	bl	8000ab8 <LL_RCC_HSE_Enable>
 80012ce:	e001      	b.n	80012d4 <HAL_RCC_OscConfig+0x184>
 80012d0:	f7ff fc01 	bl	8000ad6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d012      	beq.n	8001302 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012dc:	f7ff f9ea 	bl	80006b4 <HAL_GetTick>
 80012e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e4:	f7ff f9e6 	bl	80006b4 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b64      	cmp	r3, #100	@ 0x64
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e299      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80012f6:	f7ff fbfd 	bl	8000af4 <LL_RCC_HSE_IsReady>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f1      	beq.n	80012e4 <HAL_RCC_OscConfig+0x194>
 8001300:	e011      	b.n	8001326 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001302:	f7ff f9d7 	bl	80006b4 <HAL_GetTick>
 8001306:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800130a:	f7ff f9d3 	bl	80006b4 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b64      	cmp	r3, #100	@ 0x64
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e286      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800131c:	f7ff fbea 	bl	8000af4 <LL_RCC_HSE_IsReady>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f1      	bne.n	800130a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d04c      	beq.n	80013cc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001332:	f7ff fdc0 	bl	8000eb6 <LL_RCC_GetSysClkSource>
 8001336:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001338:	f7ff fea1 	bl	800107e <LL_RCC_PLL_GetMainSource>
 800133c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2b04      	cmp	r3, #4
 8001342:	d005      	beq.n	8001350 <HAL_RCC_OscConfig+0x200>
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	2b0c      	cmp	r3, #12
 8001348:	d10e      	bne.n	8001368 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d10b      	bne.n	8001368 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e266      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fc09 	bl	8000b78 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001366:	e031      	b.n	80013cc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d019      	beq.n	80013a4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001370:	f7ff fbd2 	bl	8000b18 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001374:	f7ff f99e 	bl	80006b4 <HAL_GetTick>
 8001378:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800137c:	f7ff f99a 	bl	80006b4 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e24d      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800138e:	f7ff fbe1 	bl	8000b54 <LL_RCC_HSI_IsReady>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f1      	beq.n	800137c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fbeb 	bl	8000b78 <LL_RCC_HSI_SetCalibTrimming>
 80013a2:	e013      	b.n	80013cc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a4:	f7ff fbc7 	bl	8000b36 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a8:	f7ff f984 	bl	80006b4 <HAL_GetTick>
 80013ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b0:	f7ff f980 	bl	80006b4 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e233      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80013c2:	f7ff fbc7 	bl	8000b54 <LL_RCC_HSI_IsReady>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f1      	bne.n	80013b0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d106      	bne.n	80013e6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 80a3 	beq.w	800152c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d076      	beq.n	80014dc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d046      	beq.n	8001488 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80013fa:	f7ff fc7e 	bl	8000cfa <LL_RCC_LSI1_IsReady>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d113      	bne.n	800142c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001404:	f7ff fc57 	bl	8000cb6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001408:	f7ff f954 	bl	80006b4 <HAL_GetTick>
 800140c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001410:	f7ff f950 	bl	80006b4 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e203      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001422:	f7ff fc6a 	bl	8000cfa <LL_RCC_LSI1_IsReady>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f1      	beq.n	8001410 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800142c:	f7ff fc77 	bl	8000d1e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001430:	f7ff f940 	bl	80006b4 <HAL_GetTick>
 8001434:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001438:	f7ff f93c 	bl	80006b4 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b03      	cmp	r3, #3
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e1ef      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800144a:	f7ff fc8a 	bl	8000d62 <LL_RCC_LSI2_IsReady>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f1      	beq.n	8001438 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fc94 	bl	8000d86 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800145e:	f7ff fc3b 	bl	8000cd8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001462:	f7ff f927 	bl	80006b4 <HAL_GetTick>
 8001466:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800146a:	f7ff f923 	bl	80006b4 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e1d6      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800147c:	f7ff fc3d 	bl	8000cfa <LL_RCC_LSI1_IsReady>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f1      	bne.n	800146a <HAL_RCC_OscConfig+0x31a>
 8001486:	e051      	b.n	800152c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001488:	f7ff fc15 	bl	8000cb6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148c:	f7ff f912 	bl	80006b4 <HAL_GetTick>
 8001490:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001492:	e00c      	b.n	80014ae <HAL_RCC_OscConfig+0x35e>
 8001494:	20000008 	.word	0x20000008
 8001498:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800149c:	f7ff f90a 	bl	80006b4 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e1bd      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80014ae:	f7ff fc24 	bl	8000cfa <LL_RCC_LSI1_IsReady>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0f1      	beq.n	800149c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80014b8:	f7ff fc42 	bl	8000d40 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80014be:	f7ff f8f9 	bl	80006b4 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e1ac      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80014d0:	f7ff fc47 	bl	8000d62 <LL_RCC_LSI2_IsReady>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f1      	bne.n	80014be <HAL_RCC_OscConfig+0x36e>
 80014da:	e027      	b.n	800152c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80014dc:	f7ff fc30 	bl	8000d40 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e0:	f7ff f8e8 	bl	80006b4 <HAL_GetTick>
 80014e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80014e8:	f7ff f8e4 	bl	80006b4 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e197      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80014fa:	f7ff fc32 	bl	8000d62 <LL_RCC_LSI2_IsReady>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f1      	bne.n	80014e8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001504:	f7ff fbe8 	bl	8000cd8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001508:	f7ff f8d4 	bl	80006b4 <HAL_GetTick>
 800150c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001510:	f7ff f8d0 	bl	80006b4 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e183      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001522:	f7ff fbea 	bl	8000cfa <LL_RCC_LSI1_IsReady>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1f1      	bne.n	8001510 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d05b      	beq.n	80015f0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001538:	4ba7      	ldr	r3, [pc, #668]	@ (80017d8 <HAL_RCC_OscConfig+0x688>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001540:	2b00      	cmp	r3, #0
 8001542:	d114      	bne.n	800156e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001544:	f7ff fa88 	bl	8000a58 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001548:	f7ff f8b4 	bl	80006b4 <HAL_GetTick>
 800154c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001550:	f7ff f8b0 	bl	80006b4 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e163      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001562:	4b9d      	ldr	r3, [pc, #628]	@ (80017d8 <HAL_RCC_OscConfig+0x688>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d102      	bne.n	800157c <HAL_RCC_OscConfig+0x42c>
 8001576:	f7ff fb48 	bl	8000c0a <LL_RCC_LSE_Enable>
 800157a:	e00c      	b.n	8001596 <HAL_RCC_OscConfig+0x446>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b05      	cmp	r3, #5
 8001582:	d104      	bne.n	800158e <HAL_RCC_OscConfig+0x43e>
 8001584:	f7ff fb63 	bl	8000c4e <LL_RCC_LSE_EnableBypass>
 8001588:	f7ff fb3f 	bl	8000c0a <LL_RCC_LSE_Enable>
 800158c:	e003      	b.n	8001596 <HAL_RCC_OscConfig+0x446>
 800158e:	f7ff fb4d 	bl	8000c2c <LL_RCC_LSE_Disable>
 8001592:	f7ff fb6d 	bl	8000c70 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d014      	beq.n	80015c8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159e:	f7ff f889 	bl	80006b4 <HAL_GetTick>
 80015a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80015a4:	e00a      	b.n	80015bc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a6:	f7ff f885 	bl	80006b4 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e136      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80015bc:	f7ff fb69 	bl	8000c92 <LL_RCC_LSE_IsReady>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0ef      	beq.n	80015a6 <HAL_RCC_OscConfig+0x456>
 80015c6:	e013      	b.n	80015f0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c8:	f7ff f874 	bl	80006b4 <HAL_GetTick>
 80015cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80015ce:	e00a      	b.n	80015e6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d0:	f7ff f870 	bl	80006b4 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015de:	4293      	cmp	r3, r2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e121      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80015e6:	f7ff fb54 	bl	8000c92 <LL_RCC_LSE_IsReady>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1ef      	bne.n	80015d0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d02c      	beq.n	8001656 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001600:	2b00      	cmp	r3, #0
 8001602:	d014      	beq.n	800162e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001604:	f7ff facd 	bl	8000ba2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001608:	f7ff f854 	bl	80006b4 <HAL_GetTick>
 800160c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001610:	f7ff f850 	bl	80006b4 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e103      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001622:	f7ff fae0 	bl	8000be6 <LL_RCC_HSI48_IsReady>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f1      	beq.n	8001610 <HAL_RCC_OscConfig+0x4c0>
 800162c:	e013      	b.n	8001656 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800162e:	f7ff fac9 	bl	8000bc4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001632:	f7ff f83f 	bl	80006b4 <HAL_GetTick>
 8001636:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800163a:	f7ff f83b 	bl	80006b4 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e0ee      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800164c:	f7ff facb 	bl	8000be6 <LL_RCC_HSI48_IsReady>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f1      	bne.n	800163a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 80e4 	beq.w	8001828 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001660:	f7ff fc29 	bl	8000eb6 <LL_RCC_GetSysClkSource>
 8001664:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001666:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001672:	2b02      	cmp	r3, #2
 8001674:	f040 80b4 	bne.w	80017e0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0203 	and.w	r2, r3, #3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	429a      	cmp	r2, r3
 8001684:	d123      	bne.n	80016ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001690:	429a      	cmp	r2, r3
 8001692:	d11c      	bne.n	80016ce <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	0a1b      	lsrs	r3, r3, #8
 8001698:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d114      	bne.n	80016ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d10d      	bne.n	80016ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016bc:	429a      	cmp	r2, r3
 80016be:	d106      	bne.n	80016ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d05d      	beq.n	800178a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	2b0c      	cmp	r3, #12
 80016d2:	d058      	beq.n	8001786 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0a1      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016e6:	f7ff fc84 	bl	8000ff2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016ea:	f7fe ffe3 	bl	80006b4 <HAL_GetTick>
 80016ee:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f2:	f7fe ffdf 	bl	80006b4 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e092      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001704:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1ef      	bne.n	80016f2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001712:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	4b30      	ldr	r3, [pc, #192]	@ (80017dc <HAL_RCC_OscConfig+0x68c>)
 800171a:	4013      	ands	r3, r2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001724:	4311      	orrs	r1, r2
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800172a:	0212      	lsls	r2, r2, #8
 800172c:	4311      	orrs	r1, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001732:	4311      	orrs	r1, r2
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001738:	4311      	orrs	r1, r2
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800173e:	430a      	orrs	r2, r1
 8001740:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001744:	4313      	orrs	r3, r2
 8001746:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001748:	f7ff fc44 	bl	8000fd4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800174c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001756:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800175a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800175c:	f7fe ffaa 	bl	80006b4 <HAL_GetTick>
 8001760:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001764:	f7fe ffa6 	bl	80006b4 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e059      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0ef      	beq.n	8001764 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001784:	e050      	b.n	8001828 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e04f      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800178a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d147      	bne.n	8001828 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001798:	f7ff fc1c 	bl	8000fd4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800179c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017ac:	f7fe ff82 	bl	80006b4 <HAL_GetTick>
 80017b0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b4:	f7fe ff7e 	bl	80006b4 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e031      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0ef      	beq.n	80017b4 <HAL_RCC_OscConfig+0x664>
 80017d4:	e028      	b.n	8001828 <HAL_RCC_OscConfig+0x6d8>
 80017d6:	bf00      	nop
 80017d8:	58000400 	.word	0x58000400
 80017dc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	2b0c      	cmp	r3, #12
 80017e4:	d01e      	beq.n	8001824 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e6:	f7ff fc04 	bl	8000ff2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ea:	f7fe ff63 	bl	80006b4 <HAL_GetTick>
 80017ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f2:	f7fe ff5f 	bl	80006b4 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e012      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001804:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1ef      	bne.n	80017f2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001812:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800181c:	4b05      	ldr	r3, [pc, #20]	@ (8001834 <HAL_RCC_OscConfig+0x6e4>)
 800181e:	4013      	ands	r3, r2
 8001820:	60cb      	str	r3, [r1, #12]
 8001822:	e001      	b.n	8001828 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3734      	adds	r7, #52	@ 0x34
 800182e:	46bd      	mov	sp, r7
 8001830:	bd90      	pop	{r4, r7, pc}
 8001832:	bf00      	nop
 8001834:	eefefffc 	.word	0xeefefffc

08001838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e12d      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800184c:	4b98      	ldr	r3, [pc, #608]	@ (8001ab0 <HAL_RCC_ClockConfig+0x278>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d91b      	bls.n	8001892 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b95      	ldr	r3, [pc, #596]	@ (8001ab0 <HAL_RCC_ClockConfig+0x278>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 0207 	bic.w	r2, r3, #7
 8001862:	4993      	ldr	r1, [pc, #588]	@ (8001ab0 <HAL_RCC_ClockConfig+0x278>)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800186a:	f7fe ff23 	bl	80006b4 <HAL_GetTick>
 800186e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001870:	e008      	b.n	8001884 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001872:	f7fe ff1f 	bl	80006b4 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e111      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001884:	4b8a      	ldr	r3, [pc, #552]	@ (8001ab0 <HAL_RCC_ClockConfig+0x278>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d1ef      	bne.n	8001872 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d016      	beq.n	80018cc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fb13 	bl	8000ece <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80018a8:	f7fe ff04 	bl	80006b4 <HAL_GetTick>
 80018ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80018b0:	f7fe ff00 	bl	80006b4 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e0f2      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80018c2:	f7ff fbe8 	bl	8001096 <LL_RCC_IsActiveFlag_HPRE>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f1      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0320 	and.w	r3, r3, #32
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d016      	beq.n	8001906 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fb0a 	bl	8000ef6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80018e2:	f7fe fee7 	bl	80006b4 <HAL_GetTick>
 80018e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80018ea:	f7fe fee3 	bl	80006b4 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e0d5      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80018fc:	f7ff fbdd 	bl	80010ba <LL_RCC_IsActiveFlag_C2HPRE>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f1      	beq.n	80018ea <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800190e:	2b00      	cmp	r3, #0
 8001910:	d016      	beq.n	8001940 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fb03 	bl	8000f22 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800191c:	f7fe feca 	bl	80006b4 <HAL_GetTick>
 8001920:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001924:	f7fe fec6 	bl	80006b4 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e0b8      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001936:	f7ff fbd3 	bl	80010e0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f1      	beq.n	8001924 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d016      	beq.n	800197a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fafd 	bl	8000f50 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001956:	f7fe fead 	bl	80006b4 <HAL_GetTick>
 800195a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800195c:	e008      	b.n	8001970 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800195e:	f7fe fea9 	bl	80006b4 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e09b      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001970:	f7ff fbc9 	bl	8001106 <LL_RCC_IsActiveFlag_PPRE1>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f1      	beq.n	800195e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d017      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff faf3 	bl	8000f78 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001992:	f7fe fe8f 	bl	80006b4 <HAL_GetTick>
 8001996:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001998:	e008      	b.n	80019ac <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800199a:	f7fe fe8b 	bl	80006b4 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e07d      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80019ac:	f7ff fbbd 	bl	800112a <LL_RCC_IsActiveFlag_PPRE2>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f1      	beq.n	800199a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d043      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d106      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80019ca:	f7ff f893 	bl	8000af4 <LL_RCC_HSE_IsReady>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d11e      	bne.n	8001a12 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e067      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d106      	bne.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80019e0:	f7ff fb16 	bl	8001010 <LL_RCC_PLL_IsReady>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d113      	bne.n	8001a12 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e05c      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d106      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80019f6:	f7ff f9fb 	bl	8000df0 <LL_RCC_MSI_IsReady>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d108      	bne.n	8001a12 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e051      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001a04:	f7ff f8a6 	bl	8000b54 <LL_RCC_HSI_IsReady>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e04a      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fa39 	bl	8000e8e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a1c:	f7fe fe4a 	bl	80006b4 <HAL_GetTick>
 8001a20:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	e00a      	b.n	8001a3a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a24:	f7fe fe46 	bl	80006b4 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e036      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	f7ff fa3c 	bl	8000eb6 <LL_RCC_GetSysClkSource>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d1ec      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a4a:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <HAL_RCC_ClockConfig+0x278>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d21b      	bcs.n	8001a90 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a58:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <HAL_RCC_ClockConfig+0x278>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f023 0207 	bic.w	r2, r3, #7
 8001a60:	4913      	ldr	r1, [pc, #76]	@ (8001ab0 <HAL_RCC_ClockConfig+0x278>)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a68:	f7fe fe24 	bl	80006b4 <HAL_GetTick>
 8001a6c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001a70:	f7fe fe20 	bl	80006b4 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e012      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <HAL_RCC_ClockConfig+0x278>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d1ef      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001a90:	f000 f87e 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4a07      	ldr	r2, [pc, #28]	@ (8001ab4 <HAL_RCC_ClockConfig+0x27c>)
 8001a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8001a9a:	f7fe fe17 	bl	80006cc <HAL_GetTickPrio>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fdb9 	bl	8000618 <HAL_InitTick>
 8001aa6:	4603      	mov	r3, r0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	58004000 	.word	0x58004000
 8001ab4:	20000008 	.word	0x20000008

08001ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001abe:	f7ff f9fa 	bl	8000eb6 <LL_RCC_GetSysClkSource>
 8001ac2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10a      	bne.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001aca:	f7ff f9b6 	bl	8000e3a <LL_RCC_MSI_GetRange>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	091b      	lsrs	r3, r3, #4
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	4a2b      	ldr	r2, [pc, #172]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	e04b      	b.n	8001b78 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d102      	bne.n	8001aec <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ae6:	4b28      	ldr	r3, [pc, #160]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	e045      	b.n	8001b78 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d10a      	bne.n	8001b08 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001af2:	f7fe ffcf 	bl	8000a94 <LL_RCC_HSE_IsEnabledDiv2>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d102      	bne.n	8001b02 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001afc:	4b22      	ldr	r3, [pc, #136]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	e03a      	b.n	8001b78 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001b02:	4b22      	ldr	r3, [pc, #136]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	e037      	b.n	8001b78 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001b08:	f7ff fab9 	bl	800107e <LL_RCC_PLL_GetMainSource>
 8001b0c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d003      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x64>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d003      	beq.n	8001b22 <HAL_RCC_GetSysClockFreq+0x6a>
 8001b1a:	e00d      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001b1e:	60bb      	str	r3, [r7, #8]
        break;
 8001b20:	e015      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001b22:	f7fe ffb7 	bl	8000a94 <LL_RCC_HSE_IsEnabledDiv2>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d102      	bne.n	8001b32 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001b2c:	4b16      	ldr	r3, [pc, #88]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001b2e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001b30:	e00d      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8001b32:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001b34:	60bb      	str	r3, [r7, #8]
        break;
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001b38:	f7ff f97f 	bl	8000e3a <LL_RCC_MSI_GetRange>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	091b      	lsrs	r3, r3, #4
 8001b40:	f003 030f 	and.w	r3, r3, #15
 8001b44:	4a0f      	ldr	r2, [pc, #60]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4a:	60bb      	str	r3, [r7, #8]
        break;
 8001b4c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8001b4e:	f7ff fa71 	bl	8001034 <LL_RCC_PLL_GetN>
 8001b52:	4602      	mov	r2, r0
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	fb03 f402 	mul.w	r4, r3, r2
 8001b5a:	f7ff fa84 	bl	8001066 <LL_RCC_PLL_GetDivider>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	3301      	adds	r3, #1
 8001b64:	fbb4 f4f3 	udiv	r4, r4, r3
 8001b68:	f7ff fa71 	bl	800104e <LL_RCC_PLL_GetR>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	0f5b      	lsrs	r3, r3, #29
 8001b70:	3301      	adds	r3, #1
 8001b72:	fbb4 f3f3 	udiv	r3, r4, r3
 8001b76:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001b78:	68fb      	ldr	r3, [r7, #12]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd90      	pop	{r4, r7, pc}
 8001b82:	bf00      	nop
 8001b84:	080029a8 	.word	0x080029a8
 8001b88:	00f42400 	.word	0x00f42400
 8001b8c:	01e84800 	.word	0x01e84800

08001b90 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b90:	b598      	push	{r3, r4, r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001b94:	f7ff ff90 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 8001b98:	4604      	mov	r4, r0
 8001b9a:	f7ff fa01 	bl	8000fa0 <LL_RCC_GetAHBPrescaler>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	4a03      	ldr	r2, [pc, #12]	@ (8001bb4 <HAL_RCC_GetHCLKFreq+0x24>)
 8001ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	bd98      	pop	{r3, r4, r7, pc}
 8001bb4:	08002968 	.word	0x08002968

08001bb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2bb0      	cmp	r3, #176	@ 0xb0
 8001bc4:	d903      	bls.n	8001bce <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001bc6:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	e007      	b.n	8001bde <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	4a11      	ldr	r2, [pc, #68]	@ (8001c1c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bdc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001bde:	f7ff f9eb 	bl	8000fb8 <LL_RCC_GetAHB4Prescaler>
 8001be2:	4603      	mov	r3, r0
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	4a0d      	ldr	r2, [pc, #52]	@ (8001c20 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8001bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8001bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001c00:	0c9c      	lsrs	r4, r3, #18
 8001c02:	f7fe ff39 	bl	8000a78 <HAL_PWREx_GetVoltageRange>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f000 f80c 	bl	8001c28 <RCC_SetFlashLatency>
 8001c10:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd90      	pop	{r4, r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	080029a8 	.word	0x080029a8
 8001c20:	08002968 	.word	0x08002968
 8001c24:	431bde83 	.word	0x431bde83

08001c28 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b093      	sub	sp, #76	@ 0x4c
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001c32:	4b37      	ldr	r3, [pc, #220]	@ (8001d10 <RCC_SetFlashLatency+0xe8>)
 8001c34:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001c38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001c3e:	4a35      	ldr	r2, [pc, #212]	@ (8001d14 <RCC_SetFlashLatency+0xec>)
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001c4a:	4b33      	ldr	r3, [pc, #204]	@ (8001d18 <RCC_SetFlashLatency+0xf0>)
 8001c4c:	f107 040c 	add.w	r4, r7, #12
 8001c50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001c56:	2300      	movs	r3, #0
 8001c58:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c60:	d11a      	bne.n	8001c98 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c66:	e013      	b.n	8001c90 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001c68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	3348      	adds	r3, #72	@ 0x48
 8001c6e:	443b      	add	r3, r7
 8001c70:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d807      	bhi.n	8001c8a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001c7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	3348      	adds	r3, #72	@ 0x48
 8001c80:	443b      	add	r3, r7
 8001c82:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001c86:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8001c88:	e020      	b.n	8001ccc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001c8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d9e8      	bls.n	8001c68 <RCC_SetFlashLatency+0x40>
 8001c96:	e019      	b.n	8001ccc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c9c:	e013      	b.n	8001cc6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	3348      	adds	r3, #72	@ 0x48
 8001ca4:	443b      	add	r3, r7
 8001ca6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d807      	bhi.n	8001cc0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001cb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	3348      	adds	r3, #72	@ 0x48
 8001cb6:	443b      	add	r3, r7
 8001cb8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001cbc:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8001cbe:	e005      	b.n	8001ccc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d9e8      	bls.n	8001c9e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8001ccc:	4b13      	ldr	r3, [pc, #76]	@ (8001d1c <RCC_SetFlashLatency+0xf4>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f023 0207 	bic.w	r2, r3, #7
 8001cd4:	4911      	ldr	r1, [pc, #68]	@ (8001d1c <RCC_SetFlashLatency+0xf4>)
 8001cd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001cdc:	f7fe fcea 	bl	80006b4 <HAL_GetTick>
 8001ce0:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001ce2:	e008      	b.n	8001cf6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001ce4:	f7fe fce6 	bl	80006b4 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e007      	b.n	8001d06 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001cf6:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <RCC_SetFlashLatency+0xf4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d1ef      	bne.n	8001ce4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	374c      	adds	r7, #76	@ 0x4c
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd90      	pop	{r4, r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	0800293c 	.word	0x0800293c
 8001d14:	0800294c 	.word	0x0800294c
 8001d18:	08002958 	.word	0x08002958
 8001d1c:	58004000 	.word	0x58004000

08001d20 <LL_RCC_LSE_IsEnabled>:
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8001d24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <LL_RCC_LSE_IsEnabled+0x18>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <LL_RCC_LSE_IsEnabled+0x1a>
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_RCC_LSE_IsReady>:
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001d48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d101      	bne.n	8001d5c <LL_RCC_LSE_IsReady+0x18>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <LL_RCC_LSE_IsReady+0x1a>
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_RCC_SetRFWKPClockSource>:
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8001d70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d78:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001d7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_RCC_SetSMPSClockSource>:
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001d9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da2:	f023 0203 	bic.w	r2, r3, #3
 8001da6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_RCC_SetSMPSPrescaler>:
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8001dc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dca:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001dce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_RCC_SetUSARTClockSource>:
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8001dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001df4:	f023 0203 	bic.w	r2, r3, #3
 8001df8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_RCC_SetLPUARTClockSource>:
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001e18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e20:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001e24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_RCC_SetI2CClockSource>:
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001e44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e48:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8001e54:	43db      	mvns	r3, r3
 8001e56:	401a      	ands	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8001e60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e64:	4313      	orrs	r3, r2
 8001e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <LL_RCC_SetLPTIMClockSource>:
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8001e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e82:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	0c1b      	lsrs	r3, r3, #16
 8001e8a:	041b      	lsls	r3, r3, #16
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	401a      	ands	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	041b      	lsls	r3, r3, #16
 8001e94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <LL_RCC_SetSAIClockSource>:
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8001eb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ebe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <LL_RCC_SetRNGClockSource>:
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8001ede:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ee6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8001eea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <LL_RCC_SetCLK48ClockSource>:
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8001f0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001f16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <LL_RCC_SetUSBClockSource>:
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ffe3 	bl	8001f02 <LL_RCC_SetCLK48ClockSource>
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <LL_RCC_SetADCClockSource>:
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8001f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f54:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8001f58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_RCC_SetRTCClockSource>:
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001f78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_RCC_GetRTCClockSource>:
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8001fa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_RCC_ForceBackupDomainReset>:
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001fba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_RCC_ReleaseBackupDomainReset>:
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001fdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fe8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <LL_RCC_PLLSAI1_Enable>:
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8001ffe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002008:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800200c:	6013      	str	r3, [r2, #0]
}
 800200e:	bf00      	nop
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_RCC_PLLSAI1_Disable>:
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800201c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002026:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800202a:	6013      	str	r3, [r2, #0]
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <LL_RCC_PLLSAI1_IsReady>:
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800203a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002044:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002048:	d101      	bne.n	800204e <LL_RCC_PLLSAI1_IsReady+0x18>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b088      	sub	sp, #32
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002062:	2300      	movs	r3, #0
 8002064:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002066:	2300      	movs	r3, #0
 8002068:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	d034      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800207e:	d021      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002080:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002084:	d81b      	bhi.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002086:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800208a:	d01d      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800208c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002090:	d815      	bhi.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00b      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002096:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800209a:	d110      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800209c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020aa:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80020ac:	e00d      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3304      	adds	r3, #4
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f947 	bl	8002346 <RCCEx_PLLSAI1_ConfigNP>
 80020b8:	4603      	mov	r3, r0
 80020ba:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80020bc:	e005      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	77fb      	strb	r3, [r7, #31]
        break;
 80020c2:	e002      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80020c4:	bf00      	nop
 80020c6:	e000      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80020c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80020ca:	7ffb      	ldrb	r3, [r7, #31]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d105      	bne.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fee8 	bl	8001eaa <LL_RCC_SetSAIClockSource>
 80020da:	e001      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020dc:	7ffb      	ldrb	r3, [r7, #31]
 80020de:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d046      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80020ec:	f7ff ff56 	bl	8001f9c <LL_RCC_GetRTCClockSource>
 80020f0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d03c      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80020fc:	f7fe fcac 	bl	8000a58 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d105      	bne.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff ff30 	bl	8001f70 <LL_RCC_SetRTCClockSource>
 8002110:	e02e      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002112:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800211c:	f7ff ff4b 	bl	8001fb6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002120:	f7ff ff5a 	bl	8001fd8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	4313      	orrs	r3, r2
 8002130:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002132:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800213c:	f7ff fdf0 	bl	8001d20 <LL_RCC_LSE_IsEnabled>
 8002140:	4603      	mov	r3, r0
 8002142:	2b01      	cmp	r3, #1
 8002144:	d114      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002146:	f7fe fab5 	bl	80006b4 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800214c:	e00b      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7fe fab1 	bl	80006b4 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800215c:	4293      	cmp	r3, r2
 800215e:	d902      	bls.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	77fb      	strb	r3, [r7, #31]
              break;
 8002164:	e004      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002166:	f7ff fded 	bl	8001d44 <LL_RCC_LSE_IsReady>
 800216a:	4603      	mov	r3, r0
 800216c:	2b01      	cmp	r3, #1
 800216e:	d1ee      	bne.n	800214e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002170:	7ffb      	ldrb	r3, [r7, #31]
 8002172:	77bb      	strb	r3, [r7, #30]
 8002174:	e001      	b.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002176:	7ffb      	ldrb	r3, [r7, #31]
 8002178:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d004      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fe2a 	bl	8001de4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d004      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fe35 	bl	8001e10 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d004      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fe5d 	bl	8001e76 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0320 	and.w	r3, r3, #32
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d004      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fe52 	bl	8001e76 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d004      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fe2a 	bl	8001e3c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d004      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fe1f 	bl	8001e3c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d022      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fe8d 	bl	8001f2e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002218:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800221c:	d107      	bne.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800221e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002228:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800222c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002232:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002236:	d10b      	bne.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3304      	adds	r3, #4
 800223c:	4618      	mov	r0, r3
 800223e:	f000 f8dd 	bl	80023fc <RCCEx_PLLSAI1_ConfigNQ>
 8002242:	4603      	mov	r3, r0
 8002244:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002246:	7ffb      	ldrb	r3, [r7, #31]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800224c:	7ffb      	ldrb	r3, [r7, #31]
 800224e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002258:	2b00      	cmp	r3, #0
 800225a:	d02b      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002264:	d008      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800226a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800226e:	d003      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002274:	2b00      	cmp	r3, #0
 8002276:	d105      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fe2a 	bl	8001ed6 <LL_RCC_SetRNGClockSource>
 8002282:	e00a      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002288:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	2000      	movs	r0, #0
 8002290:	f7ff fe21 	bl	8001ed6 <LL_RCC_SetRNGClockSource>
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f7ff fe34 	bl	8001f02 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800229e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80022a2:	d107      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80022a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d022      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fe3d 	bl	8001f44 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022d2:	d107      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80022d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022ec:	d10b      	bne.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3304      	adds	r3, #4
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f8dd 	bl	80024b2 <RCCEx_PLLSAI1_ConfigNR>
 80022f8:	4603      	mov	r3, r0
 80022fa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80022fc:	7ffb      	ldrb	r3, [r7, #31]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002302:	7ffb      	ldrb	r3, [r7, #31]
 8002304:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d004      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fd26 	bl	8001d68 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d009      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fd45 	bl	8001dbc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fd2c 	bl	8001d94 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800233c:	7fbb      	ldrb	r3, [r7, #30]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3720      	adds	r7, #32
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002352:	f7ff fe61 	bl	8002018 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002356:	f7fe f9ad 	bl	80006b4 <HAL_GetTick>
 800235a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800235c:	e009      	b.n	8002372 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800235e:	f7fe f9a9 	bl	80006b4 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d902      	bls.n	8002372 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	73fb      	strb	r3, [r7, #15]
      break;
 8002370:	e004      	b.n	800237c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002372:	f7ff fe60 	bl	8002036 <LL_RCC_PLLSAI1_IsReady>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f0      	bne.n	800235e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800237c:	7bfb      	ldrb	r3, [r7, #15]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d137      	bne.n	80023f2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002382:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	021b      	lsls	r3, r3, #8
 8002392:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002396:	4313      	orrs	r3, r2
 8002398:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800239a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023ac:	4313      	orrs	r3, r2
 80023ae:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80023b0:	f7ff fe23 	bl	8001ffa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023b4:	f7fe f97e 	bl	80006b4 <HAL_GetTick>
 80023b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80023ba:	e009      	b.n	80023d0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023bc:	f7fe f97a 	bl	80006b4 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d902      	bls.n	80023d0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	73fb      	strb	r3, [r7, #15]
        break;
 80023ce:	e004      	b.n	80023da <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80023d0:	f7ff fe31 	bl	8002036 <LL_RCC_PLLSAI1_IsReady>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d1f0      	bne.n	80023bc <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d108      	bne.n	80023f2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80023e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023ee:	4313      	orrs	r3, r2
 80023f0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002408:	f7ff fe06 	bl	8002018 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800240c:	f7fe f952 	bl	80006b4 <HAL_GetTick>
 8002410:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002412:	e009      	b.n	8002428 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002414:	f7fe f94e 	bl	80006b4 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d902      	bls.n	8002428 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	73fb      	strb	r3, [r7, #15]
      break;
 8002426:	e004      	b.n	8002432 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002428:	f7ff fe05 	bl	8002036 <LL_RCC_PLLSAI1_IsReady>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d137      	bne.n	80024a8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002438:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	021b      	lsls	r3, r3, #8
 8002448:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800244c:	4313      	orrs	r3, r2
 800244e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002450:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002462:	4313      	orrs	r3, r2
 8002464:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002466:	f7ff fdc8 	bl	8001ffa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800246a:	f7fe f923 	bl	80006b4 <HAL_GetTick>
 800246e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002470:	e009      	b.n	8002486 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002472:	f7fe f91f 	bl	80006b4 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d902      	bls.n	8002486 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	73fb      	strb	r3, [r7, #15]
        break;
 8002484:	e004      	b.n	8002490 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002486:	f7ff fdd6 	bl	8002036 <LL_RCC_PLLSAI1_IsReady>
 800248a:	4603      	mov	r3, r0
 800248c:	2b01      	cmp	r3, #1
 800248e:	d1f0      	bne.n	8002472 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d108      	bne.n	80024a8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024a4:	4313      	orrs	r3, r2
 80024a6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b084      	sub	sp, #16
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80024be:	f7ff fdab 	bl	8002018 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80024c2:	f7fe f8f7 	bl	80006b4 <HAL_GetTick>
 80024c6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80024c8:	e009      	b.n	80024de <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024ca:	f7fe f8f3 	bl	80006b4 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d902      	bls.n	80024de <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	73fb      	strb	r3, [r7, #15]
      break;
 80024dc:	e004      	b.n	80024e8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80024de:	f7ff fdaa 	bl	8002036 <LL_RCC_PLLSAI1_IsReady>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f0      	bne.n	80024ca <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d137      	bne.n	800255e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80024ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	021b      	lsls	r3, r3, #8
 80024fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002502:	4313      	orrs	r3, r2
 8002504:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002506:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002518:	4313      	orrs	r3, r2
 800251a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800251c:	f7ff fd6d 	bl	8001ffa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002520:	f7fe f8c8 	bl	80006b4 <HAL_GetTick>
 8002524:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002526:	e009      	b.n	800253c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002528:	f7fe f8c4 	bl	80006b4 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d902      	bls.n	800253c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	73fb      	strb	r3, [r7, #15]
        break;
 800253a:	e004      	b.n	8002546 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800253c:	f7ff fd7b 	bl	8002036 <LL_RCC_PLLSAI1_IsReady>
 8002540:	4603      	mov	r3, r0
 8002542:	2b01      	cmp	r3, #1
 8002544:	d1f0      	bne.n	8002528 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d108      	bne.n	800255e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800254c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800255a:	4313      	orrs	r3, r2
 800255c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800255e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e07a      	b.n	8002670 <HAL_RTC_Init+0x108>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d106      	bne.n	8002594 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7fd ff32 	bl	80003f8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	2b10      	cmp	r3, #16
 80025a8:	d058      	beq.n	800265c <HAL_RTC_Init+0xf4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	22ca      	movs	r2, #202	@ 0xca
 80025b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2253      	movs	r2, #83	@ 0x53
 80025b8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f882 	bl	80026c4 <RTC_EnterInitMode>
 80025c0:	4603      	mov	r3, r0
 80025c2:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d12c      	bne.n	8002624 <HAL_RTC_Init+0xbc>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80025d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025dc:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6899      	ldr	r1, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	68d2      	ldr	r2, [r2, #12]
 8002604:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6919      	ldr	r1, [r3, #16]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	041a      	lsls	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f88a 	bl	8002734 <RTC_ExitInitMode>
 8002620:	4603      	mov	r3, r0
 8002622:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d113      	bne.n	8002652 <HAL_RTC_Init+0xea>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0203 	bic.w	r2, r2, #3
 8002638:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69da      	ldr	r2, [r3, #28]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	22ff      	movs	r2, #255	@ 0xff
 8002658:	625a      	str	r2, [r3, #36]	@ 0x24
 800265a:	e001      	b.n	8002660 <HAL_RTC_Init+0xf8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d103      	bne.n	800266e <HAL_RTC_Init+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800266e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0d      	ldr	r2, [pc, #52]	@ (80026c0 <HAL_RTC_WaitForSynchro+0x48>)
 800268a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800268c:	f7fe f812 	bl	80006b4 <HAL_GetTick>
 8002690:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002692:	e009      	b.n	80026a8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002694:	f7fe f80e 	bl	80006b4 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026a2:	d901      	bls.n	80026a8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e007      	b.n	80026b8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f003 0320 	and.w	r3, r3, #32
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0ee      	beq.n	8002694 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	0001ff5f 	.word	0x0001ff5f

080026c4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d123      	bne.n	800272a <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80026f0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026f2:	f7fd ffdf 	bl	80006b4 <HAL_GetTick>
 80026f6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80026f8:	e00d      	b.n	8002716 <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80026fa:	f7fd ffdb 	bl	80006b4 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002708:	d905      	bls.n	8002716 <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2204      	movs	r2, #4
 800270e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002720:	2b00      	cmp	r3, #0
 8002722:	d102      	bne.n	800272a <RTC_EnterInitMode+0x66>
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d1e7      	bne.n	80026fa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800272a:	7bfb      	ldrb	r3, [r7, #15]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800274e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10b      	bne.n	8002776 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff ff8a 	bl	8002678 <HAL_RTC_WaitForSynchro>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2204      	movs	r2, #4
 800276e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002776:	7bfb      	ldrb	r3, [r7, #15]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_RTCEx_SetWakeUpTimer+0x1e>
 800279a:	2302      	movs	r3, #2
 800279c:	e092      	b.n	80028c4 <HAL_RTCEx_SetWakeUpTimer+0x144>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2202      	movs	r2, #2
 80027aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	22ca      	movs	r2, #202	@ 0xca
 80027b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2253      	movs	r2, #83	@ 0x53
 80027bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d020      	beq.n	800280e <HAL_RTCEx_SetWakeUpTimer+0x8e>
  {
    tickstart = HAL_GetTick();
 80027cc:	f7fd ff72 	bl	80006b4 <HAL_GetTick>
 80027d0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 80027d2:	e015      	b.n	8002800 <HAL_RTCEx_SetWakeUpTimer+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80027d4:	f7fd ff6e 	bl	80006b4 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027e2:	d90d      	bls.n	8002800 <HAL_RTCEx_SetWakeUpTimer+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	22ff      	movs	r2, #255	@ 0xff
 80027ea:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2203      	movs	r2, #3
 80027f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e061      	b.n	80028c4 <HAL_RTCEx_SetWakeUpTimer+0x144>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1e2      	bne.n	80027d4 <HAL_RTCEx_SetWakeUpTimer+0x54>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800281c:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800282e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002830:	f7fd ff40 	bl	80006b4 <HAL_GetTick>
 8002834:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002836:	e015      	b.n	8002864 <HAL_RTCEx_SetWakeUpTimer+0xe4>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002838:	f7fd ff3c 	bl	80006b4 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002846:	d90d      	bls.n	8002864 <HAL_RTCEx_SetWakeUpTimer+0xe4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	22ff      	movs	r2, #255	@ 0xff
 800284e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2203      	movs	r2, #3
 8002854:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e02f      	b.n	80028c4 <HAL_RTCEx_SetWakeUpTimer+0x144>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0e2      	beq.n	8002838 <HAL_RTCEx_SetWakeUpTimer+0xb8>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0207 	bic.w	r2, r2, #7
 8002880:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6899      	ldr	r1, [r3, #8]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	430a      	orrs	r2, r1
 8002890:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028a8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	22ff      	movs	r2, #255	@ 0xff
 80028b0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <memset>:
 80028cc:	4402      	add	r2, r0
 80028ce:	4603      	mov	r3, r0
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d100      	bne.n	80028d6 <memset+0xa>
 80028d4:	4770      	bx	lr
 80028d6:	f803 1b01 	strb.w	r1, [r3], #1
 80028da:	e7f9      	b.n	80028d0 <memset+0x4>

080028dc <__libc_init_array>:
 80028dc:	b570      	push	{r4, r5, r6, lr}
 80028de:	4d0d      	ldr	r5, [pc, #52]	@ (8002914 <__libc_init_array+0x38>)
 80028e0:	4c0d      	ldr	r4, [pc, #52]	@ (8002918 <__libc_init_array+0x3c>)
 80028e2:	1b64      	subs	r4, r4, r5
 80028e4:	10a4      	asrs	r4, r4, #2
 80028e6:	2600      	movs	r6, #0
 80028e8:	42a6      	cmp	r6, r4
 80028ea:	d109      	bne.n	8002900 <__libc_init_array+0x24>
 80028ec:	4d0b      	ldr	r5, [pc, #44]	@ (800291c <__libc_init_array+0x40>)
 80028ee:	4c0c      	ldr	r4, [pc, #48]	@ (8002920 <__libc_init_array+0x44>)
 80028f0:	f000 f818 	bl	8002924 <_init>
 80028f4:	1b64      	subs	r4, r4, r5
 80028f6:	10a4      	asrs	r4, r4, #2
 80028f8:	2600      	movs	r6, #0
 80028fa:	42a6      	cmp	r6, r4
 80028fc:	d105      	bne.n	800290a <__libc_init_array+0x2e>
 80028fe:	bd70      	pop	{r4, r5, r6, pc}
 8002900:	f855 3b04 	ldr.w	r3, [r5], #4
 8002904:	4798      	blx	r3
 8002906:	3601      	adds	r6, #1
 8002908:	e7ee      	b.n	80028e8 <__libc_init_array+0xc>
 800290a:	f855 3b04 	ldr.w	r3, [r5], #4
 800290e:	4798      	blx	r3
 8002910:	3601      	adds	r6, #1
 8002912:	e7f2      	b.n	80028fa <__libc_init_array+0x1e>
 8002914:	080029e8 	.word	0x080029e8
 8002918:	080029e8 	.word	0x080029e8
 800291c:	080029e8 	.word	0x080029e8
 8002920:	080029ec 	.word	0x080029ec

08002924 <_init>:
 8002924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002926:	bf00      	nop
 8002928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800292a:	bc08      	pop	{r3}
 800292c:	469e      	mov	lr, r3
 800292e:	4770      	bx	lr

08002930 <_fini>:
 8002930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002932:	bf00      	nop
 8002934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002936:	bc08      	pop	{r3}
 8002938:	469e      	mov	lr, r3
 800293a:	4770      	bx	lr
