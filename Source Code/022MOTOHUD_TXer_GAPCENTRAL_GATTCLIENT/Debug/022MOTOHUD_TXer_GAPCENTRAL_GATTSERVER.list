
022MOTOHUD_TXer_GAPCENTRAL_GATTSERVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044f4  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004630  08004630  00005630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080046dc  080046dc  000056dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080046e0  080046e0  000056e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000014  20000008  080046e4  00006008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001cc  2000001c  080046f8  0000601c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001e8  080046f8  000061e8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001068a  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002baf  00000000  00000000  000166d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001578  00000000  00000000  00019288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001033  00000000  00000000  0001a800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000227bc  00000000  00000000  0001b833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00012695  00000000  00000000  0003dfef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000dacfe  00000000  00000000  00050684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0012b382  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005950  00000000  00000000  0012b3c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000088  00000000  00000000  00130d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000001c 	.word	0x2000001c
 8000158:	00000000 	.word	0x00000000
 800015c:	08004618 	.word	0x08004618

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000020 	.word	0x20000020
 8000178:	08004618 	.word	0x08004618

0800017c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000188:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000198:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr

080001ae <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001ae:	b480      	push	{r7}
 80001b0:	b085      	sub	sp, #20
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80001ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	4313      	orrs	r3, r2
 80001c4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80001ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	4013      	ands	r3, r2
 80001d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001d2:	68fb      	ldr	r3, [r7, #12]
}
 80001d4:	bf00      	nop
 80001d6:	3714      	adds	r7, #20
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr

080001e0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001e4:	f000 ff4a 	bl	800107c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001e8:	f000 f81a 	bl	8000220 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80001ec:	f000 f87e 	bl	80002ec <PeriphCommonClock_Config>

	/* IPCC initialisation */
	MX_IPCC_Init();
 80001f0:	f000 f89a 	bl	8000328 <MX_IPCC_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001f4:	f000 f93e 	bl	8000474 <MX_GPIO_Init>
	MX_DMA_Init();
 80001f8:	f000 f91a 	bl	8000430 <MX_DMA_Init>
	MX_RTC_Init();
 80001fc:	f000 f8a8 	bl	8000350 <MX_RTC_Init>
	MX_SPI1_Init();
 8000200:	f000 f8d8 	bl	80003b4 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	MCP2515_Init2();
 8000204:	f000 f974 	bl	80004f0 <MCP2515_Init2>

	MCP2515_CAN_Transmit_Single_TxBuffer(SEND_TxBUFFER1, 0x7E8, DataBuffer, 5);
 8000208:	2305      	movs	r3, #5
 800020a:	4a04      	ldr	r2, [pc, #16]	@ (800021c <main+0x3c>)
 800020c:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 8000210:	2041      	movs	r0, #65	@ 0x41
 8000212:	f000 fdbb 	bl	8000d8c <MCP2515_CAN_Transmit_Single_TxBuffer>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000216:	bf00      	nop
 8000218:	e7fd      	b.n	8000216 <main+0x36>
 800021a:	bf00      	nop
 800021c:	20000008 	.word	0x20000008

08000220 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b09a      	sub	sp, #104	@ 0x68
 8000224:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0320 	add.w	r3, r7, #32
 800022a:	2248      	movs	r2, #72	@ 0x48
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f004 f9b8 	bl	80045a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	611a      	str	r2, [r3, #16]
 8000242:	615a      	str	r2, [r3, #20]
 8000244:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000246:	4b28      	ldr	r3, [pc, #160]	@ (80002e8 <SystemClock_Config+0xc8>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800024e:	4a26      	ldr	r2, [pc, #152]	@ (80002e8 <SystemClock_Config+0xc8>)
 8000250:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000254:	6013      	str	r3, [r2, #0]
 8000256:	4b24      	ldr	r3, [pc, #144]	@ (80002e8 <SystemClock_Config+0xc8>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800025e:	603b      	str	r3, [r7, #0]
 8000260:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8000262:	230b      	movs	r3, #11
 8000264:	623b      	str	r3, [r7, #32]
			|RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000266:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800026a:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000270:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000272:	2340      	movs	r3, #64	@ 0x40
 8000274:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000276:	2305      	movs	r3, #5
 8000278:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027a:	2302      	movs	r3, #2
 800027c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027e:	2303      	movs	r3, #3
 8000280:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000282:	2310      	movs	r3, #16
 8000284:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLN = 8;
 8000286:	2308      	movs	r3, #8
 8000288:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800028a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800028e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000290:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000294:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000296:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800029a:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029c:	f107 0320 	add.w	r3, r7, #32
 80002a0:	4618      	mov	r0, r3
 80002a2:	f002 f825 	bl	80022f0 <HAL_RCC_OscConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x90>
	{
		Error_Handler();
 80002ac:	f000 f96a 	bl	8000584 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80002b0:	236f      	movs	r3, #111	@ 0x6f
 80002b2:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b4:	2303      	movs	r3, #3
 80002b6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80002c4:	2380      	movs	r3, #128	@ 0x80
 80002c6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2103      	movs	r1, #3
 80002d0:	4618      	mov	r0, r3
 80002d2:	f002 fb81 	bl	80029d8 <HAL_RCC_ClockConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 80002dc:	f000 f952 	bl	8000584 <Error_Handler>
	}
}
 80002e0:	bf00      	nop
 80002e2:	3768      	adds	r7, #104	@ 0x68
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	58000400 	.word	0x58000400

080002ec <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b094      	sub	sp, #80	@ 0x50
 80002f0:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80002f2:	463b      	mov	r3, r7
 80002f4:	2250      	movs	r2, #80	@ 0x50
 80002f6:	2100      	movs	r1, #0
 80002f8:	4618      	mov	r0, r3
 80002fa:	f004 f953 	bl	80045a4 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80002fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000302:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8000304:	2302      	movs	r3, #2
 8000306:	64bb      	str	r3, [r7, #72]	@ 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000308:	2310      	movs	r3, #16
 800030a:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800030c:	463b      	mov	r3, r7
 800030e:	4618      	mov	r0, r3
 8000310:	f002 ff73 	bl	80031fa <HAL_RCCEx_PeriphCLKConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <PeriphCommonClock_Config+0x32>
	{
		Error_Handler();
 800031a:	f000 f933 	bl	8000584 <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 800031e:	bf00      	nop
 8000320:	3750      	adds	r7, #80	@ 0x50
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <MX_IPCC_Init>:
 * @brief IPCC Initialization Function
 * @param None
 * @retval None
 */
static void MX_IPCC_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	/* USER CODE END IPCC_Init 0 */

	/* USER CODE BEGIN IPCC_Init 1 */

	/* USER CODE END IPCC_Init 1 */
	hipcc.Instance = IPCC;
 800032c:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <MX_IPCC_Init+0x20>)
 800032e:	4a07      	ldr	r2, [pc, #28]	@ (800034c <MX_IPCC_Init+0x24>)
 8000330:	601a      	str	r2, [r3, #0]
	if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8000332:	4805      	ldr	r0, [pc, #20]	@ (8000348 <MX_IPCC_Init+0x20>)
 8000334:	f001 fbda 	bl	8001aec <HAL_IPCC_Init>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_IPCC_Init+0x1a>
	{
		Error_Handler();
 800033e:	f000 f921 	bl	8000584 <Error_Handler>
	}
	/* USER CODE BEGIN IPCC_Init 2 */

	/* USER CODE END IPCC_Init 2 */

}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000038 	.word	0x20000038
 800034c:	58000c00 	.word	0x58000c00

08000350 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000354:	4b15      	ldr	r3, [pc, #84]	@ (80003ac <MX_RTC_Init+0x5c>)
 8000356:	4a16      	ldr	r2, [pc, #88]	@ (80003b0 <MX_RTC_Init+0x60>)
 8000358:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800035a:	4b14      	ldr	r3, [pc, #80]	@ (80003ac <MX_RTC_Init+0x5c>)
 800035c:	2200      	movs	r2, #0
 800035e:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000360:	4b12      	ldr	r3, [pc, #72]	@ (80003ac <MX_RTC_Init+0x5c>)
 8000362:	227f      	movs	r2, #127	@ 0x7f
 8000364:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8000366:	4b11      	ldr	r3, [pc, #68]	@ (80003ac <MX_RTC_Init+0x5c>)
 8000368:	22ff      	movs	r2, #255	@ 0xff
 800036a:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800036c:	4b0f      	ldr	r3, [pc, #60]	@ (80003ac <MX_RTC_Init+0x5c>)
 800036e:	2200      	movs	r2, #0
 8000370:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000372:	4b0e      	ldr	r3, [pc, #56]	@ (80003ac <MX_RTC_Init+0x5c>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000378:	4b0c      	ldr	r3, [pc, #48]	@ (80003ac <MX_RTC_Init+0x5c>)
 800037a:	2200      	movs	r2, #0
 800037c:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800037e:	4b0b      	ldr	r3, [pc, #44]	@ (80003ac <MX_RTC_Init+0x5c>)
 8000380:	2200      	movs	r2, #0
 8000382:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000384:	4809      	ldr	r0, [pc, #36]	@ (80003ac <MX_RTC_Init+0x5c>)
 8000386:	f003 f9bf 	bl	8003708 <HAL_RTC_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_RTC_Init+0x44>
	{
		Error_Handler();
 8000390:	f000 f8f8 	bl	8000584 <Error_Handler>
	}

	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000394:	2200      	movs	r2, #0
 8000396:	2100      	movs	r1, #0
 8000398:	4804      	ldr	r0, [pc, #16]	@ (80003ac <MX_RTC_Init+0x5c>)
 800039a:	f003 fac1 	bl	8003920 <HAL_RTCEx_SetWakeUpTimer>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_RTC_Init+0x58>
	{
		Error_Handler();
 80003a4:	f000 f8ee 	bl	8000584 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000074 	.word	0x20000074
 80003b0:	40002800 	.word	0x40002800

080003b4 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80003b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000428 <MX_SPI1_Init+0x74>)
 80003ba:	4a1c      	ldr	r2, [pc, #112]	@ (800042c <MX_SPI1_Init+0x78>)
 80003bc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80003be:	4b1a      	ldr	r3, [pc, #104]	@ (8000428 <MX_SPI1_Init+0x74>)
 80003c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80003c4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003c6:	4b18      	ldr	r3, [pc, #96]	@ (8000428 <MX_SPI1_Init+0x74>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003cc:	4b16      	ldr	r3, [pc, #88]	@ (8000428 <MX_SPI1_Init+0x74>)
 80003ce:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80003d2:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80003d4:	4b14      	ldr	r3, [pc, #80]	@ (8000428 <MX_SPI1_Init+0x74>)
 80003d6:	2202      	movs	r2, #2
 80003d8:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80003da:	4b13      	ldr	r3, [pc, #76]	@ (8000428 <MX_SPI1_Init+0x74>)
 80003dc:	2201      	movs	r2, #1
 80003de:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80003e0:	4b11      	ldr	r3, [pc, #68]	@ (8000428 <MX_SPI1_Init+0x74>)
 80003e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003e6:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80003e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000428 <MX_SPI1_Init+0x74>)
 80003ea:	2218      	movs	r2, #24
 80003ec:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000428 <MX_SPI1_Init+0x74>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000428 <MX_SPI1_Init+0x74>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000428 <MX_SPI1_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000400:	4b09      	ldr	r3, [pc, #36]	@ (8000428 <MX_SPI1_Init+0x74>)
 8000402:	2207      	movs	r2, #7
 8000404:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000406:	4b08      	ldr	r3, [pc, #32]	@ (8000428 <MX_SPI1_Init+0x74>)
 8000408:	2200      	movs	r2, #0
 800040a:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800040c:	4b06      	ldr	r3, [pc, #24]	@ (8000428 <MX_SPI1_Init+0x74>)
 800040e:	2200      	movs	r2, #0
 8000410:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000412:	4805      	ldr	r0, [pc, #20]	@ (8000428 <MX_SPI1_Init+0x74>)
 8000414:	f003 fb2a 	bl	8003a6c <HAL_SPI_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 800041e:	f000 f8b1 	bl	8000584 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	20000098 	.word	0x20000098
 800042c:	40013000 	.word	0x40013000

08000430 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000434:	2004      	movs	r0, #4
 8000436:	f7ff fea1 	bl	800017c <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_DMA1_CLK_ENABLE();
 800043a:	2001      	movs	r0, #1
 800043c:	f7ff fe9e 	bl	800017c <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000440:	2200      	movs	r2, #0
 8000442:	2100      	movs	r1, #0
 8000444:	200b      	movs	r0, #11
 8000446:	f000 ff9e 	bl	8001386 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800044a:	200b      	movs	r0, #11
 800044c:	f000 ffb5 	bl	80013ba <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000450:	2200      	movs	r2, #0
 8000452:	2100      	movs	r1, #0
 8000454:	200c      	movs	r0, #12
 8000456:	f000 ff96 	bl	8001386 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800045a:	200c      	movs	r0, #12
 800045c:	f000 ffad 	bl	80013ba <HAL_NVIC_EnableIRQ>
	/* DMAMUX1_OVR_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8000460:	2200      	movs	r2, #0
 8000462:	2100      	movs	r1, #0
 8000464:	203e      	movs	r0, #62	@ 0x3e
 8000466:	f000 ff8e 	bl	8001386 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 800046a:	203e      	movs	r0, #62	@ 0x3e
 800046c:	f000 ffa5 	bl	80013ba <HAL_NVIC_EnableIRQ>

}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}

08000474 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]
 8000484:	60da      	str	r2, [r3, #12]
 8000486:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000488:	2008      	movs	r0, #8
 800048a:	f7ff fe90 	bl	80001ae <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800048e:	2001      	movs	r0, #1
 8000490:	f7ff fe8d 	bl	80001ae <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000494:	2201      	movs	r2, #1
 8000496:	2110      	movs	r1, #16
 8000498:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800049c:	f001 fad4 	bl	8001a48 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CAN_INT_Pin */
	GPIO_InitStruct.Pin = CAN_INT_Pin;
 80004a0:	2301      	movs	r3, #1
 80004a2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004a4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80004a8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004aa:	2301      	movs	r3, #1
 80004ac:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	4619      	mov	r1, r3
 80004b2:	480e      	ldr	r0, [pc, #56]	@ (80004ec <MX_GPIO_Init+0x78>)
 80004b4:	f001 f958 	bl	8001768 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004b8:	2310      	movs	r3, #16
 80004ba:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004bc:	2301      	movs	r3, #1
 80004be:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c4:	2302      	movs	r3, #2
 80004c6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	4619      	mov	r1, r3
 80004cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004d0:	f001 f94a 	bl	8001768 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2100      	movs	r1, #0
 80004d8:	2006      	movs	r0, #6
 80004da:	f000 ff54 	bl	8001386 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80004de:	2006      	movs	r0, #6
 80004e0:	f000 ff6b 	bl	80013ba <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80004e4:	bf00      	nop
 80004e6:	3718      	adds	r7, #24
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	48000c00 	.word	0x48000c00

080004f0 <MCP2515_Init2>:

/* USER CODE BEGIN 4 */
static void MCP2515_Init2(void){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	MCP2515_Handle.RxBUFFERn_FILT_CFG = RxBUFFER0_FILT_CFG_MASK | RxBUFFER1_FILT_CFG_MASK;
 80004f4:	4b20      	ldr	r3, [pc, #128]	@ (8000578 <MCP2515_Init2+0x88>)
 80004f6:	2203      	movs	r2, #3
 80004f8:	701a      	strb	r2, [r3, #0]

	MCP2515_Handle.RxBuffer0_FILT.RxBuffer0_AcceptMask = 0x7F8;	//RxBuffer0 Mask
 80004fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000578 <MCP2515_Init2+0x88>)
 80004fc:	f44f 62ff 	mov.w	r2, #2040	@ 0x7f8
 8000500:	80da      	strh	r2, [r3, #6]
	MCP2515_Handle.RxBuffer0_FILT.RxBuffer0_Filt[0] = 0x7E8; 	//Filter 0
 8000502:	4b1d      	ldr	r3, [pc, #116]	@ (8000578 <MCP2515_Init2+0x88>)
 8000504:	f44f 62fd 	mov.w	r2, #2024	@ 0x7e8
 8000508:	805a      	strh	r2, [r3, #2]
	MCP2515_Handle.RxBuffer0_FILT.RxBuffer0_Filt[1] = 0x7EF; 	//Filter 1
 800050a:	4b1b      	ldr	r3, [pc, #108]	@ (8000578 <MCP2515_Init2+0x88>)
 800050c:	f240 72ef 	movw	r2, #2031	@ 0x7ef
 8000510:	809a      	strh	r2, [r3, #4]

	MCP2515_Handle.RxBuffer1_FILT.RxBuffer1_AcceptMask = 0x7F8;	//RxBuffer1 Mask
 8000512:	4b19      	ldr	r3, [pc, #100]	@ (8000578 <MCP2515_Init2+0x88>)
 8000514:	f44f 62ff 	mov.w	r2, #2040	@ 0x7f8
 8000518:	821a      	strh	r2, [r3, #16]
	MCP2515_Handle.RxBuffer1_FILT.RxBuffer1_Filt[0] = 0x7E8; 	//Filter 2
 800051a:	4b17      	ldr	r3, [pc, #92]	@ (8000578 <MCP2515_Init2+0x88>)
 800051c:	f44f 62fd 	mov.w	r2, #2024	@ 0x7e8
 8000520:	811a      	strh	r2, [r3, #8]
	MCP2515_Handle.RxBuffer1_FILT.RxBuffer1_Filt[1] = 0x7E8; 	//Filter 3
 8000522:	4b15      	ldr	r3, [pc, #84]	@ (8000578 <MCP2515_Init2+0x88>)
 8000524:	f44f 62fd 	mov.w	r2, #2024	@ 0x7e8
 8000528:	815a      	strh	r2, [r3, #10]
	MCP2515_Handle.RxBuffer1_FILT.RxBuffer1_Filt[2] = 0x7EF; 	//Filter 4
 800052a:	4b13      	ldr	r3, [pc, #76]	@ (8000578 <MCP2515_Init2+0x88>)
 800052c:	f240 72ef 	movw	r2, #2031	@ 0x7ef
 8000530:	819a      	strh	r2, [r3, #12]
	MCP2515_Handle.RxBuffer1_FILT.RxBuffer1_Filt[3] = 0x7EF; 	//Filter 5
 8000532:	4b11      	ldr	r3, [pc, #68]	@ (8000578 <MCP2515_Init2+0x88>)
 8000534:	f240 72ef 	movw	r2, #2031	@ 0x7ef
 8000538:	81da      	strh	r2, [r3, #14]

	MCP2515_Handle.CAN_Baud_PreScaler = 0;
 800053a:	4b0f      	ldr	r3, [pc, #60]	@ (8000578 <MCP2515_Init2+0x88>)
 800053c:	2200      	movs	r2, #0
 800053e:	749a      	strb	r2, [r3, #18]
	MCP2515_Handle.CAN_Speed_Kbps = CAN_SPEED_500Kbps;
 8000540:	4b0d      	ldr	r3, [pc, #52]	@ (8000578 <MCP2515_Init2+0x88>)
 8000542:	4a0e      	ldr	r2, [pc, #56]	@ (800057c <MCP2515_Init2+0x8c>)
 8000544:	619a      	str	r2, [r3, #24]
	MCP2515_Handle.MCP2515_Osc = 8000000;
 8000546:	4b0c      	ldr	r3, [pc, #48]	@ (8000578 <MCP2515_Init2+0x88>)
 8000548:	4a0d      	ldr	r2, [pc, #52]	@ (8000580 <MCP2515_Init2+0x90>)
 800054a:	61da      	str	r2, [r3, #28]
	MCP2515_Handle.PH1_Seg_TQ_Length = PHASEn_SEG_LEN_3TQ;
 800054c:	4b0a      	ldr	r3, [pc, #40]	@ (8000578 <MCP2515_Init2+0x88>)
 800054e:	2202      	movs	r2, #2
 8000550:	751a      	strb	r2, [r3, #20]
	MCP2515_Handle.PH2_Seg_TQ_Length = PHASEn_SEG_LEN_3TQ;
 8000552:	4b09      	ldr	r3, [pc, #36]	@ (8000578 <MCP2515_Init2+0x88>)
 8000554:	2202      	movs	r2, #2
 8000556:	755a      	strb	r2, [r3, #21]
	MCP2515_Handle.ProgDelay_TQ_Length = PROG_DELAY_SEG_LEN_1TQ;
 8000558:	4b07      	ldr	r3, [pc, #28]	@ (8000578 <MCP2515_Init2+0x88>)
 800055a:	2200      	movs	r2, #0
 800055c:	74da      	strb	r2, [r3, #19]
	MCP2515_Handle.SJW_TQ_Length = SJW_LEN_1TQ;
 800055e:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <MCP2515_Init2+0x88>)
 8000560:	2200      	movs	r2, #0
 8000562:	759a      	strb	r2, [r3, #22]

	MCP2515_Handle.INT_Enable_Mask = RxBUFFER0_FULL_IE | RxBUFFER1_FULL_IE;
 8000564:	4b04      	ldr	r3, [pc, #16]	@ (8000578 <MCP2515_Init2+0x88>)
 8000566:	2203      	movs	r2, #3
 8000568:	f883 2020 	strb.w	r2, [r3, #32]

	MCP2515_Init(&MCP2515_Handle);
 800056c:	4802      	ldr	r0, [pc, #8]	@ (8000578 <MCP2515_Init2+0x88>)
 800056e:	f000 fb59 	bl	8000c24 <MCP2515_Init>
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	200001bc 	.word	0x200001bc
 800057c:	0007a120 	.word	0x0007a120
 8000580:	007a1200 	.word	0x007a1200

08000584 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000588:	b672      	cpsid	i
}
 800058a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800058c:	bf00      	nop
 800058e:	e7fd      	b.n	800058c <Error_Handler+0x8>

08000590 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800059c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80005a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <LL_AHB2_GRP1_EnableClock>:
{
 80005b2:	b480      	push	{r7}
 80005b4:	b085      	sub	sp, #20
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4313      	orrs	r3, r2
 80005c8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4013      	ands	r3, r2
 80005d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005d6:	68fb      	ldr	r3, [r7, #12]
}
 80005d8:	bf00      	nop
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80005ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80005f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4313      	orrs	r3, r2
 80005fa:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80005fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000600:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4013      	ands	r3, r2
 8000606:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000608:	68fb      	ldr	r3, [r7, #12]
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000616:	b480      	push	{r7}
 8000618:	b085      	sub	sp, #20
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800061e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000622:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000624:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4313      	orrs	r3, r2
 800062c:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800062e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000632:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4013      	ands	r3, r2
 8000638:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800063a:	68fb      	ldr	r3, [r7, #12]
}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000650:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000654:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000656:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4313      	orrs	r3, r2
 800065e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000664:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4013      	ands	r3, r2
 800066a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800066c:	68fb      	ldr	r3, [r7, #12]
}
 800066e:	bf00      	nop
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr

0800067a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800067e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000682:	f7ff ffaf 	bl	80005e4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	202e      	movs	r0, #46	@ 0x2e
 800068c:	f000 fe7b 	bl	8001386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8000690:	202e      	movs	r0, #46	@ 0x2e
 8000692:	f000 fe92 	bl	80013ba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <HAL_IPCC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hipcc: IPCC handle pointer
  * @retval None
  */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a05      	ldr	r2, [pc, #20]	@ (80006c0 <HAL_IPCC_MspInit+0x24>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d103      	bne.n	80006b6 <HAL_IPCC_MspInit+0x1a>
  {
    /* USER CODE BEGIN IPCC_MspInit 0 */

    /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80006ae:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80006b2:	f7ff ff97 	bl	80005e4 <LL_AHB3_GRP1_EnableClock>

    /* USER CODE END IPCC_MspInit 1 */

  }

}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	58000c00 	.word	0x58000c00

080006c4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b096      	sub	sp, #88	@ 0x58
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2250      	movs	r2, #80	@ 0x50
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f003 ff65 	bl	80045a4 <memset>
  if(hrtc->Instance==RTC)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a0f      	ldr	r2, [pc, #60]	@ (800071c <HAL_RTC_MspInit+0x58>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d117      	bne.n	8000714 <HAL_RTC_MspInit+0x50>

    /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 80006e4:	f001 fa88 	bl	8001bf8 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80006e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006ec:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80006ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006f2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fd7e 	bl	80031fa <HAL_RCCEx_PeriphCLKConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8000704:	f7ff ff3e 	bl	8000584 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000708:	f7ff ff42 	bl	8000590 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800070c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000710:	f7ff ff81 	bl	8000616 <LL_APB1_GRP1_EnableClock>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000714:	bf00      	nop
 8000716:	3758      	adds	r7, #88	@ 0x58
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40002800 	.word	0x40002800

08000720 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a39      	ldr	r2, [pc, #228]	@ (8000824 <HAL_SPI_MspInit+0x104>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d16b      	bne.n	800081a <HAL_SPI_MspInit+0xfa>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000742:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000746:	f7ff ff7f 	bl	8000648 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	2001      	movs	r0, #1
 800074c:	f7ff ff31 	bl	80005b2 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8000750:	23e0      	movs	r3, #224	@ 0xe0
 8000752:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000760:	2305      	movs	r3, #5
 8000762:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	4619      	mov	r1, r3
 800076a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800076e:	f000 fffb 	bl	8001768 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8000772:	4b2d      	ldr	r3, [pc, #180]	@ (8000828 <HAL_SPI_MspInit+0x108>)
 8000774:	4a2d      	ldr	r2, [pc, #180]	@ (800082c <HAL_SPI_MspInit+0x10c>)
 8000776:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000778:	4b2b      	ldr	r3, [pc, #172]	@ (8000828 <HAL_SPI_MspInit+0x108>)
 800077a:	2206      	movs	r2, #6
 800077c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800077e:	4b2a      	ldr	r3, [pc, #168]	@ (8000828 <HAL_SPI_MspInit+0x108>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000784:	4b28      	ldr	r3, [pc, #160]	@ (8000828 <HAL_SPI_MspInit+0x108>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800078a:	4b27      	ldr	r3, [pc, #156]	@ (8000828 <HAL_SPI_MspInit+0x108>)
 800078c:	2280      	movs	r2, #128	@ 0x80
 800078e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000790:	4b25      	ldr	r3, [pc, #148]	@ (8000828 <HAL_SPI_MspInit+0x108>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000796:	4b24      	ldr	r3, [pc, #144]	@ (8000828 <HAL_SPI_MspInit+0x108>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800079c:	4b22      	ldr	r3, [pc, #136]	@ (8000828 <HAL_SPI_MspInit+0x108>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80007a2:	4b21      	ldr	r3, [pc, #132]	@ (8000828 <HAL_SPI_MspInit+0x108>)
 80007a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80007a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80007aa:	481f      	ldr	r0, [pc, #124]	@ (8000828 <HAL_SPI_MspInit+0x108>)
 80007ac:	f000 fe20 	bl	80013f0 <HAL_DMA_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <HAL_SPI_MspInit+0x9a>
    {
      Error_Handler();
 80007b6:	f7ff fee5 	bl	8000584 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a1a      	ldr	r2, [pc, #104]	@ (8000828 <HAL_SPI_MspInit+0x108>)
 80007be:	659a      	str	r2, [r3, #88]	@ 0x58
 80007c0:	4a19      	ldr	r2, [pc, #100]	@ (8000828 <HAL_SPI_MspInit+0x108>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <HAL_SPI_MspInit+0x110>)
 80007c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000834 <HAL_SPI_MspInit+0x114>)
 80007ca:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80007cc:	4b18      	ldr	r3, [pc, #96]	@ (8000830 <HAL_SPI_MspInit+0x110>)
 80007ce:	2207      	movs	r2, #7
 80007d0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007d2:	4b17      	ldr	r3, [pc, #92]	@ (8000830 <HAL_SPI_MspInit+0x110>)
 80007d4:	2210      	movs	r2, #16
 80007d6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007d8:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <HAL_SPI_MspInit+0x110>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007de:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <HAL_SPI_MspInit+0x110>)
 80007e0:	2280      	movs	r2, #128	@ 0x80
 80007e2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007e4:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <HAL_SPI_MspInit+0x110>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <HAL_SPI_MspInit+0x110>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <HAL_SPI_MspInit+0x110>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <HAL_SPI_MspInit+0x110>)
 80007f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80007fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80007fe:	480c      	ldr	r0, [pc, #48]	@ (8000830 <HAL_SPI_MspInit+0x110>)
 8000800:	f000 fdf6 	bl	80013f0 <HAL_DMA_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <HAL_SPI_MspInit+0xee>
    {
      Error_Handler();
 800080a:	f7ff febb 	bl	8000584 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a07      	ldr	r2, [pc, #28]	@ (8000830 <HAL_SPI_MspInit+0x110>)
 8000812:	655a      	str	r2, [r3, #84]	@ 0x54
 8000814:	4a06      	ldr	r2, [pc, #24]	@ (8000830 <HAL_SPI_MspInit+0x110>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6293      	str	r3, [r2, #40]	@ 0x28
    /* USER CODE BEGIN SPI1_MspInit 1 */
    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800081a:	bf00      	nop
 800081c:	3720      	adds	r7, #32
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40013000 	.word	0x40013000
 8000828:	200000fc 	.word	0x200000fc
 800082c:	40020008 	.word	0x40020008
 8000830:	2000015c 	.word	0x2000015c
 8000834:	4002001c 	.word	0x4002001c

08000838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <NMI_Handler+0x4>

08000840 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <HardFault_Handler+0x4>

08000848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <MemManage_Handler+0x4>

08000850 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <BusFault_Handler+0x4>

08000858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <UsageFault_Handler+0x4>

08000860 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088e:	f000 fc4f 	bl	8001130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800089c:	4802      	ldr	r0, [pc, #8]	@ (80008a8 <DMA1_Channel1_IRQHandler+0x10>)
 800089e:	f000 fe4f 	bl	8001540 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000fc 	.word	0x200000fc

080008ac <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80008b0:	4802      	ldr	r0, [pc, #8]	@ (80008bc <DMA1_Channel2_IRQHandler+0x10>)
 80008b2:	f000 fe45 	bl	8001540 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000015c 	.word	0x2000015c

080008c0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80008c4:	f001 f8ee 	bl	8001aa4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}

080008cc <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
	...

080008dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80008e0:	4b24      	ldr	r3, [pc, #144]	@ (8000974 <SystemInit+0x98>)
 80008e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008e6:	4a23      	ldr	r2, [pc, #140]	@ (8000974 <SystemInit+0x98>)
 80008e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80008f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000900:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000904:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000908:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800090a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000914:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <SystemInit+0x9c>)
 8000916:	4013      	ands	r3, r2
 8000918:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800091a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800091e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000922:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000926:	f023 0305 	bic.w	r3, r3, #5
 800092a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800092e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000932:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000936:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800093a:	f023 0301 	bic.w	r3, r3, #1
 800093e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000942:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000946:	4a0d      	ldr	r2, [pc, #52]	@ (800097c <SystemInit+0xa0>)
 8000948:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800094a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800094e:	4a0b      	ldr	r2, [pc, #44]	@ (800097c <SystemInit+0xa0>)
 8000950:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000952:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800095c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000960:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000ed00 	.word	0xe000ed00
 8000978:	faf6fefb 	.word	0xfaf6fefb
 800097c:	22041000 	.word	0x22041000

08000980 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000980:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000982:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000984:	3304      	adds	r3, #4

08000986 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000986:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000988:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800098a:	d3f9      	bcc.n	8000980 <CopyDataInit>
  bx lr
 800098c:	4770      	bx	lr

0800098e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800098e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000990:	3004      	adds	r0, #4

08000992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000992:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000994:	d3fb      	bcc.n	800098e <FillZerobss>
  bx lr
 8000996:	4770      	bx	lr

08000998 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000998:	480c      	ldr	r0, [pc, #48]	@ (80009cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800099a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800099c:	f7ff ff9e 	bl	80008dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80009a0:	480b      	ldr	r0, [pc, #44]	@ (80009d0 <LoopForever+0x6>)
 80009a2:	490c      	ldr	r1, [pc, #48]	@ (80009d4 <LoopForever+0xa>)
 80009a4:	4a0c      	ldr	r2, [pc, #48]	@ (80009d8 <LoopForever+0xe>)
 80009a6:	2300      	movs	r3, #0
 80009a8:	f7ff ffed 	bl	8000986 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80009ac:	480b      	ldr	r0, [pc, #44]	@ (80009dc <LoopForever+0x12>)
 80009ae:	490c      	ldr	r1, [pc, #48]	@ (80009e0 <LoopForever+0x16>)
 80009b0:	4a0c      	ldr	r2, [pc, #48]	@ (80009e4 <LoopForever+0x1a>)
 80009b2:	2300      	movs	r3, #0
 80009b4:	f7ff ffe7 	bl	8000986 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80009b8:	480b      	ldr	r0, [pc, #44]	@ (80009e8 <LoopForever+0x1e>)
 80009ba:	490c      	ldr	r1, [pc, #48]	@ (80009ec <LoopForever+0x22>)
 80009bc:	2300      	movs	r3, #0
 80009be:	f7ff ffe8 	bl	8000992 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009c2:	f003 fdf7 	bl	80045b4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80009c6:	f7ff fc0b 	bl	80001e0 <main>

080009ca <LoopForever>:

LoopForever:
  b LoopForever
 80009ca:	e7fe      	b.n	80009ca <LoopForever>
  ldr   r0, =_estack
 80009cc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80009d0:	20000008 	.word	0x20000008
 80009d4:	2000001c 	.word	0x2000001c
 80009d8:	080046e4 	.word	0x080046e4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80009dc:	20030000 	.word	0x20030000
 80009e0:	20030000 	.word	0x20030000
 80009e4:	080046f8 	.word	0x080046f8
  INIT_BSS _sbss, _ebss
 80009e8:	2000001c 	.word	0x2000001c
 80009ec:	200001e8 	.word	0x200001e8

080009f0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f0:	e7fe      	b.n	80009f0 <ADC1_IRQHandler>
	...

080009f4 <MCP2515_SPI_Transmit>:
 * @brief 	Transmit data to MCP2515 through SPI
 *
 * @param	DataBuffer: Pointer to the data buffer array to be transmitted.
 * @param	DataLength: Number of bytes to transmit.
 */
static void MCP2515_SPI_Transmit(uint8_t *DataBuffer, uint8_t DataLength){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET); //Pull CS low to enable MCP2515
 8000a00:	2200      	movs	r2, #0
 8000a02:	2110      	movs	r1, #16
 8000a04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a08:	f001 f81e 	bl	8001a48 <HAL_GPIO_WritePin>

	//send command through SPI polling mode, DMA for future optimization
	HAL_SPI_Transmit(&hspi1, DataBuffer,DataLength, HAL_MAX_DELAY);
 8000a0c:	78fb      	ldrb	r3, [r7, #3]
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295
 8000a14:	6879      	ldr	r1, [r7, #4]
 8000a16:	4806      	ldr	r0, [pc, #24]	@ (8000a30 <MCP2515_SPI_Transmit+0x3c>)
 8000a18:	f003 f8cb 	bl	8003bb2 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET); //Pull CS high end of transmission
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2110      	movs	r1, #16
 8000a20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a24:	f001 f810 	bl	8001a48 <HAL_GPIO_WritePin>

}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000098 	.word	0x20000098

08000a34 <MCP2515_SPI_TransmitReceive>:
 * @param	TxBuffer: Pointer to the data byte array to be transmitted.
 * @param 	command_byte_length: number of command bytes
 * @param 	RxBuffer: user defined buffer to store received data.
 * @param	rxbuffer_size: size of user define RxBuffer in bytes
 */
static void MCP2515_SPI_TransmitReceive(uint8_t *TxBuffer, uint8_t command_byte_length, uint8_t *RxBuffer, uint8_t rxbuffer_size) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	460b      	mov	r3, r1
 8000a42:	72fb      	strb	r3, [r7, #11]
 8000a44:	4613      	mov	r3, r2
 8000a46:	72bb      	strb	r3, [r7, #10]

	switch (command_byte_length) {
 8000a48:	7afb      	ldrb	r3, [r7, #11]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d002      	beq.n	8000a54 <MCP2515_SPI_TransmitReceive+0x20>
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d020      	beq.n	8000a94 <MCP2515_SPI_TransmitReceive+0x60>
		 * TxBuffer[0] & TxBuffer[1] data is trash, ignore
		 *********************************************************************/
		memcpy(RxBuffer, &TxBuffer[2], rxbuffer_size);
		break;
	}
}
 8000a52:	e03f      	b.n	8000ad4 <MCP2515_SPI_TransmitReceive+0xa0>
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET); //Pull CS low to enable MCP2515
 8000a54:	2200      	movs	r2, #0
 8000a56:	2110      	movs	r1, #16
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5c:	f000 fff4 	bl	8001a48 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, TxBuffer, TxBuffer, (rxbuffer_size + 1), HAL_MAX_DELAY);
 8000a60:	7abb      	ldrb	r3, [r7, #10]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	3301      	adds	r3, #1
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6c:	9200      	str	r2, [sp, #0]
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	68f9      	ldr	r1, [r7, #12]
 8000a72:	481a      	ldr	r0, [pc, #104]	@ (8000adc <MCP2515_SPI_TransmitReceive+0xa8>)
 8000a74:	f003 fa13 	bl	8003e9e <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET); //Pull CS high end of transmission
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2110      	movs	r1, #16
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a80:	f000 ffe2 	bl	8001a48 <HAL_GPIO_WritePin>
		memcpy(RxBuffer, &TxBuffer[1], rxbuffer_size);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	3301      	adds	r3, #1
 8000a88:	7aba      	ldrb	r2, [r7, #10]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f003 fdb5 	bl	80045fc <memcpy>
		break;
 8000a92:	e01f      	b.n	8000ad4 <MCP2515_SPI_TransmitReceive+0xa0>
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET); //Pull CS low to enable MCP2515
 8000a94:	2200      	movs	r2, #0
 8000a96:	2110      	movs	r1, #16
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9c:	f000 ffd4 	bl	8001a48 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, TxBuffer, TxBuffer, (rxbuffer_size + 2), HAL_MAX_DELAY);
 8000aa0:	7abb      	ldrb	r3, [r7, #10]
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	3302      	adds	r3, #2
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	9200      	str	r2, [sp, #0]
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	68f9      	ldr	r1, [r7, #12]
 8000ab2:	480a      	ldr	r0, [pc, #40]	@ (8000adc <MCP2515_SPI_TransmitReceive+0xa8>)
 8000ab4:	f003 f9f3 	bl	8003e9e <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET); //Pull CS high end of transmission
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2110      	movs	r1, #16
 8000abc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac0:	f000 ffc2 	bl	8001a48 <HAL_GPIO_WritePin>
		memcpy(RxBuffer, &TxBuffer[2], rxbuffer_size);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	3302      	adds	r3, #2
 8000ac8:	7aba      	ldrb	r2, [r7, #10]
 8000aca:	4619      	mov	r1, r3
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f003 fd95 	bl	80045fc <memcpy>
		break;
 8000ad2:	bf00      	nop
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000098 	.word	0x20000098

08000ae0 <MCP2515_SPI_Reset>:


/***************************************************************************************
 * @brief 	Resets internal registers to the default state. After reset, MCP2515 is in Configuration mode.
 */
void MCP2515_SPI_Reset(void){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
	uint8_t commandByte = SPI_COMMAND_RESET;
 8000ae6:	23c0      	movs	r3, #192	@ 0xc0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	MCP2515_SPI_Transmit(&commandByte, 1);
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	2101      	movs	r1, #1
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff ff80 	bl	80009f4 <MCP2515_SPI_Transmit>
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <MCP2515_SPI_RequestToSend>:
 * @brief 	Sends the contents of one or more transmit buffers onto the CAN bus.
 *
 * @param	TxBuffer: The transmit buffer(s) to send. @RTS_TxBuffer_t
 * TODO: not yet verified if it works
 */
void MCP2515_SPI_RequestToSend(RTS_TxBuffer_t TxBuffer){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]

	//uint8_t TxBuffer_index = TxBuffer;

	MCP2515_SPI_Transmit((uint8_t*)&TxBuffer, 1);
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	2101      	movs	r1, #1
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ff72 	bl	80009f4 <MCP2515_SPI_Transmit>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <MCP2515_SPI_BitModify>:
 * @param	RegisterAddress: The address of the register to modify.
 * 			Register have to be Bit Modify Capable. Ref @BTM_Registers_t
 * @param	maskByte: A mask byte that indicates which bits are to be modified. Ref @BIT_MASK
 * @param	dataByte: A data byte that indicates the values to write to the bits specified by the mask.
 */
void MCP2515_SPI_BitModify(BTM_Registers_t RegisterAddress, uint8_t maskByte, uint8_t dataByte){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
 8000b22:	460b      	mov	r3, r1
 8000b24:	71bb      	strb	r3, [r7, #6]
 8000b26:	4613      	mov	r3, r2
 8000b28:	717b      	strb	r3, [r7, #5]

	uint8_t command_data_byte_buffer[4];

	//construct the SPI data frame, command byte + address byte + mask byte + data byte
	command_data_byte_buffer[0] = SPI_COMMAND_BIT_MODIFY;
 8000b2a:	2305      	movs	r3, #5
 8000b2c:	733b      	strb	r3, [r7, #12]
	command_data_byte_buffer[1] = RegisterAddress;
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	737b      	strb	r3, [r7, #13]
	command_data_byte_buffer[2] = maskByte;
 8000b32:	79bb      	ldrb	r3, [r7, #6]
 8000b34:	73bb      	strb	r3, [r7, #14]
	command_data_byte_buffer[3] = dataByte;
 8000b36:	797b      	ldrb	r3, [r7, #5]
 8000b38:	73fb      	strb	r3, [r7, #15]

	MCP2515_SPI_Transmit(command_data_byte_buffer, 4);
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	2104      	movs	r1, #4
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff57 	bl	80009f4 <MCP2515_SPI_Transmit>
}
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <MCP2515_SPI_WriteRegister>:
 *
 * @param	start_address: The address from which to start writing. Ref @register_address
 * @param	*DataBuffer: Pointer to the data buffer to be written into register.
 * @param	DataLength: Number of bytes to write.
 */
void MCP2515_SPI_WriteRegister(uint8_t start_address, uint8_t *DataBuffer, uint8_t DataLength){
 8000b4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	71bb      	strb	r3, [r7, #6]
 8000b60:	466b      	mov	r3, sp
 8000b62:	461e      	mov	r6, r3

	//create an array to hold command byte, address byte, and data bytes
	uint8_t command_data_byte_buffer[2 + DataLength];
 8000b64:	79bb      	ldrb	r3, [r7, #6]
 8000b66:	1c99      	adds	r1, r3, #2
 8000b68:	1e4b      	subs	r3, r1, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	460a      	mov	r2, r1
 8000b6e:	2300      	movs	r3, #0
 8000b70:	4690      	mov	r8, r2
 8000b72:	4699      	mov	r9, r3
 8000b74:	f04f 0200 	mov.w	r2, #0
 8000b78:	f04f 0300 	mov.w	r3, #0
 8000b7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b88:	460a      	mov	r2, r1
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	4614      	mov	r4, r2
 8000b8e:	461d      	mov	r5, r3
 8000b90:	f04f 0200 	mov.w	r2, #0
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	00eb      	lsls	r3, r5, #3
 8000b9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b9e:	00e2      	lsls	r2, r4, #3
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	3307      	adds	r3, #7
 8000ba4:	08db      	lsrs	r3, r3, #3
 8000ba6:	00db      	lsls	r3, r3, #3
 8000ba8:	ebad 0d03 	sub.w	sp, sp, r3
 8000bac:	466b      	mov	r3, sp
 8000bae:	3300      	adds	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]

	//construct the command & address section of array
	command_data_byte_buffer[0] = SPI_COMMAND_WRITEREGISTER;
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	701a      	strb	r2, [r3, #0]
	command_data_byte_buffer[1] = start_address;
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	79fa      	ldrb	r2, [r7, #7]
 8000bbc:	705a      	strb	r2, [r3, #1]

	//copy contents of data buffer into data section of array
	memcpy(&(command_data_byte_buffer[2]), DataBuffer, DataLength);
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	3302      	adds	r3, #2
 8000bc2:	79ba      	ldrb	r2, [r7, #6]
 8000bc4:	6839      	ldr	r1, [r7, #0]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f003 fd18 	bl	80045fc <memcpy>

	//transmit the whole buffer to SPI
	MCP2515_SPI_Transmit(command_data_byte_buffer, (2 + DataLength));
 8000bcc:	79bb      	ldrb	r3, [r7, #6]
 8000bce:	3302      	adds	r3, #2
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	68b8      	ldr	r0, [r7, #8]
 8000bd6:	f7ff ff0d 	bl	80009f4 <MCP2515_SPI_Transmit>
 8000bda:	46b5      	mov	sp, r6
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000be6 <MCP2515_SPI_Read_SingleRegister>:
 * @param	register_address: address of register to be read. Ref @register_address
 *
 * @NOTE: 	unlike MCP2515_SPI_ReadRegister, which can read multiple register values,
 * 			this function only reads a single register and returns the value as one byte.
 */
uint8_t MCP2515_SPI_Read_SingleRegister(uint8_t start_address){
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b084      	sub	sp, #16
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	4603      	mov	r3, r0
 8000bee:	71fb      	strb	r3, [r7, #7]

	if(start_address > MAX_ADDRESS) return 0x00; //ensure read does not exceed last register address
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	2b7d      	cmp	r3, #125	@ 0x7d
 8000bf4:	d901      	bls.n	8000bfa <MCP2515_SPI_Read_SingleRegister+0x14>
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e00f      	b.n	8000c1a <MCP2515_SPI_Read_SingleRegister+0x34>

	//command byte, address byte & dummy bytes to clock out data from slave
	uint8_t command_data_byte_buffer[3];

	//construct the SPI data frame, command byte + start address byte + dummy byte (for slave data clock out)
	command_data_byte_buffer[0] = SPI_COMMAND_READ;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	733b      	strb	r3, [r7, #12]
	command_data_byte_buffer[1] = start_address;
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	737b      	strb	r3, [r7, #13]
	command_data_byte_buffer[2] = dummy_byte;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73bb      	strb	r3, [r7, #14]

	//transmit the whole buffer to SPI and receive data into RxBuffer
	MCP2515_SPI_TransmitReceive(command_data_byte_buffer, 2, &command_data_byte_buffer[2], 1);
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	1c9a      	adds	r2, r3, #2
 8000c0c:	f107 000c 	add.w	r0, r7, #12
 8000c10:	2301      	movs	r3, #1
 8000c12:	2102      	movs	r1, #2
 8000c14:	f7ff ff0e 	bl	8000a34 <MCP2515_SPI_TransmitReceive>

	return command_data_byte_buffer[2];
 8000c18:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <MCP2515_Init>:
 *
 * @param	*MCP2515_handle: Pointer to MCP2515_CFG_Handle_t which holds the user defined configurations.
 *
 * @NOTE: 	ONLY supports Standard CAN frame format. Does not support Extended CAN Frame for now.
 */
void MCP2515_Init(MCP2515_CFG_Handle_t *MCP2515_handle){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

	//reset MCP2515 and force into CONFIG MODE
	MCP2515_SPI_Reset();
 8000c2c:	f7ff ff58 	bl	8000ae0 <MCP2515_SPI_Reset>

	HAL_Delay(5); //wait for device to settle
 8000c30:	2005      	movs	r0, #5
 8000c32:	f000 faa9 	bl	8001188 <HAL_Delay>

	MCP2515_Filters_Init(MCP2515_handle);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f000 f97c 	bl	8000f34 <MCP2515_Filters_Init>

	//enable interrupts specified by user
	if(MCP2515_handle->INT_Enable_Mask != 0){
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d007      	beq.n	8000c56 <MCP2515_Init+0x32>
		//write into CAN interrupt enable register
		MCP2515_SPI_BitModify(CANINTE_BTM, 0xFF, MCP2515_handle->INT_Enable_Mask);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	21ff      	movs	r1, #255	@ 0xff
 8000c50:	202b      	movs	r0, #43	@ 0x2b
 8000c52:	f7ff ff61 	bl	8000b18 <MCP2515_SPI_BitModify>
	}

	/*********CAN Timing Initialization***************/
	//period for 1 Time Quanta, multiply by 1e9 to up-scale
	uint32_t TQ_period = ( ( 2 * (MCP2515_handle->CAN_Baud_PreScaler + 1) * 1000000000 ) / MCP2515_handle->MCP2515_Osc );
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	7c9b      	ldrb	r3, [r3, #18]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	4a48      	ldr	r2, [pc, #288]	@ (8000d80 <MCP2515_Init+0x15c>)
 8000c5e:	fb02 f303 	mul.w	r3, r2, r3
 8000c62:	461a      	mov	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	69db      	ldr	r3, [r3, #28]
 8000c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6c:	613b      	str	r3, [r7, #16]

	//Period for 1 bit time, multiply by 1e9 to up-scale
	uint32_t Bit_period = (1000000000 / MCP2515_handle->CAN_Speed_Kbps);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	4a44      	ldr	r2, [pc, #272]	@ (8000d84 <MCP2515_Init+0x160>)
 8000c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c78:	60fb      	str	r3, [r7, #12]

	//number of time quanta per bit
	uint8_t  TQ = Bit_period / TQ_period;
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c82:	72fb      	strb	r3, [r7, #11]

	//Time Quanta length per bit should be >= 8 as per MCP2515 specification
	if(TQ >= 8){
 8000c84:	7afb      	ldrb	r3, [r7, #11]
 8000c86:	2b07      	cmp	r3, #7
 8000c88:	d959      	bls.n	8000d3e <MCP2515_Init+0x11a>
		//check if Segments TQ lengthS conform to MCP2515 requirements
		if( (MCP2515_handle->ProgDelay_TQ_Length + MCP2515_handle->PH1_Seg_TQ_Length + 2) < (MCP2515_handle->PH2_Seg_TQ_Length + 1)   ||
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	7cdb      	ldrb	r3, [r3, #19]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	7d1b      	ldrb	r3, [r3, #20]
 8000c94:	4413      	add	r3, r2
 8000c96:	3301      	adds	r3, #1
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	7d52      	ldrb	r2, [r2, #21]
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	db6b      	blt.n	8000d78 <MCP2515_Init+0x154>
			(MCP2515_handle->ProgDelay_TQ_Length + MCP2515_handle->PH1_Seg_TQ_Length + 2) < (MCP2515_handle->ProgDelay_TQ_Length + 1) ||
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	7cdb      	ldrb	r3, [r3, #19]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	7d1b      	ldrb	r3, [r3, #20]
 8000caa:	4413      	add	r3, r2
 8000cac:	3301      	adds	r3, #1
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	7cd2      	ldrb	r2, [r2, #19]
		if( (MCP2515_handle->ProgDelay_TQ_Length + MCP2515_handle->PH1_Seg_TQ_Length + 2) < (MCP2515_handle->PH2_Seg_TQ_Length + 1)   ||
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	db60      	blt.n	8000d78 <MCP2515_Init+0x154>
			(MCP2515_handle->PH2_Seg_TQ_Length + 1) < (MCP2515_handle->SJW_TQ_Length + 1) ||
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	7d5a      	ldrb	r2, [r3, #21]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	7d9b      	ldrb	r3, [r3, #22]
			(MCP2515_handle->ProgDelay_TQ_Length + MCP2515_handle->PH1_Seg_TQ_Length + 2) < (MCP2515_handle->ProgDelay_TQ_Length + 1) ||
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d35a      	bcc.n	8000d78 <MCP2515_Init+0x154>
			(MCP2515_handle->PH2_Seg_TQ_Length + 1) < 2 ) return;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	7d5b      	ldrb	r3, [r3, #21]
			(MCP2515_handle->PH2_Seg_TQ_Length + 1) < (MCP2515_handle->SJW_TQ_Length + 1) ||
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d056      	beq.n	8000d78 <MCP2515_Init+0x154>

		//set BTLMODE for PH2_Seg length to be independent of PH1_Seg and IPT
		MCP2515_SPI_BitModify(CNF2_BTM, CNF2_BTLMODE_MASK, CNF2_BTLMODE_MASK);
 8000cca:	2280      	movs	r2, #128	@ 0x80
 8000ccc:	2180      	movs	r1, #128	@ 0x80
 8000cce:	2029      	movs	r0, #41	@ 0x29
 8000cd0:	f7ff ff22 	bl	8000b18 <MCP2515_SPI_BitModify>

		//calculate byte for CNF1 register
		register_value_temp[0] = ( (MCP2515_handle->SJW_TQ_Length << 6) ) | (MCP2515_handle->CAN_Baud_PreScaler & 0x1F);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	7d9b      	ldrb	r3, [r3, #22]
 8000cd8:	b25b      	sxtb	r3, r3
 8000cda:	019b      	lsls	r3, r3, #6
 8000cdc:	b25a      	sxtb	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	7c9b      	ldrb	r3, [r3, #18]
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	f003 031f 	and.w	r3, r3, #31
 8000ce8:	b25b      	sxtb	r3, r3
 8000cea:	4313      	orrs	r3, r2
 8000cec:	b25b      	sxtb	r3, r3
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	4b25      	ldr	r3, [pc, #148]	@ (8000d88 <MCP2515_Init+0x164>)
 8000cf2:	701a      	strb	r2, [r3, #0]
		//write into CNF1 register
		MCP2515_SPI_BitModify(CNF1_BTM, (CNF1_SJW_20_MASK | CNF1_BRP_50_MASK), register_value_temp[0]);
 8000cf4:	4b24      	ldr	r3, [pc, #144]	@ (8000d88 <MCP2515_Init+0x164>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	21ff      	movs	r1, #255	@ 0xff
 8000cfc:	202a      	movs	r0, #42	@ 0x2a
 8000cfe:	f7ff ff0b 	bl	8000b18 <MCP2515_SPI_BitModify>

		//calculate byte for CNF2 register
		register_value_temp[0] = ( (MCP2515_handle->PH1_Seg_TQ_Length << 3) ) | (MCP2515_handle->ProgDelay_TQ_Length & 0x07);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	7d1b      	ldrb	r3, [r3, #20]
 8000d06:	b25b      	sxtb	r3, r3
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	b25a      	sxtb	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	7cdb      	ldrb	r3, [r3, #19]
 8000d10:	b25b      	sxtb	r3, r3
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	b25b      	sxtb	r3, r3
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	b25b      	sxtb	r3, r3
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d88 <MCP2515_Init+0x164>)
 8000d20:	701a      	strb	r2, [r3, #0]
		//write into CNF2 register
		MCP2515_SPI_BitModify(CNF2_BTM, (CNF2_PHSEG1_53_MASK | CNF2_PRSEG_20_MASK), register_value_temp[0]);
 8000d22:	4b19      	ldr	r3, [pc, #100]	@ (8000d88 <MCP2515_Init+0x164>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	213f      	movs	r1, #63	@ 0x3f
 8000d2a:	2029      	movs	r0, #41	@ 0x29
 8000d2c:	f7ff fef4 	bl	8000b18 <MCP2515_SPI_BitModify>

		//write PHASE2 Segment Length into CNF3 register
		MCP2515_SPI_BitModify(CNF3_BTM, CNF3_PHSEG2_20_MASK,  MCP2515_handle->PH2_Seg_TQ_Length);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	7d5b      	ldrb	r3, [r3, #21]
 8000d34:	461a      	mov	r2, r3
 8000d36:	2107      	movs	r1, #7
 8000d38:	2028      	movs	r0, #40	@ 0x28
 8000d3a:	f7ff feed 	bl	8000b18 <MCP2515_SPI_BitModify>
	 * TxBuffer0 - Highest Priority
	 * TxBuffer1 - Mid Priority
	 * TxBuffer2 - Lowest Priority
	 **********************************************/
	uint8_t prio_bits;
	for(uint8_t i=0; i<3 ;i++){
 8000d3e:	2300      	movs	r3, #0
 8000d40:	75fb      	strb	r3, [r7, #23]
 8000d42:	e010      	b.n	8000d66 <MCP2515_Init+0x142>
		//prio_bits decrement every iteration with TxBuffer0 having the highest priority value 3
		prio_bits = 3 - i;
 8000d44:	7dfb      	ldrb	r3, [r7, #23]
 8000d46:	f1c3 0303 	rsb	r3, r3, #3
 8000d4a:	72bb      	strb	r3, [r7, #10]

		//+16 to TxBuffern CTRL register address every iteration since address gap is 16
		MCP2515_SPI_BitModify((TXB0CTRL_BTM + (i * 16)), TXBnCTRL_TXP_10_MASK, prio_bits);
 8000d4c:	7dfb      	ldrb	r3, [r7, #23]
 8000d4e:	3303      	adds	r3, #3
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	011b      	lsls	r3, r3, #4
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	7aba      	ldrb	r2, [r7, #10]
 8000d58:	2103      	movs	r1, #3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fedc 	bl	8000b18 <MCP2515_SPI_BitModify>
	for(uint8_t i=0; i<3 ;i++){
 8000d60:	7dfb      	ldrb	r3, [r7, #23]
 8000d62:	3301      	adds	r3, #1
 8000d64:	75fb      	strb	r3, [r7, #23]
 8000d66:	7dfb      	ldrb	r3, [r7, #23]
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d9eb      	bls.n	8000d44 <MCP2515_Init+0x120>
	}

	//set to Normal mode after all config is done
	MCP2515_SPI_BitModify(CANCTRL_BTM, CANCTRL_REQOP_75_MASK, NORMAL_MODE);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	21e0      	movs	r1, #224	@ 0xe0
 8000d70:	200f      	movs	r0, #15
 8000d72:	f7ff fed1 	bl	8000b18 <MCP2515_SPI_BitModify>
 8000d76:	e000      	b.n	8000d7a <MCP2515_Init+0x156>
			(MCP2515_handle->PH2_Seg_TQ_Length + 1) < 2 ) return;
 8000d78:	bf00      	nop
}
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	77359400 	.word	0x77359400
 8000d84:	3b9aca00 	.word	0x3b9aca00
 8000d88:	200001e0 	.word	0x200001e0

08000d8c <MCP2515_CAN_Transmit_Single_TxBuffer>:
 * @param	DataLength: length of data to be transmitted in bytes. Make sure to set DataLength <= sizeof(DataBuffer)
 *
 * @NOTE: 	ONLY supports Standard CAN frame format. Does not support Extended CAN Frame for now.
 * TODO: verify if it works
 */
CAN_Tx_Status_t MCP2515_CAN_Transmit_Single_TxBuffer(uint8_t Send_TxBuffern, uint16_t ArbitrationID, uint8_t *DataBuffer, uint8_t DataLength){
 8000d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d90:	b087      	sub	sp, #28
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	603a      	str	r2, [r7, #0]
 8000d96:	461a      	mov	r2, r3
 8000d98:	4603      	mov	r3, r0
 8000d9a:	71fb      	strb	r3, [r7, #7]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	80bb      	strh	r3, [r7, #4]
 8000da0:	4613      	mov	r3, r2
 8000da2:	71bb      	strb	r3, [r7, #6]
 8000da4:	466b      	mov	r3, sp
 8000da6:	461e      	mov	r6, r3

	//bounds check for Data length. Max value is 8
	if(DataLength > 8) DataLength = 8;
 8000da8:	79bb      	ldrb	r3, [r7, #6]
 8000daa:	2b08      	cmp	r3, #8
 8000dac:	d901      	bls.n	8000db2 <MCP2515_CAN_Transmit_Single_TxBuffer+0x26>
 8000dae:	2308      	movs	r3, #8
 8000db0:	71bb      	strb	r3, [r7, #6]
	 * TxBuffer_temp[4]: contains TXBnEID0, set value as 0x00 since its not needed
	 * TxBuffer_temp[5]: contains TXBnEID0 data
	 * TxBuffer_temp[6] to TxBuffer_temp[13]: contains data pay-load, end index depends on data length with max index of 13
	 * TxBuffer_temp[RTS_Index]: contains RTS command byte, selects which TxBuffer is triggered to send
	 */
	uint8_t TxBuffer_temp[7 + DataLength];
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	1dd9      	adds	r1, r3, #7
 8000db6:	1e4b      	subs	r3, r1, #1
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	460a      	mov	r2, r1
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4690      	mov	r8, r2
 8000dc0:	4699      	mov	r9, r3
 8000dc2:	f04f 0200 	mov.w	r2, #0
 8000dc6:	f04f 0300 	mov.w	r3, #0
 8000dca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000dce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000dd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000dd6:	460a      	mov	r2, r1
 8000dd8:	2300      	movs	r3, #0
 8000dda:	4614      	mov	r4, r2
 8000ddc:	461d      	mov	r5, r3
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	f04f 0300 	mov.w	r3, #0
 8000de6:	00eb      	lsls	r3, r5, #3
 8000de8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000dec:	00e2      	lsls	r2, r4, #3
 8000dee:	460b      	mov	r3, r1
 8000df0:	3307      	adds	r3, #7
 8000df2:	08db      	lsrs	r3, r3, #3
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	ebad 0d03 	sub.w	sp, sp, r3
 8000dfa:	466b      	mov	r3, sp
 8000dfc:	3300      	adds	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]

	//Index where RTS command byte is stored
	uint8_t RTS_Index = (7 + DataLength) - 1;
 8000e00:	79bb      	ldrb	r3, [r7, #6]
 8000e02:	3306      	adds	r3, #6
 8000e04:	72fb      	strb	r3, [r7, #11]
	uint8_t TxBuffer_address;

	//holds the TxBuffer register value. For status checking
	uint8_t TxBuffer_register_val;

	switch (Send_TxBuffern) {
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2b51      	cmp	r3, #81	@ 0x51
 8000e0a:	d030      	beq.n	8000e6e <MCP2515_CAN_Transmit_Single_TxBuffer+0xe2>
 8000e0c:	2b51      	cmp	r3, #81	@ 0x51
 8000e0e:	dc43      	bgt.n	8000e98 <MCP2515_CAN_Transmit_Single_TxBuffer+0x10c>
 8000e10:	2b31      	cmp	r3, #49	@ 0x31
 8000e12:	d002      	beq.n	8000e1a <MCP2515_CAN_Transmit_Single_TxBuffer+0x8e>
 8000e14:	2b41      	cmp	r3, #65	@ 0x41
 8000e16:	d015      	beq.n	8000e44 <MCP2515_CAN_Transmit_Single_TxBuffer+0xb8>
 8000e18:	e03e      	b.n	8000e98 <MCP2515_CAN_Transmit_Single_TxBuffer+0x10c>
	case SEND_TxBUFFER0:
		TxBuffer_address = TXBUFFER0_CTRL_REG_ADDR_BTM;
 8000e1a:	2330      	movs	r3, #48	@ 0x30
 8000e1c:	75fb      	strb	r3, [r7, #23]
		if(MCP2515_SPI_Read_SingleRegister(TxBuffer_address) & TXBnCTRL_TXREQ_MASK){
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fee0 	bl	8000be6 <MCP2515_SPI_Read_SingleRegister>
 8000e26:	4603      	mov	r3, r0
 8000e28:	f003 0308 	and.w	r3, r3, #8
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MCP2515_CAN_Transmit_Single_TxBuffer+0xa8>
			//Buffer busy skip or retry again
			return TXBUFFER_BUSY;
 8000e30:	2340      	movs	r3, #64	@ 0x40
 8000e32:	e078      	b.n	8000f26 <MCP2515_CAN_Transmit_Single_TxBuffer+0x19a>
		}
		//Load_TxBufferLoc_t command
		TxBuffer_temp[0] = START_TXB0SIDH;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2240      	movs	r2, #64	@ 0x40
 8000e38:	701a      	strb	r2, [r3, #0]

		//RTS_TxBuffer_t command, equation below calculates the last index of array.
		TxBuffer_temp[RTS_Index] = RTS_TxBUFFER0;
 8000e3a:	7afb      	ldrb	r3, [r7, #11]
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	2181      	movs	r1, #129	@ 0x81
 8000e40:	54d1      	strb	r1, [r2, r3]
		break;
 8000e42:	e02b      	b.n	8000e9c <MCP2515_CAN_Transmit_Single_TxBuffer+0x110>

	case SEND_TxBUFFER1:
		TxBuffer_address = TXBUFFER1_CTRL_REG_ADDR_BTM;
 8000e44:	2340      	movs	r3, #64	@ 0x40
 8000e46:	75fb      	strb	r3, [r7, #23]
		if(MCP2515_SPI_Read_SingleRegister(TxBuffer_address) & TXBnCTRL_TXREQ_MASK){
 8000e48:	7dfb      	ldrb	r3, [r7, #23]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fecb 	bl	8000be6 <MCP2515_SPI_Read_SingleRegister>
 8000e50:	4603      	mov	r3, r0
 8000e52:	f003 0308 	and.w	r3, r3, #8
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MCP2515_CAN_Transmit_Single_TxBuffer+0xd2>
			//Buffer busy skip or retry again
			return TXBUFFER_BUSY;
 8000e5a:	2340      	movs	r3, #64	@ 0x40
 8000e5c:	e063      	b.n	8000f26 <MCP2515_CAN_Transmit_Single_TxBuffer+0x19a>
		}
		//Load_TxBufferLoc_t command
		TxBuffer_temp[0] = START_TXB1SIDH;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2242      	movs	r2, #66	@ 0x42
 8000e62:	701a      	strb	r2, [r3, #0]

		//RTS_TxBuffer_t command
		TxBuffer_temp[RTS_Index] = RTS_TxBUFFER1;
 8000e64:	7afb      	ldrb	r3, [r7, #11]
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	2182      	movs	r1, #130	@ 0x82
 8000e6a:	54d1      	strb	r1, [r2, r3]
		break;
 8000e6c:	e016      	b.n	8000e9c <MCP2515_CAN_Transmit_Single_TxBuffer+0x110>

	case SEND_TxBUFFER2:
		TxBuffer_address = TXBUFFER2_CTRL_REG_ADDR_BTM;
 8000e6e:	2350      	movs	r3, #80	@ 0x50
 8000e70:	75fb      	strb	r3, [r7, #23]
		if(MCP2515_SPI_Read_SingleRegister(TxBuffer_address) & TXBnCTRL_TXREQ_MASK){
 8000e72:	7dfb      	ldrb	r3, [r7, #23]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff feb6 	bl	8000be6 <MCP2515_SPI_Read_SingleRegister>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	f003 0308 	and.w	r3, r3, #8
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MCP2515_CAN_Transmit_Single_TxBuffer+0xfc>
			//Buffer busy skip or retry again
			return TXBUFFER_BUSY;
 8000e84:	2340      	movs	r3, #64	@ 0x40
 8000e86:	e04e      	b.n	8000f26 <MCP2515_CAN_Transmit_Single_TxBuffer+0x19a>
		}
		//Load_TxBufferLoc_t command
		TxBuffer_temp[0] = START_TXB2SIDH;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2244      	movs	r2, #68	@ 0x44
 8000e8c:	701a      	strb	r2, [r3, #0]

		//RTS_TxBuffer_t command
		TxBuffer_temp[RTS_Index] = RTS_TxBUFFER2;
 8000e8e:	7afb      	ldrb	r3, [r7, #11]
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	2184      	movs	r1, #132	@ 0x84
 8000e94:	54d1      	strb	r1, [r2, r3]
		break;
 8000e96:	e001      	b.n	8000e9c <MCP2515_CAN_Transmit_Single_TxBuffer+0x110>
	default:
		return ERR_INVALID_INPUT;
 8000e98:	2344      	movs	r3, #68	@ 0x44
 8000e9a:	e044      	b.n	8000f26 <MCP2515_CAN_Transmit_Single_TxBuffer+0x19a>
		break;
	}

	//to be written into TXBnSIDH:TRANSMIT BUFFER n STANDARD IDENTIFIER REGISTER HIGH
	TxBuffer_temp[1] = (uint8_t)((ArbitrationID & 0x7F8) >> 3);
 8000e9c:	88bb      	ldrh	r3, [r7, #4]
 8000e9e:	10db      	asrs	r3, r3, #3
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	705a      	strb	r2, [r3, #1]

	//to be written into TXBnSIDH:TRANSMIT BUFFER n STANDARD IDENTIFIER REGISTER LOW
	TxBuffer_temp[2] = (uint8_t)((ArbitrationID & 0x07) << 5);
 8000ea6:	88bb      	ldrh	r3, [r7, #4]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	015b      	lsls	r3, r3, #5
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	709a      	strb	r2, [r3, #2]

	//TXBnEID8(TxBuffer_temp[3]) & TXBnEID0(TxBuffer_temp[4]) set as 0x00 since its not needed
	TxBuffer_temp[3] = 0x00;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	70da      	strb	r2, [r3, #3]
	TxBuffer_temp[4] = 0x00;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	711a      	strb	r2, [r3, #4]

	//to be written into TXBnDLC:TRANSMIT BUFFER n DATA LENGTH CODE REGISTER
	TxBuffer_temp[5] = DataLength & 0x0F;
 8000ebe:	79bb      	ldrb	r3, [r7, #6]
 8000ec0:	f003 030f 	and.w	r3, r3, #15
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	715a      	strb	r2, [r3, #5]

	//Store Data Payload into TxBuffer_temp to be written into TXBnDm:TRANSMIT BUFFER n DATA BYTE m REGISTER
	memcpy(&TxBuffer_temp[6], DataBuffer, DataLength);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	3306      	adds	r3, #6
 8000ece:	79ba      	ldrb	r2, [r7, #6]
 8000ed0:	6839      	ldr	r1, [r7, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f003 fb92 	bl	80045fc <memcpy>

	//Load the selected TxBuffer
	MCP2515_SPI_Transmit(TxBuffer_temp, (6 + DataLength));
 8000ed8:	79bb      	ldrb	r3, [r7, #6]
 8000eda:	3306      	adds	r3, #6
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	4619      	mov	r1, r3
 8000ee0:	68f8      	ldr	r0, [r7, #12]
 8000ee2:	f7ff fd87 	bl	80009f4 <MCP2515_SPI_Transmit>

	//Trigger to send Selected TxBuffern
	MCP2515_SPI_RequestToSend(TxBuffer_temp[RTS_Index]);
 8000ee6:	7afb      	ldrb	r3, [r7, #11]
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	5cd3      	ldrb	r3, [r2, r3]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fe05 	bl	8000afc <MCP2515_SPI_RequestToSend>

	TxBuffer_register_val = MCP2515_SPI_Read_SingleRegister(TxBuffer_address);
 8000ef2:	7dfb      	ldrb	r3, [r7, #23]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fe76 	bl	8000be6 <MCP2515_SPI_Read_SingleRegister>
 8000efa:	4603      	mov	r3, r0
 8000efc:	72bb      	strb	r3, [r7, #10]

	//if TXREQ bit = 1 after RTS command, transmission has failed
	if(TxBuffer_register_val & TXBnCTRL_TXREQ_MASK){
 8000efe:	7abb      	ldrb	r3, [r7, #10]
 8000f00:	f003 0308 	and.w	r3, r3, #8
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d00d      	beq.n	8000f24 <MCP2515_CAN_Transmit_Single_TxBuffer+0x198>
		//Check if Arbitration loss
		if(TxBuffer_register_val & TXBnCTRL_MLOA_MASK){
 8000f08:	7abb      	ldrb	r3, [r7, #10]
 8000f0a:	f003 0320 	and.w	r3, r3, #32
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MCP2515_CAN_Transmit_Single_TxBuffer+0x18a>
			return ERR_ARBITRATION_LOSS;
 8000f12:	2342      	movs	r3, #66	@ 0x42
 8000f14:	e007      	b.n	8000f26 <MCP2515_CAN_Transmit_Single_TxBuffer+0x19a>
		}
		//Check if Message Error
		if(TxBuffer_register_val & TXBnCTRL_TXERR_MASK){
 8000f16:	7abb      	ldrb	r3, [r7, #10]
 8000f18:	f003 0310 	and.w	r3, r3, #16
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MCP2515_CAN_Transmit_Single_TxBuffer+0x198>
			return ERR_TRANSMISSION;
 8000f20:	2343      	movs	r3, #67	@ 0x43
 8000f22:	e000      	b.n	8000f26 <MCP2515_CAN_Transmit_Single_TxBuffer+0x19a>
		}
	}

	return TX_SUCCESS;
 8000f24:	2341      	movs	r3, #65	@ 0x41
 8000f26:	46b5      	mov	sp, r6
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	371c      	adds	r7, #28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000f34 <MCP2515_Filters_Init>:
 *
 * @param	*MCP2515_handle: Pointer to MCP2515_CFG_Handle_t which holds the user defined configurations.
 *
 * @NOTE: 	ONLY supports Standard CAN frame format. Does not support Extended CAN Frame for now.
 */
static void MCP2515_Filters_Init(MCP2515_CFG_Handle_t *MCP2515_handle){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

	uint8_t register_address = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]

	//Configure RxBuffer0 Filters if specified
	if( (MCP2515_handle->RxBUFFERn_FILT_CFG & RxBUFFER0_FILT_CFG_MASK) != 0){
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d03d      	beq.n	8000fc8 <MCP2515_Filters_Init+0x94>

		//extract bits [10:3] of 11-Bit mask to write into RXM0SIDH  (Receive Buffer 0 Mask Standard Identifier High Register)
		register_value_temp[0] = (uint8_t)((MCP2515_handle->RxBuffer0_FILT.RxBuffer0_AcceptMask & 0x7F8) >> 3);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	88db      	ldrh	r3, [r3, #6]
 8000f50:	10db      	asrs	r3, r3, #3
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b44      	ldr	r3, [pc, #272]	@ (8001068 <MCP2515_Filters_Init+0x134>)
 8000f56:	701a      	strb	r2, [r3, #0]

		//extract bits [2:0] of 11-Bit mask to write into RXM0SIDH
		register_value_temp[1] = (uint8_t)((MCP2515_handle->RxBuffer0_FILT.RxBuffer0_AcceptMask & 0x07) << 5);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	88db      	ldrh	r3, [r3, #6]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	015b      	lsls	r3, r3, #5
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4b41      	ldr	r3, [pc, #260]	@ (8001068 <MCP2515_Filters_Init+0x134>)
 8000f64:	705a      	strb	r2, [r3, #1]

		//write acceptance mask into registers RXM0SIDH to RXM0SIDL
		MCP2515_SPI_WriteRegister(RxBUFFER0_MASK_SIDH_REG_ADDR, register_value_temp, 2);
 8000f66:	2202      	movs	r2, #2
 8000f68:	493f      	ldr	r1, [pc, #252]	@ (8001068 <MCP2515_Filters_Init+0x134>)
 8000f6a:	2020      	movs	r0, #32
 8000f6c:	f7ff fdef 	bl	8000b4e <MCP2515_SPI_WriteRegister>

		//loop through all filters in Rxbuffer0
		for(uint8_t i = 0; i < 2; i++){
 8000f70:	2300      	movs	r3, #0
 8000f72:	73bb      	strb	r3, [r7, #14]
 8000f74:	e025      	b.n	8000fc2 <MCP2515_Filters_Init+0x8e>
			if(MCP2515_handle->RxBuffer0_FILT.RxBuffer0_Filt[i] != 0){
 8000f76:	7bbb      	ldrb	r3, [r7, #14]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	885b      	ldrh	r3, [r3, #2]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d01b      	beq.n	8000fbc <MCP2515_Filters_Init+0x88>
				//extract bits [10:3] of 11-Bit SID (Standard Identifier) filter to write into RXF0SIDH
				register_value_temp[0] = (uint8_t)((MCP2515_handle->RxBuffer0_FILT.RxBuffer0_Filt[i] & 0x7F8) >> 3);
 8000f84:	7bbb      	ldrb	r3, [r7, #14]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	885b      	ldrh	r3, [r3, #2]
 8000f8e:	10db      	asrs	r3, r3, #3
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b35      	ldr	r3, [pc, #212]	@ (8001068 <MCP2515_Filters_Init+0x134>)
 8000f94:	701a      	strb	r2, [r3, #0]

				//extract bits [2:0] of 11-Bit SID filter to write into RXF0SIDL
				register_value_temp[1] = (uint8_t)((MCP2515_handle->RxBuffer0_FILT.RxBuffer0_Filt[i] & 0x07) << 5);
 8000f96:	7bbb      	ldrb	r3, [r7, #14]
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	4413      	add	r3, r2
 8000f9e:	885b      	ldrh	r3, [r3, #2]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	015b      	lsls	r3, r3, #5
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4b30      	ldr	r3, [pc, #192]	@ (8001068 <MCP2515_Filters_Init+0x134>)
 8000fa8:	705a      	strb	r2, [r3, #1]

				//increment to RxBUFFER0_FILTER1_SIDH_REG_ADDR
				register_address = ( RxBUFFER0_FILTER0_SIDH_REG_ADDR + (i * 4) );
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	73fb      	strb	r3, [r7, #15]

				//write filter into registers RXF0SIDH to RXF0SIDL
				MCP2515_SPI_WriteRegister(register_address, register_value_temp, 2);
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	492c      	ldr	r1, [pc, #176]	@ (8001068 <MCP2515_Filters_Init+0x134>)
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fdc9 	bl	8000b4e <MCP2515_SPI_WriteRegister>
		for(uint8_t i = 0; i < 2; i++){
 8000fbc:	7bbb      	ldrb	r3, [r7, #14]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	73bb      	strb	r3, [r7, #14]
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d9d6      	bls.n	8000f76 <MCP2515_Filters_Init+0x42>
			}
		}
	}

	//Configure RxBuffer1 Filters if specified
	if( (MCP2515_handle->RxBUFFERn_FILT_CFG & RxBUFFER1_FILT_CFG_MASK) != 0){
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d045      	beq.n	8001060 <MCP2515_Filters_Init+0x12c>

		//extract bits [10:3] of 11-Bit mask to write into RXM1SIDH  (Receive Buffer 0 Mask Standard Identifier High Register)
		register_value_temp[0] = (uint8_t)((MCP2515_handle->RxBuffer1_FILT.RxBuffer1_AcceptMask & 0x7F8) >> 3);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	8a1b      	ldrh	r3, [r3, #16]
 8000fd8:	10db      	asrs	r3, r3, #3
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	4b22      	ldr	r3, [pc, #136]	@ (8001068 <MCP2515_Filters_Init+0x134>)
 8000fde:	701a      	strb	r2, [r3, #0]

		//extract bits [2:0] of 11-Bit mask to write into RXM1SIDH
		register_value_temp[1] = (uint8_t)((MCP2515_handle->RxBuffer1_FILT.RxBuffer1_AcceptMask & 0x07) << 5);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	8a1b      	ldrh	r3, [r3, #16]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	015b      	lsls	r3, r3, #5
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b1f      	ldr	r3, [pc, #124]	@ (8001068 <MCP2515_Filters_Init+0x134>)
 8000fec:	705a      	strb	r2, [r3, #1]

		//write acceptance mask into registers RXM1SIDH to RXM1SIDL
		MCP2515_SPI_WriteRegister(RxBUFFER1_MASK_SIDH_REG_ADDR, register_value_temp, 2);
 8000fee:	2202      	movs	r2, #2
 8000ff0:	491d      	ldr	r1, [pc, #116]	@ (8001068 <MCP2515_Filters_Init+0x134>)
 8000ff2:	2024      	movs	r0, #36	@ 0x24
 8000ff4:	f7ff fdab 	bl	8000b4e <MCP2515_SPI_WriteRegister>

		//loop through all filters in Rxbuffer1
		for(uint8_t i = 0; i < 4; i++){
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	737b      	strb	r3, [r7, #13]
 8000ffc:	e02d      	b.n	800105a <MCP2515_Filters_Init+0x126>

			if(MCP2515_handle->RxBuffer1_FILT.RxBuffer1_Filt[i] != 0){
 8000ffe:	7b7a      	ldrb	r2, [r7, #13]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3204      	adds	r2, #4
 8001004:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d023      	beq.n	8001054 <MCP2515_Filters_Init+0x120>
				//extract bits [10:3] of 11-Bit SID (Standard Identifier) filter to write into RXF0SIDH
				register_value_temp[0] = (uint8_t)((MCP2515_handle->RxBuffer1_FILT.RxBuffer1_Filt[i] & 0x7F8) >> 3);
 800100c:	7b7a      	ldrb	r2, [r7, #13]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3204      	adds	r2, #4
 8001012:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001016:	10db      	asrs	r3, r3, #3
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b13      	ldr	r3, [pc, #76]	@ (8001068 <MCP2515_Filters_Init+0x134>)
 800101c:	701a      	strb	r2, [r3, #0]

				//extract bits [2:0] of 11-Bit SID filter to write into RXF0SIDL
				register_value_temp[1] = (uint8_t)((MCP2515_handle->RxBuffer1_FILT.RxBuffer1_Filt[i] & 0x07)<< 5);
 800101e:	7b7a      	ldrb	r2, [r7, #13]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3204      	adds	r2, #4
 8001024:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	015b      	lsls	r3, r3, #5
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <MCP2515_Filters_Init+0x134>)
 8001030:	705a      	strb	r2, [r3, #1]

				//if at Filter 3 and up
				if(i > 0){
 8001032:	7b7b      	ldrb	r3, [r7, #13]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d005      	beq.n	8001044 <MCP2515_Filters_Init+0x110>
					register_address = ( RxBUFFER1_FILTER3_SIDH_REG_ADDR + ( (i-1) * 4 ) );
 8001038:	7b7b      	ldrb	r3, [r7, #13]
 800103a:	3303      	adds	r3, #3
 800103c:	b2db      	uxtb	r3, r3
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	e001      	b.n	8001048 <MCP2515_Filters_Init+0x114>
				}else{
					//if at i = 0, use address RxBUFFER1_FILTER2_SIDH_REG_ADDR
					register_address = RxBUFFER1_FILTER2_SIDH_REG_ADDR;
 8001044:	2308      	movs	r3, #8
 8001046:	73fb      	strb	r3, [r7, #15]
				}

				//write filter into registers RXF0SIDH to RXF0SIDL
				MCP2515_SPI_WriteRegister(register_address, register_value_temp, 2);
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	2202      	movs	r2, #2
 800104c:	4906      	ldr	r1, [pc, #24]	@ (8001068 <MCP2515_Filters_Init+0x134>)
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fd7d 	bl	8000b4e <MCP2515_SPI_WriteRegister>
		for(uint8_t i = 0; i < 4; i++){
 8001054:	7b7b      	ldrb	r3, [r7, #13]
 8001056:	3301      	adds	r3, #1
 8001058:	737b      	strb	r3, [r7, #13]
 800105a:	7b7b      	ldrb	r3, [r7, #13]
 800105c:	2b03      	cmp	r3, #3
 800105e:	d9ce      	bls.n	8000ffe <MCP2515_Filters_Init+0xca>
			}

		}
	}
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200001e0 	.word	0x200001e0

0800106c <EXTI0_IRQHandler>:
/********************************INTERRUPT HANDLER*****************************************/
/**********************************************************************
 * @brief 	Interrupt service routine, at the event of successful reception (filter match) MCP2515 generates interrupt
 */
void EXTI0_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0

  HAL_GPIO_EXTI_IRQHandler(CAN_INT_Pin);
 8001070:	2001      	movs	r0, #1
 8001072:	f000 fd01 	bl	8001a78 <HAL_GPIO_EXTI_IRQHandler>



}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001086:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <HAL_Init+0x3c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a0b      	ldr	r2, [pc, #44]	@ (80010b8 <HAL_Init+0x3c>)
 800108c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001090:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001092:	2003      	movs	r0, #3
 8001094:	f000 f96c 	bl	8001370 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001098:	200f      	movs	r0, #15
 800109a:	f000 f80f 	bl	80010bc <HAL_InitTick>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	71fb      	strb	r3, [r7, #7]
 80010a8:	e001      	b.n	80010ae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010aa:	f7ff fae6 	bl	800067a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010ae:	79fb      	ldrb	r3, [r7, #7]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	58004000 	.word	0x58004000

080010bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80010c8:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <HAL_InitTick+0x6c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d024      	beq.n	800111a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010d0:	f001 fe2e 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 80010d4:	4602      	mov	r2, r0
 80010d6:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <HAL_InitTick+0x6c>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4619      	mov	r1, r3
 80010dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 f974 	bl	80013d6 <HAL_SYSTICK_Config>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d10f      	bne.n	8001114 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b0f      	cmp	r3, #15
 80010f8:	d809      	bhi.n	800110e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fa:	2200      	movs	r2, #0
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001102:	f000 f940 	bl	8001386 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001106:	4a09      	ldr	r2, [pc, #36]	@ (800112c <HAL_InitTick+0x70>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	e007      	b.n	800111e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	73fb      	strb	r3, [r7, #15]
 8001112:	e004      	b.n	800111e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	e001      	b.n	800111e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800111e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000018 	.word	0x20000018
 800112c:	20000014 	.word	0x20000014

08001130 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001134:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <HAL_IncTick+0x20>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_IncTick+0x24>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	4a04      	ldr	r2, [pc, #16]	@ (8001154 <HAL_IncTick+0x24>)
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000018 	.word	0x20000018
 8001154:	200001e4 	.word	0x200001e4

08001158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b03      	ldr	r3, [pc, #12]	@ (800116c <HAL_GetTick+0x14>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	200001e4 	.word	0x200001e4

08001170 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001174:	4b03      	ldr	r3, [pc, #12]	@ (8001184 <HAL_GetTickPrio+0x14>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000014 	.word	0x20000014

08001188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001190:	f7ff ffe2 	bl	8001158 <HAL_GetTick>
 8001194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a0:	d005      	beq.n	80011ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a2:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <HAL_Delay+0x44>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ae:	bf00      	nop
 80011b0:	f7ff ffd2 	bl	8001158 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d8f7      	bhi.n	80011b0 <HAL_Delay+0x28>
  {
  }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000018 	.word	0x20000018

080011d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011ec:	4013      	ands	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001202:	4a04      	ldr	r2, [pc, #16]	@ (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60d3      	str	r3, [r2, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800121c:	4b04      	ldr	r3, [pc, #16]	@ (8001230 <__NVIC_GetPriorityGrouping+0x18>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	f003 0307 	and.w	r3, r3, #7
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	2b00      	cmp	r3, #0
 8001244:	db0b      	blt.n	800125e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	f003 021f 	and.w	r2, r3, #31
 800124c:	4907      	ldr	r1, [pc, #28]	@ (800126c <__NVIC_EnableIRQ+0x38>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	095b      	lsrs	r3, r3, #5
 8001254:	2001      	movs	r0, #1
 8001256:	fa00 f202 	lsl.w	r2, r0, r2
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000e100 	.word	0xe000e100

08001270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	6039      	str	r1, [r7, #0]
 800127a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	2b00      	cmp	r3, #0
 8001282:	db0a      	blt.n	800129a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	b2da      	uxtb	r2, r3
 8001288:	490c      	ldr	r1, [pc, #48]	@ (80012bc <__NVIC_SetPriority+0x4c>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	0112      	lsls	r2, r2, #4
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	440b      	add	r3, r1
 8001294:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001298:	e00a      	b.n	80012b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4908      	ldr	r1, [pc, #32]	@ (80012c0 <__NVIC_SetPriority+0x50>)
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	3b04      	subs	r3, #4
 80012a8:	0112      	lsls	r2, r2, #4
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	440b      	add	r3, r1
 80012ae:	761a      	strb	r2, [r3, #24]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000e100 	.word	0xe000e100
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	@ 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f1c3 0307 	rsb	r3, r3, #7
 80012de:	2b04      	cmp	r3, #4
 80012e0:	bf28      	it	cs
 80012e2:	2304      	movcs	r3, #4
 80012e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3304      	adds	r3, #4
 80012ea:	2b06      	cmp	r3, #6
 80012ec:	d902      	bls.n	80012f4 <NVIC_EncodePriority+0x30>
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3b03      	subs	r3, #3
 80012f2:	e000      	b.n	80012f6 <NVIC_EncodePriority+0x32>
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	f04f 32ff 	mov.w	r2, #4294967295
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43da      	mvns	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	401a      	ands	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800130c:	f04f 31ff 	mov.w	r1, #4294967295
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa01 f303 	lsl.w	r3, r1, r3
 8001316:	43d9      	mvns	r1, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	4313      	orrs	r3, r2
         );
}
 800131e:	4618      	mov	r0, r3
 8001320:	3724      	adds	r7, #36	@ 0x24
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3b01      	subs	r3, #1
 8001338:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800133c:	d301      	bcc.n	8001342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133e:	2301      	movs	r3, #1
 8001340:	e00f      	b.n	8001362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001342:	4a0a      	ldr	r2, [pc, #40]	@ (800136c <SysTick_Config+0x40>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134a:	210f      	movs	r1, #15
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f7ff ff8e 	bl	8001270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001354:	4b05      	ldr	r3, [pc, #20]	@ (800136c <SysTick_Config+0x40>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135a:	4b04      	ldr	r3, [pc, #16]	@ (800136c <SysTick_Config+0x40>)
 800135c:	2207      	movs	r2, #7
 800135e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	e000e010 	.word	0xe000e010

08001370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ff29 	bl	80011d0 <__NVIC_SetPriorityGrouping>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b086      	sub	sp, #24
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001394:	f7ff ff40 	bl	8001218 <__NVIC_GetPriorityGrouping>
 8001398:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	68b9      	ldr	r1, [r7, #8]
 800139e:	6978      	ldr	r0, [r7, #20]
 80013a0:	f7ff ff90 	bl	80012c4 <NVIC_EncodePriority>
 80013a4:	4602      	mov	r2, r0
 80013a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff5f 	bl	8001270 <__NVIC_SetPriority>
}
 80013b2:	bf00      	nop
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff33 	bl	8001234 <__NVIC_EnableIRQ>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ffa4 	bl	800132c <SysTick_Config>
 80013e4:	4603      	mov	r3, r0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e08e      	b.n	8001520 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	4b47      	ldr	r3, [pc, #284]	@ (8001528 <HAL_DMA_Init+0x138>)
 800140a:	429a      	cmp	r2, r3
 800140c:	d80f      	bhi.n	800142e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	4b45      	ldr	r3, [pc, #276]	@ (800152c <HAL_DMA_Init+0x13c>)
 8001416:	4413      	add	r3, r2
 8001418:	4a45      	ldr	r2, [pc, #276]	@ (8001530 <HAL_DMA_Init+0x140>)
 800141a:	fba2 2303 	umull	r2, r3, r2, r3
 800141e:	091b      	lsrs	r3, r3, #4
 8001420:	009a      	lsls	r2, r3, #2
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a42      	ldr	r2, [pc, #264]	@ (8001534 <HAL_DMA_Init+0x144>)
 800142a:	641a      	str	r2, [r3, #64]	@ 0x40
 800142c:	e00e      	b.n	800144c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	4b40      	ldr	r3, [pc, #256]	@ (8001538 <HAL_DMA_Init+0x148>)
 8001436:	4413      	add	r3, r2
 8001438:	4a3d      	ldr	r2, [pc, #244]	@ (8001530 <HAL_DMA_Init+0x140>)
 800143a:	fba2 2303 	umull	r2, r3, r2, r3
 800143e:	091b      	lsrs	r3, r3, #4
 8001440:	009a      	lsls	r2, r3, #2
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a3c      	ldr	r2, [pc, #240]	@ (800153c <HAL_DMA_Init+0x14c>)
 800144a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2202      	movs	r2, #2
 8001450:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001466:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001470:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800147c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001488:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	4313      	orrs	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 f8fe 	bl	80016a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80014ac:	d102      	bne.n	80014b4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014bc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80014c0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80014ca:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d010      	beq.n	80014f6 <HAL_DMA_Init+0x106>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b04      	cmp	r3, #4
 80014da:	d80c      	bhi.n	80014f6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 f91d 	bl	800171c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	e008      	b.n	8001508 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40020407 	.word	0x40020407
 800152c:	bffdfff8 	.word	0xbffdfff8
 8001530:	cccccccd 	.word	0xcccccccd
 8001534:	40020000 	.word	0x40020000
 8001538:	bffdfbf8 	.word	0xbffdfbf8
 800153c:	40020400 	.word	0x40020400

08001540 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155c:	f003 031c 	and.w	r3, r3, #28
 8001560:	2204      	movs	r2, #4
 8001562:	409a      	lsls	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4013      	ands	r3, r2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d026      	beq.n	80015ba <HAL_DMA_IRQHandler+0x7a>
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	2b00      	cmp	r3, #0
 8001574:	d021      	beq.n	80015ba <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0320 	and.w	r3, r3, #32
 8001580:	2b00      	cmp	r3, #0
 8001582:	d107      	bne.n	8001594 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0204 	bic.w	r2, r2, #4
 8001592:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001598:	f003 021c 	and.w	r2, r3, #28
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a0:	2104      	movs	r1, #4
 80015a2:	fa01 f202 	lsl.w	r2, r1, r2
 80015a6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d071      	beq.n	8001694 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80015b8:	e06c      	b.n	8001694 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015be:	f003 031c 	and.w	r3, r3, #28
 80015c2:	2202      	movs	r2, #2
 80015c4:	409a      	lsls	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d02e      	beq.n	800162c <HAL_DMA_IRQHandler+0xec>
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d029      	beq.n	800162c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0320 	and.w	r3, r3, #32
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10b      	bne.n	80015fe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 020a 	bic.w	r2, r2, #10
 80015f4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001602:	f003 021c 	and.w	r2, r3, #28
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	2102      	movs	r1, #2
 800160c:	fa01 f202 	lsl.w	r2, r1, r2
 8001610:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800161e:	2b00      	cmp	r3, #0
 8001620:	d038      	beq.n	8001694 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800162a:	e033      	b.n	8001694 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001630:	f003 031c 	and.w	r3, r3, #28
 8001634:	2208      	movs	r2, #8
 8001636:	409a      	lsls	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4013      	ands	r3, r2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d02a      	beq.n	8001696 <HAL_DMA_IRQHandler+0x156>
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d025      	beq.n	8001696 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 020e 	bic.w	r2, r2, #14
 8001658:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165e:	f003 021c 	and.w	r2, r3, #28
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	2101      	movs	r1, #1
 8001668:	fa01 f202 	lsl.w	r2, r1, r2
 800166c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001688:	2b00      	cmp	r3, #0
 800168a:	d004      	beq.n	8001696 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001694:	bf00      	nop
 8001696:	bf00      	nop
}
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b17      	ldr	r3, [pc, #92]	@ (800170c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d80a      	bhi.n	80016ca <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b8:	089b      	lsrs	r3, r3, #2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80016c0:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6493      	str	r3, [r2, #72]	@ 0x48
 80016c8:	e007      	b.n	80016da <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	009a      	lsls	r2, r3, #2
 80016d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80016d4:	4413      	add	r3, r2
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	3b08      	subs	r3, #8
 80016e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001714 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80016e4:	fba2 2303 	umull	r2, r3, r2, r3
 80016e8:	091b      	lsrs	r3, r3, #4
 80016ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80016f0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f003 031f 	and.w	r3, r3, #31
 80016f8:	2201      	movs	r2, #1
 80016fa:	409a      	lsls	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40020407 	.word	0x40020407
 8001710:	4002081c 	.word	0x4002081c
 8001714:	cccccccd 	.word	0xcccccccd
 8001718:	40020880 	.word	0x40020880

0800171c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800172c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001732:	4413      	add	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	461a      	mov	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a09      	ldr	r2, [pc, #36]	@ (8001764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8001740:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	3b01      	subs	r3, #1
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	2201      	movs	r2, #1
 800174c:	409a      	lsls	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	1000823f 	.word	0x1000823f
 8001764:	40020940 	.word	0x40020940

08001768 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001776:	e14c      	b.n	8001a12 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	2101      	movs	r1, #1
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	fa01 f303 	lsl.w	r3, r1, r3
 8001784:	4013      	ands	r3, r2
 8001786:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 813e 	beq.w	8001a0c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	2b01      	cmp	r3, #1
 800179a:	d005      	beq.n	80017a8 <HAL_GPIO_Init+0x40>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d130      	bne.n	800180a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	2203      	movs	r2, #3
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017de:	2201      	movs	r2, #1
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	091b      	lsrs	r3, r3, #4
 80017f4:	f003 0201 	and.w	r2, r3, #1
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	2b03      	cmp	r3, #3
 8001814:	d017      	beq.n	8001846 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	2203      	movs	r2, #3
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4013      	ands	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d123      	bne.n	800189a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	08da      	lsrs	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3208      	adds	r2, #8
 800185a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800185e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	220f      	movs	r2, #15
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	691a      	ldr	r2, [r3, #16]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	08da      	lsrs	r2, r3, #3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3208      	adds	r2, #8
 8001894:	6939      	ldr	r1, [r7, #16]
 8001896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	2203      	movs	r2, #3
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 0203 	and.w	r2, r3, #3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 8098 	beq.w	8001a0c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80018dc:	4a54      	ldr	r2, [pc, #336]	@ (8001a30 <HAL_GPIO_Init+0x2c8>)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	089b      	lsrs	r3, r3, #2
 80018e2:	3302      	adds	r3, #2
 80018e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	220f      	movs	r2, #15
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001906:	d019      	beq.n	800193c <HAL_GPIO_Init+0x1d4>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a4a      	ldr	r2, [pc, #296]	@ (8001a34 <HAL_GPIO_Init+0x2cc>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d013      	beq.n	8001938 <HAL_GPIO_Init+0x1d0>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a49      	ldr	r2, [pc, #292]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d00d      	beq.n	8001934 <HAL_GPIO_Init+0x1cc>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a48      	ldr	r2, [pc, #288]	@ (8001a3c <HAL_GPIO_Init+0x2d4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d007      	beq.n	8001930 <HAL_GPIO_Init+0x1c8>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a47      	ldr	r2, [pc, #284]	@ (8001a40 <HAL_GPIO_Init+0x2d8>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d101      	bne.n	800192c <HAL_GPIO_Init+0x1c4>
 8001928:	2304      	movs	r3, #4
 800192a:	e008      	b.n	800193e <HAL_GPIO_Init+0x1d6>
 800192c:	2307      	movs	r3, #7
 800192e:	e006      	b.n	800193e <HAL_GPIO_Init+0x1d6>
 8001930:	2303      	movs	r3, #3
 8001932:	e004      	b.n	800193e <HAL_GPIO_Init+0x1d6>
 8001934:	2302      	movs	r3, #2
 8001936:	e002      	b.n	800193e <HAL_GPIO_Init+0x1d6>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <HAL_GPIO_Init+0x1d6>
 800193c:	2300      	movs	r3, #0
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	f002 0203 	and.w	r2, r2, #3
 8001944:	0092      	lsls	r2, r2, #2
 8001946:	4093      	lsls	r3, r2
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800194e:	4938      	ldr	r1, [pc, #224]	@ (8001a30 <HAL_GPIO_Init+0x2c8>)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	089b      	lsrs	r3, r3, #2
 8001954:	3302      	adds	r3, #2
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800195c:	4b39      	ldr	r3, [pc, #228]	@ (8001a44 <HAL_GPIO_Init+0x2dc>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001980:	4a30      	ldr	r2, [pc, #192]	@ (8001a44 <HAL_GPIO_Init+0x2dc>)
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001986:	4b2f      	ldr	r3, [pc, #188]	@ (8001a44 <HAL_GPIO_Init+0x2dc>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	43db      	mvns	r3, r3
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019aa:	4a26      	ldr	r2, [pc, #152]	@ (8001a44 <HAL_GPIO_Init+0x2dc>)
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019b0:	4b24      	ldr	r3, [pc, #144]	@ (8001a44 <HAL_GPIO_Init+0x2dc>)
 80019b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a44 <HAL_GPIO_Init+0x2dc>)
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80019de:	4b19      	ldr	r3, [pc, #100]	@ (8001a44 <HAL_GPIO_Init+0x2dc>)
 80019e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a04:	4a0f      	ldr	r2, [pc, #60]	@ (8001a44 <HAL_GPIO_Init+0x2dc>)
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f47f aeab 	bne.w	8001778 <HAL_GPIO_Init+0x10>
  }
}
 8001a22:	bf00      	nop
 8001a24:	bf00      	nop
 8001a26:	371c      	adds	r7, #28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	40010000 	.word	0x40010000
 8001a34:	48000400 	.word	0x48000400
 8001a38:	48000800 	.word	0x48000800
 8001a3c:	48000c00 	.word	0x48000c00
 8001a40:	48001000 	.word	0x48001000
 8001a44:	58000800 	.word	0x58000800

08001a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	807b      	strh	r3, [r7, #2]
 8001a54:	4613      	mov	r3, r2
 8001a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a58:	787b      	ldrb	r3, [r7, #1]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a5e:	887a      	ldrh	r2, [r7, #2]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a64:	e002      	b.n	8001a6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a82:	4b07      	ldr	r3, [pc, #28]	@ (8001aa0 <HAL_GPIO_EXTI_IRQHandler+0x28>)
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <HAL_GPIO_EXTI_IRQHandler+0x1c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a8e:	4a04      	ldr	r2, [pc, #16]	@ (8001aa0 <HAL_GPIO_EXTI_IRQHandler+0x28>)
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	60d3      	str	r3, [r2, #12]
   // HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	58000800 	.word	0x58000800

08001aa4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad4 <HAL_HSEM_IRQHandler+0x30>)
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001ab0:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <HAL_HSEM_IRQHandler+0x30>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	4906      	ldr	r1, [pc, #24]	@ (8001ad4 <HAL_HSEM_IRQHandler+0x30>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001abe:	4a05      	ldr	r2, [pc, #20]	@ (8001ad4 <HAL_HSEM_IRQHandler+0x30>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f807 	bl	8001ad8 <HAL_HSEM_FreeCallback>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	58001500 	.word	0x58001500

08001ad8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d01e      	beq.n	8001b3c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8001afe:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <HAL_IPCC_Init+0x60>)
 8001b00:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d102      	bne.n	8001b14 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7fe fdc4 	bl	800069c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8001b14:	68b8      	ldr	r0, [r7, #8]
 8001b16:	f000 f85b 	bl	8001bd0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f82c 	bl	8001b84 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001b3a:	e001      	b.n	8001b40 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	58000c00 	.word	0x58000c00

08001b50 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	4613      	mov	r3, r2
 8001b76:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	e00f      	b.n	8001bb2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc8 <IPCC_SetDefaultCallbacks+0x44>)
 8001b9c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	3306      	adds	r3, #6
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a08      	ldr	r2, [pc, #32]	@ (8001bcc <IPCC_SetDefaultCallbacks+0x48>)
 8001baa:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2b05      	cmp	r3, #5
 8001bb6:	d9ec      	bls.n	8001b92 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	08001b51 	.word	0x08001b51
 8001bcc:	08001b6b 	.word	0x08001b6b

08001bd0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8001be4:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	223f      	movs	r2, #63	@ 0x3f
 8001bea:	609a      	str	r2, [r3, #8]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bfc:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a04      	ldr	r2, [pc, #16]	@ (8001c14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c06:	6013      	str	r3, [r2, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	58000400 	.word	0x58000400

08001c18 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001c1c:	4b04      	ldr	r3, [pc, #16]	@ (8001c30 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	58000400 	.word	0x58000400

08001c34 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c46:	d101      	bne.n	8001c4c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_RCC_HSE_Enable>:
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <LL_RCC_HSE_Disable>:
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_RCC_HSE_IsReady>:
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001ca6:	d101      	bne.n	8001cac <LL_RCC_HSE_IsReady+0x18>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <LL_RCC_HSE_IsReady+0x1a>
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_RCC_HSI_Enable>:
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cca:	6013      	str	r3, [r2, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_RCC_HSI_Disable>:
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001cda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ce4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ce8:	6013      	str	r3, [r2, #0]
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_RCC_HSI_IsReady>:
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001cf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d06:	d101      	bne.n	8001d0c <LL_RCC_HSI_IsReady+0x18>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <LL_RCC_HSI_IsReady+0x1a>
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001d20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	061b      	lsls	r3, r3, #24
 8001d2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d32:	4313      	orrs	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <LL_RCC_HSI48_Enable>:
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001d46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_RCC_HSI48_Disable>:
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001d68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <LL_RCC_HSI48_IsReady>:
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001d8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d101      	bne.n	8001d9e <LL_RCC_HSI48_IsReady+0x18>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <LL_RCC_HSI48_IsReady+0x1a>
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <LL_RCC_LSE_Enable>:
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001dae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001db6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <LL_RCC_LSE_Disable>:
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001dd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ddc:	f023 0301 	bic.w	r3, r3, #1
 8001de0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <LL_RCC_LSE_EnableBypass>:
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001df2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_RCC_LSE_DisableBypass>:
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e20:	f023 0304 	bic.w	r3, r3, #4
 8001e24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <LL_RCC_LSE_IsReady>:
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001e36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d101      	bne.n	8001e4a <LL_RCC_LSE_IsReady+0x18>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <LL_RCC_LSE_IsReady+0x1a>
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_RCC_LSI1_Enable>:
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_RCC_LSI1_Disable>:
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <LL_RCC_LSI1_IsReady>:
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001e9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d101      	bne.n	8001eb2 <LL_RCC_LSI1_IsReady+0x18>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <LL_RCC_LSI1_IsReady+0x1a>
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <LL_RCC_LSI2_Enable>:
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ece:	f043 0304 	orr.w	r3, r3, #4
 8001ed2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001ed6:	bf00      	nop
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <LL_RCC_LSI2_Disable>:
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ef0:	f023 0304 	bic.w	r3, r3, #4
 8001ef4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <LL_RCC_LSI2_IsReady>:
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001f06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d101      	bne.n	8001f1a <LL_RCC_LSI2_IsReady+0x18>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <LL_RCC_LSI2_IsReady+0x1a>
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <LL_RCC_LSI2_SetTrimming>:
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001f2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f36:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <LL_RCC_MSI_Enable>:
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6013      	str	r3, [r2, #0]
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <LL_RCC_MSI_Disable>:
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001f76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f80:	f023 0301 	bic.w	r3, r3, #1
 8001f84:	6013      	str	r3, [r2, #0]
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_RCC_MSI_IsReady>:
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001f94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d101      	bne.n	8001fa6 <LL_RCC_MSI_IsReady+0x16>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <LL_RCC_MSI_IsReady+0x18>
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <LL_RCC_MSI_SetRange>:
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001fba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fc4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <LL_RCC_MSI_GetRange>:
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001fe0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fea:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2bb0      	cmp	r3, #176	@ 0xb0
 8001ff0:	d901      	bls.n	8001ff6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8001ff2:	23b0      	movs	r3, #176	@ 0xb0
 8001ff4:	607b      	str	r3, [r7, #4]
  return msiRange;
 8001ff6:	687b      	ldr	r3, [r7, #4]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800200c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	021b      	lsls	r3, r3, #8
 800201a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800201e:	4313      	orrs	r3, r2
 8002020:	604b      	str	r3, [r1, #4]
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <LL_RCC_SetSysClkSource>:
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002036:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f023 0203 	bic.w	r2, r3, #3
 8002040:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4313      	orrs	r3, r2
 8002048:	608b      	str	r3, [r1, #8]
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <LL_RCC_GetSysClkSource>:
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800205a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 030c 	and.w	r3, r3, #12
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <LL_RCC_SetAHBPrescaler>:
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002076:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002080:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4313      	orrs	r3, r2
 8002088:	608b      	str	r3, [r1, #8]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800209e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80020a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <LL_RCC_SetAHB4Prescaler>:
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80020ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80020d2:	f023 020f 	bic.w	r2, r3, #15
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <LL_RCC_SetAPB1Prescaler>:
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80020f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002102:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4313      	orrs	r3, r2
 800210a:	608b      	str	r3, [r1, #8]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_RCC_SetAPB2Prescaler>:
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002120:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800212a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4313      	orrs	r3, r2
 8002132:	608b      	str	r3, [r1, #8]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_RCC_GetAHBPrescaler>:
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002144:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_RCC_GetAHB4Prescaler>:
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800215c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002160:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800216a:	4618      	mov	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002182:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021a4:	6013      	str	r3, [r2, #0]
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80021b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021c2:	d101      	bne.n	80021c8 <LL_RCC_PLL_IsReady+0x18>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <LL_RCC_PLL_IsReady+0x1a>
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80021d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80021f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800220a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f003 0303 	and.w	r3, r3, #3
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800223a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002248:	d101      	bne.n	800224e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800225e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002262:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800226e:	d101      	bne.n	8002274 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002284:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002288:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800228c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002294:	d101      	bne.n	800229a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80022aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80022b8:	d101      	bne.n	80022be <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80022ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80022dc:	d101      	bne.n	80022e2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f0:	b590      	push	{r4, r7, lr}
 80022f2:	b08d      	sub	sp, #52	@ 0x34
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e363      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 808d 	beq.w	800242a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002310:	f7ff fea1 	bl	8002056 <LL_RCC_GetSysClkSource>
 8002314:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002316:	f7ff ff82 	bl	800221e <LL_RCC_PLL_GetMainSource>
 800231a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800231c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_RCC_OscConfig+0x3e>
 8002322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002324:	2b0c      	cmp	r3, #12
 8002326:	d147      	bne.n	80023b8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800232a:	2b01      	cmp	r3, #1
 800232c:	d144      	bne.n	80023b8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e347      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800233e:	f7ff fe4c 	bl	8001fda <LL_RCC_MSI_GetRange>
 8002342:	4603      	mov	r3, r0
 8002344:	429c      	cmp	r4, r3
 8002346:	d914      	bls.n	8002372 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234c:	4618      	mov	r0, r3
 800234e:	f000 fd03 	bl	8002d58 <RCC_SetFlashLatencyFromMSIRange>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e336      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fe26 	bl	8001fb2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fe4a 	bl	8002004 <LL_RCC_MSI_SetCalibTrimming>
 8002370:	e013      	b.n	800239a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fe1b 	bl	8001fb2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fe3f 	bl	8002004 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fce4 	bl	8002d58 <RCC_SetFlashLatencyFromMSIRange>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e317      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800239a:	f000 fcc9 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 800239e:	4603      	mov	r3, r0
 80023a0:	4aa4      	ldr	r2, [pc, #656]	@ (8002634 <HAL_RCC_OscConfig+0x344>)
 80023a2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023a4:	4ba4      	ldr	r3, [pc, #656]	@ (8002638 <HAL_RCC_OscConfig+0x348>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe fe87 	bl	80010bc <HAL_InitTick>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d039      	beq.n	8002428 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e308      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d01e      	beq.n	80023fe <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023c0:	f7ff fdc8 	bl	8001f54 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023c4:	f7fe fec8 	bl	8001158 <HAL_GetTick>
 80023c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023cc:	f7fe fec4 	bl	8001158 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e2f5      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80023de:	f7ff fdd7 	bl	8001f90 <LL_RCC_MSI_IsReady>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f1      	beq.n	80023cc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fde0 	bl	8001fb2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fe04 	bl	8002004 <LL_RCC_MSI_SetCalibTrimming>
 80023fc:	e015      	b.n	800242a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023fe:	f7ff fdb8 	bl	8001f72 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002402:	f7fe fea9 	bl	8001158 <HAL_GetTick>
 8002406:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800240a:	f7fe fea5 	bl	8001158 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e2d6      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800241c:	f7ff fdb8 	bl	8001f90 <LL_RCC_MSI_IsReady>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f1      	bne.n	800240a <HAL_RCC_OscConfig+0x11a>
 8002426:	e000      	b.n	800242a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002428:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d047      	beq.n	80024c6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002436:	f7ff fe0e 	bl	8002056 <LL_RCC_GetSysClkSource>
 800243a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800243c:	f7ff feef 	bl	800221e <LL_RCC_PLL_GetMainSource>
 8002440:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	2b08      	cmp	r3, #8
 8002446:	d005      	beq.n	8002454 <HAL_RCC_OscConfig+0x164>
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	2b0c      	cmp	r3, #12
 800244c:	d108      	bne.n	8002460 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d105      	bne.n	8002460 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d134      	bne.n	80024c6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e2b4      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002468:	d102      	bne.n	8002470 <HAL_RCC_OscConfig+0x180>
 800246a:	f7ff fbf5 	bl	8001c58 <LL_RCC_HSE_Enable>
 800246e:	e001      	b.n	8002474 <HAL_RCC_OscConfig+0x184>
 8002470:	f7ff fc01 	bl	8001c76 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d012      	beq.n	80024a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7fe fe6c 	bl	8001158 <HAL_GetTick>
 8002480:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002484:	f7fe fe68 	bl	8001158 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	@ 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e299      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002496:	f7ff fbfd 	bl	8001c94 <LL_RCC_HSE_IsReady>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f1      	beq.n	8002484 <HAL_RCC_OscConfig+0x194>
 80024a0:	e011      	b.n	80024c6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a2:	f7fe fe59 	bl	8001158 <HAL_GetTick>
 80024a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024aa:	f7fe fe55 	bl	8001158 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b64      	cmp	r3, #100	@ 0x64
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e286      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80024bc:	f7ff fbea 	bl	8001c94 <LL_RCC_HSE_IsReady>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f1      	bne.n	80024aa <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d04c      	beq.n	800256c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d2:	f7ff fdc0 	bl	8002056 <LL_RCC_GetSysClkSource>
 80024d6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024d8:	f7ff fea1 	bl	800221e <LL_RCC_PLL_GetMainSource>
 80024dc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_OscConfig+0x200>
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	2b0c      	cmp	r3, #12
 80024e8:	d10e      	bne.n	8002508 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d10b      	bne.n	8002508 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e266      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fc09 	bl	8001d18 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002506:	e031      	b.n	800256c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d019      	beq.n	8002544 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002510:	f7ff fbd2 	bl	8001cb8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7fe fe20 	bl	8001158 <HAL_GetTick>
 8002518:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800251c:	f7fe fe1c 	bl	8001158 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e24d      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800252e:	f7ff fbe1 	bl	8001cf4 <LL_RCC_HSI_IsReady>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f1      	beq.n	800251c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fbeb 	bl	8001d18 <LL_RCC_HSI_SetCalibTrimming>
 8002542:	e013      	b.n	800256c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002544:	f7ff fbc7 	bl	8001cd6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7fe fe06 	bl	8001158 <HAL_GetTick>
 800254c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002550:	f7fe fe02 	bl	8001158 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e233      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002562:	f7ff fbc7 	bl	8001cf4 <LL_RCC_HSI_IsReady>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f1      	bne.n	8002550 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d106      	bne.n	8002586 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80a3 	beq.w	80026cc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d076      	beq.n	800267c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b00      	cmp	r3, #0
 8002598:	d046      	beq.n	8002628 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800259a:	f7ff fc7e 	bl	8001e9a <LL_RCC_LSI1_IsReady>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d113      	bne.n	80025cc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80025a4:	f7ff fc57 	bl	8001e56 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025a8:	f7fe fdd6 	bl	8001158 <HAL_GetTick>
 80025ac:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80025b0:	f7fe fdd2 	bl	8001158 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e203      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80025c2:	f7ff fc6a 	bl	8001e9a <LL_RCC_LSI1_IsReady>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f1      	beq.n	80025b0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80025cc:	f7ff fc77 	bl	8001ebe <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe fdc2 	bl	8001158 <HAL_GetTick>
 80025d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80025d8:	f7fe fdbe 	bl	8001158 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e1ef      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80025ea:	f7ff fc8a 	bl	8001f02 <LL_RCC_LSI2_IsReady>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f1      	beq.n	80025d8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fc94 	bl	8001f26 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80025fe:	f7ff fc3b 	bl	8001e78 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002602:	f7fe fda9 	bl	8001158 <HAL_GetTick>
 8002606:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800260a:	f7fe fda5 	bl	8001158 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e1d6      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800261c:	f7ff fc3d 	bl	8001e9a <LL_RCC_LSI1_IsReady>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f1      	bne.n	800260a <HAL_RCC_OscConfig+0x31a>
 8002626:	e051      	b.n	80026cc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002628:	f7ff fc15 	bl	8001e56 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7fe fd94 	bl	8001158 <HAL_GetTick>
 8002630:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002632:	e00c      	b.n	800264e <HAL_RCC_OscConfig+0x35e>
 8002634:	20000010 	.word	0x20000010
 8002638:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800263c:	f7fe fd8c 	bl	8001158 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e1bd      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800264e:	f7ff fc24 	bl	8001e9a <LL_RCC_LSI1_IsReady>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f1      	beq.n	800263c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002658:	f7ff fc42 	bl	8001ee0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800265e:	f7fe fd7b 	bl	8001158 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b03      	cmp	r3, #3
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e1ac      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002670:	f7ff fc47 	bl	8001f02 <LL_RCC_LSI2_IsReady>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f1      	bne.n	800265e <HAL_RCC_OscConfig+0x36e>
 800267a:	e027      	b.n	80026cc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800267c:	f7ff fc30 	bl	8001ee0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002680:	f7fe fd6a 	bl	8001158 <HAL_GetTick>
 8002684:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002688:	f7fe fd66 	bl	8001158 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b03      	cmp	r3, #3
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e197      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800269a:	f7ff fc32 	bl	8001f02 <LL_RCC_LSI2_IsReady>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f1      	bne.n	8002688 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80026a4:	f7ff fbe8 	bl	8001e78 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7fe fd56 	bl	8001158 <HAL_GetTick>
 80026ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80026b0:	f7fe fd52 	bl	8001158 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e183      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80026c2:	f7ff fbea 	bl	8001e9a <LL_RCC_LSI1_IsReady>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f1      	bne.n	80026b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d05b      	beq.n	8002790 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026d8:	4ba7      	ldr	r3, [pc, #668]	@ (8002978 <HAL_RCC_OscConfig+0x688>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d114      	bne.n	800270e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80026e4:	f7ff fa88 	bl	8001bf8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e8:	f7fe fd36 	bl	8001158 <HAL_GetTick>
 80026ec:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f0:	f7fe fd32 	bl	8001158 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e163      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002702:	4b9d      	ldr	r3, [pc, #628]	@ (8002978 <HAL_RCC_OscConfig+0x688>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d102      	bne.n	800271c <HAL_RCC_OscConfig+0x42c>
 8002716:	f7ff fb48 	bl	8001daa <LL_RCC_LSE_Enable>
 800271a:	e00c      	b.n	8002736 <HAL_RCC_OscConfig+0x446>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b05      	cmp	r3, #5
 8002722:	d104      	bne.n	800272e <HAL_RCC_OscConfig+0x43e>
 8002724:	f7ff fb63 	bl	8001dee <LL_RCC_LSE_EnableBypass>
 8002728:	f7ff fb3f 	bl	8001daa <LL_RCC_LSE_Enable>
 800272c:	e003      	b.n	8002736 <HAL_RCC_OscConfig+0x446>
 800272e:	f7ff fb4d 	bl	8001dcc <LL_RCC_LSE_Disable>
 8002732:	f7ff fb6d 	bl	8001e10 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d014      	beq.n	8002768 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273e:	f7fe fd0b 	bl	8001158 <HAL_GetTick>
 8002742:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002744:	e00a      	b.n	800275c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7fe fd07 	bl	8001158 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002754:	4293      	cmp	r3, r2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e136      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800275c:	f7ff fb69 	bl	8001e32 <LL_RCC_LSE_IsReady>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0ef      	beq.n	8002746 <HAL_RCC_OscConfig+0x456>
 8002766:	e013      	b.n	8002790 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002768:	f7fe fcf6 	bl	8001158 <HAL_GetTick>
 800276c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800276e:	e00a      	b.n	8002786 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002770:	f7fe fcf2 	bl	8001158 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e121      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002786:	f7ff fb54 	bl	8001e32 <LL_RCC_LSE_IsReady>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1ef      	bne.n	8002770 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002798:	2b00      	cmp	r3, #0
 800279a:	d02c      	beq.n	80027f6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d014      	beq.n	80027ce <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027a4:	f7ff facd 	bl	8001d42 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7fe fcd6 	bl	8001158 <HAL_GetTick>
 80027ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027b0:	f7fe fcd2 	bl	8001158 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e103      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80027c2:	f7ff fae0 	bl	8001d86 <LL_RCC_HSI48_IsReady>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f1      	beq.n	80027b0 <HAL_RCC_OscConfig+0x4c0>
 80027cc:	e013      	b.n	80027f6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027ce:	f7ff fac9 	bl	8001d64 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d2:	f7fe fcc1 	bl	8001158 <HAL_GetTick>
 80027d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027da:	f7fe fcbd 	bl	8001158 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e0ee      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80027ec:	f7ff facb 	bl	8001d86 <LL_RCC_HSI48_IsReady>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f1      	bne.n	80027da <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 80e4 	beq.w	80029c8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002800:	f7ff fc29 	bl	8002056 <LL_RCC_GetSysClkSource>
 8002804:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002806:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002812:	2b02      	cmp	r3, #2
 8002814:	f040 80b4 	bne.w	8002980 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0203 	and.w	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	429a      	cmp	r2, r3
 8002824:	d123      	bne.n	800286e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d11c      	bne.n	800286e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d114      	bne.n	800286e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d10d      	bne.n	800286e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d106      	bne.n	800286e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800286a:	429a      	cmp	r2, r3
 800286c:	d05d      	beq.n	800292a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	2b0c      	cmp	r3, #12
 8002872:	d058      	beq.n	8002926 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002874:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e0a1      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002886:	f7ff fc84 	bl	8002192 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800288a:	f7fe fc65 	bl	8001158 <HAL_GetTick>
 800288e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002892:	f7fe fc61 	bl	8001158 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e092      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1ef      	bne.n	8002892 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	4b30      	ldr	r3, [pc, #192]	@ (800297c <HAL_RCC_OscConfig+0x68c>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028c4:	4311      	orrs	r1, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028ca:	0212      	lsls	r2, r2, #8
 80028cc:	4311      	orrs	r1, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028d2:	4311      	orrs	r1, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80028d8:	4311      	orrs	r1, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80028de:	430a      	orrs	r2, r1
 80028e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028e8:	f7ff fc44 	bl	8002174 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028fc:	f7fe fc2c 	bl	8001158 <HAL_GetTick>
 8002900:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002904:	f7fe fc28 	bl	8001158 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e059      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0ef      	beq.n	8002904 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002924:	e050      	b.n	80029c8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e04f      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d147      	bne.n	80029c8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002938:	f7ff fc1c 	bl	8002174 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800293c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800294a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800294c:	f7fe fc04 	bl	8001158 <HAL_GetTick>
 8002950:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002954:	f7fe fc00 	bl	8001158 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e031      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ef      	beq.n	8002954 <HAL_RCC_OscConfig+0x664>
 8002974:	e028      	b.n	80029c8 <HAL_RCC_OscConfig+0x6d8>
 8002976:	bf00      	nop
 8002978:	58000400 	.word	0x58000400
 800297c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	2b0c      	cmp	r3, #12
 8002984:	d01e      	beq.n	80029c4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002986:	f7ff fc04 	bl	8002192 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298a:	f7fe fbe5 	bl	8001158 <HAL_GetTick>
 800298e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002992:	f7fe fbe1 	bl	8001158 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e012      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1ef      	bne.n	8002992 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80029b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029bc:	4b05      	ldr	r3, [pc, #20]	@ (80029d4 <HAL_RCC_OscConfig+0x6e4>)
 80029be:	4013      	ands	r3, r2
 80029c0:	60cb      	str	r3, [r1, #12]
 80029c2:	e001      	b.n	80029c8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3734      	adds	r7, #52	@ 0x34
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd90      	pop	{r4, r7, pc}
 80029d2:	bf00      	nop
 80029d4:	eefefffc 	.word	0xeefefffc

080029d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e12d      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029ec:	4b98      	ldr	r3, [pc, #608]	@ (8002c50 <HAL_RCC_ClockConfig+0x278>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d91b      	bls.n	8002a32 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b95      	ldr	r3, [pc, #596]	@ (8002c50 <HAL_RCC_ClockConfig+0x278>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 0207 	bic.w	r2, r3, #7
 8002a02:	4993      	ldr	r1, [pc, #588]	@ (8002c50 <HAL_RCC_ClockConfig+0x278>)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a0a:	f7fe fba5 	bl	8001158 <HAL_GetTick>
 8002a0e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a12:	f7fe fba1 	bl	8001158 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e111      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a24:	4b8a      	ldr	r3, [pc, #552]	@ (8002c50 <HAL_RCC_ClockConfig+0x278>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d1ef      	bne.n	8002a12 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d016      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fb13 	bl	800206e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a48:	f7fe fb86 	bl	8001158 <HAL_GetTick>
 8002a4c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a50:	f7fe fb82 	bl	8001158 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e0f2      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a62:	f7ff fbe8 	bl	8002236 <LL_RCC_IsActiveFlag_HPRE>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0f1      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d016      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff fb0a 	bl	8002096 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a82:	f7fe fb69 	bl	8001158 <HAL_GetTick>
 8002a86:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a8a:	f7fe fb65 	bl	8001158 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e0d5      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a9c:	f7ff fbdd 	bl	800225a <LL_RCC_IsActiveFlag_C2HPRE>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f1      	beq.n	8002a8a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d016      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fb03 	bl	80020c2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002abc:	f7fe fb4c 	bl	8001158 <HAL_GetTick>
 8002ac0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ac4:	f7fe fb48 	bl	8001158 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e0b8      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002ad6:	f7ff fbd3 	bl	8002280 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f1      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d016      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fafd 	bl	80020f0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002af6:	f7fe fb2f 	bl	8001158 <HAL_GetTick>
 8002afa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002afe:	f7fe fb2b 	bl	8001158 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e09b      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002b10:	f7ff fbc9 	bl	80022a6 <LL_RCC_IsActiveFlag_PPRE1>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f1      	beq.n	8002afe <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d017      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff faf3 	bl	8002118 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b32:	f7fe fb11 	bl	8001158 <HAL_GetTick>
 8002b36:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b3a:	f7fe fb0d 	bl	8001158 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e07d      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b4c:	f7ff fbbd 	bl	80022ca <LL_RCC_IsActiveFlag_PPRE2>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f1      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d043      	beq.n	8002bea <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d106      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002b6a:	f7ff f893 	bl	8001c94 <LL_RCC_HSE_IsReady>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d11e      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e067      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d106      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002b80:	f7ff fb16 	bl	80021b0 <LL_RCC_PLL_IsReady>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d113      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e05c      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002b96:	f7ff f9fb 	bl	8001f90 <LL_RCC_MSI_IsReady>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d108      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e051      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002ba4:	f7ff f8a6 	bl	8001cf4 <LL_RCC_HSI_IsReady>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e04a      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fa39 	bl	800202e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bbc:	f7fe facc 	bl	8001158 <HAL_GetTick>
 8002bc0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	e00a      	b.n	8002bda <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc4:	f7fe fac8 	bl	8001158 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e036      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bda:	f7ff fa3c 	bl	8002056 <LL_RCC_GetSysClkSource>
 8002bde:	4602      	mov	r2, r0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d1ec      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bea:	4b19      	ldr	r3, [pc, #100]	@ (8002c50 <HAL_RCC_ClockConfig+0x278>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d21b      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf8:	4b15      	ldr	r3, [pc, #84]	@ (8002c50 <HAL_RCC_ClockConfig+0x278>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f023 0207 	bic.w	r2, r3, #7
 8002c00:	4913      	ldr	r1, [pc, #76]	@ (8002c50 <HAL_RCC_ClockConfig+0x278>)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c08:	f7fe faa6 	bl	8001158 <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c10:	f7fe faa2 	bl	8001158 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e012      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c22:	4b0b      	ldr	r3, [pc, #44]	@ (8002c50 <HAL_RCC_ClockConfig+0x278>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d1ef      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c30:	f000 f87e 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8002c34:	4603      	mov	r3, r0
 8002c36:	4a07      	ldr	r2, [pc, #28]	@ (8002c54 <HAL_RCC_ClockConfig+0x27c>)
 8002c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002c3a:	f7fe fa99 	bl	8001170 <HAL_GetTickPrio>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fe fa3b 	bl	80010bc <HAL_InitTick>
 8002c46:	4603      	mov	r3, r0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	58004000 	.word	0x58004000
 8002c54:	20000010 	.word	0x20000010

08002c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	b590      	push	{r4, r7, lr}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c5e:	f7ff f9fa 	bl	8002056 <LL_RCC_GetSysClkSource>
 8002c62:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10a      	bne.n	8002c80 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c6a:	f7ff f9b6 	bl	8001fda <LL_RCC_MSI_GetRange>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	4a2b      	ldr	r2, [pc, #172]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	e04b      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d102      	bne.n	8002c8c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c86:	4b28      	ldr	r3, [pc, #160]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	e045      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d10a      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c92:	f7fe ffcf 	bl	8001c34 <LL_RCC_HSE_IsEnabledDiv2>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d102      	bne.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002c9c:	4b22      	ldr	r3, [pc, #136]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e03a      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002ca2:	4b22      	ldr	r3, [pc, #136]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	e037      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002ca8:	f7ff fab9 	bl	800221e <LL_RCC_PLL_GetMainSource>
 8002cac:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d003      	beq.n	8002cbc <HAL_RCC_GetSysClockFreq+0x64>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d003      	beq.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x6a>
 8002cba:	e00d      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cbe:	60bb      	str	r3, [r7, #8]
        break;
 8002cc0:	e015      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002cc2:	f7fe ffb7 	bl	8001c34 <LL_RCC_HSE_IsEnabledDiv2>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d102      	bne.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002ccc:	4b16      	ldr	r3, [pc, #88]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cce:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002cd0:	e00d      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002cd2:	4b16      	ldr	r3, [pc, #88]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002cd4:	60bb      	str	r3, [r7, #8]
        break;
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002cd8:	f7ff f97f 	bl	8001fda <LL_RCC_MSI_GetRange>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	4a0f      	ldr	r2, [pc, #60]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cea:	60bb      	str	r3, [r7, #8]
        break;
 8002cec:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002cee:	f7ff fa71 	bl	80021d4 <LL_RCC_PLL_GetN>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	fb03 f402 	mul.w	r4, r3, r2
 8002cfa:	f7ff fa84 	bl	8002206 <LL_RCC_PLL_GetDivider>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	3301      	adds	r3, #1
 8002d04:	fbb4 f4f3 	udiv	r4, r4, r3
 8002d08:	f7ff fa71 	bl	80021ee <LL_RCC_PLL_GetR>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	0f5b      	lsrs	r3, r3, #29
 8002d10:	3301      	adds	r3, #1
 8002d12:	fbb4 f3f3 	udiv	r3, r4, r3
 8002d16:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002d18:	68fb      	ldr	r3, [r7, #12]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd90      	pop	{r4, r7, pc}
 8002d22:	bf00      	nop
 8002d24:	0800469c 	.word	0x0800469c
 8002d28:	00f42400 	.word	0x00f42400
 8002d2c:	01e84800 	.word	0x01e84800

08002d30 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d30:	b598      	push	{r3, r4, r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002d34:	f7ff ff90 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002d38:	4604      	mov	r4, r0
 8002d3a:	f7ff fa01 	bl	8002140 <LL_RCC_GetAHBPrescaler>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	4a03      	ldr	r2, [pc, #12]	@ (8002d54 <HAL_RCC_GetHCLKFreq+0x24>)
 8002d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	bd98      	pop	{r3, r4, r7, pc}
 8002d54:	0800465c 	.word	0x0800465c

08002d58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2bb0      	cmp	r3, #176	@ 0xb0
 8002d64:	d903      	bls.n	8002d6e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002d66:	4b15      	ldr	r3, [pc, #84]	@ (8002dbc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	e007      	b.n	8002d7e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	4a11      	ldr	r2, [pc, #68]	@ (8002dbc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002d7e:	f7ff f9eb 	bl	8002158 <LL_RCC_GetAHB4Prescaler>
 8002d82:	4603      	mov	r3, r0
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d96:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002da0:	0c9c      	lsrs	r4, r3, #18
 8002da2:	f7fe ff39 	bl	8001c18 <HAL_PWREx_GetVoltageRange>
 8002da6:	4603      	mov	r3, r0
 8002da8:	4619      	mov	r1, r3
 8002daa:	4620      	mov	r0, r4
 8002dac:	f000 f80c 	bl	8002dc8 <RCC_SetFlashLatency>
 8002db0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd90      	pop	{r4, r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	0800469c 	.word	0x0800469c
 8002dc0:	0800465c 	.word	0x0800465c
 8002dc4:	431bde83 	.word	0x431bde83

08002dc8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b093      	sub	sp, #76	@ 0x4c
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002dd2:	4b37      	ldr	r3, [pc, #220]	@ (8002eb0 <RCC_SetFlashLatency+0xe8>)
 8002dd4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002dd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002dde:	4a35      	ldr	r2, [pc, #212]	@ (8002eb4 <RCC_SetFlashLatency+0xec>)
 8002de0:	f107 031c 	add.w	r3, r7, #28
 8002de4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002de6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002dea:	4b33      	ldr	r3, [pc, #204]	@ (8002eb8 <RCC_SetFlashLatency+0xf0>)
 8002dec:	f107 040c 	add.w	r4, r7, #12
 8002df0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002df2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002df6:	2300      	movs	r3, #0
 8002df8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e00:	d11a      	bne.n	8002e38 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e02:	2300      	movs	r3, #0
 8002e04:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e06:	e013      	b.n	8002e30 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002e08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	3348      	adds	r3, #72	@ 0x48
 8002e0e:	443b      	add	r3, r7
 8002e10:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d807      	bhi.n	8002e2a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	3348      	adds	r3, #72	@ 0x48
 8002e20:	443b      	add	r3, r7
 8002e22:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002e26:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002e28:	e020      	b.n	8002e6c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e32:	2b03      	cmp	r3, #3
 8002e34:	d9e8      	bls.n	8002e08 <RCC_SetFlashLatency+0x40>
 8002e36:	e019      	b.n	8002e6c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e38:	2300      	movs	r3, #0
 8002e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e3c:	e013      	b.n	8002e66 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	3348      	adds	r3, #72	@ 0x48
 8002e44:	443b      	add	r3, r7
 8002e46:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d807      	bhi.n	8002e60 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	3348      	adds	r3, #72	@ 0x48
 8002e56:	443b      	add	r3, r7
 8002e58:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002e5c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002e5e:	e005      	b.n	8002e6c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e62:	3301      	adds	r3, #1
 8002e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d9e8      	bls.n	8002e3e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002e6c:	4b13      	ldr	r3, [pc, #76]	@ (8002ebc <RCC_SetFlashLatency+0xf4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f023 0207 	bic.w	r2, r3, #7
 8002e74:	4911      	ldr	r1, [pc, #68]	@ (8002ebc <RCC_SetFlashLatency+0xf4>)
 8002e76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e7c:	f7fe f96c 	bl	8001158 <HAL_GetTick>
 8002e80:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e82:	e008      	b.n	8002e96 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e84:	f7fe f968 	bl	8001158 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e007      	b.n	8002ea6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e96:	4b09      	ldr	r3, [pc, #36]	@ (8002ebc <RCC_SetFlashLatency+0xf4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d1ef      	bne.n	8002e84 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	374c      	adds	r7, #76	@ 0x4c
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd90      	pop	{r4, r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	08004630 	.word	0x08004630
 8002eb4:	08004640 	.word	0x08004640
 8002eb8:	0800464c 	.word	0x0800464c
 8002ebc:	58004000 	.word	0x58004000

08002ec0 <LL_RCC_LSE_IsEnabled>:
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <LL_RCC_LSE_IsEnabled+0x18>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <LL_RCC_LSE_IsEnabled+0x1a>
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <LL_RCC_LSE_IsReady>:
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ee8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d101      	bne.n	8002efc <LL_RCC_LSE_IsReady+0x18>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <LL_RCC_LSE_IsReady+0x1a>
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_RCC_SetRFWKPClockSource>:
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002f10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f18:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <LL_RCC_SetSMPSClockSource>:
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002f3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f42:	f023 0203 	bic.w	r2, r3, #3
 8002f46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <LL_RCC_SetSMPSPrescaler>:
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002f64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <LL_RCC_SetUSARTClockSource>:
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002f8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f94:	f023 0203 	bic.w	r2, r3, #3
 8002f98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <LL_RCC_SetLPUARTClockSource>:
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002fb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002fc4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <LL_RCC_SetI2CClockSource>:
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002fe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fe8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	091b      	lsrs	r3, r3, #4
 8002ff0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003000:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <LL_RCC_SetLPTIMClockSource>:
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800301e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003022:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	0c1b      	lsrs	r3, r3, #16
 800302a:	041b      	lsls	r3, r3, #16
 800302c:	43db      	mvns	r3, r3
 800302e:	401a      	ands	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	041b      	lsls	r3, r3, #16
 8003034:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <LL_RCC_SetSAIClockSource>:
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003052:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800305e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <LL_RCC_SetRNGClockSource>:
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800307e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003086:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800308a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_RCC_SetCLK48ClockSource>:
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4313      	orrs	r3, r2
 80030be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <LL_RCC_SetUSBClockSource>:
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff ffe3 	bl	80030a2 <LL_RCC_SetCLK48ClockSource>
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <LL_RCC_SetADCClockSource>:
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80030ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80030f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <LL_RCC_SetRTCClockSource>:
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003120:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003124:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <LL_RCC_GetRTCClockSource>:
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003148:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800314c:	4618      	mov	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <LL_RCC_ForceBackupDomainReset>:
{
 8003156:	b480      	push	{r7}
 8003158:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800315a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003162:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003166:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800316a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800316e:	bf00      	nop
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800317c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003184:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003188:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800318c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <LL_RCC_PLLSAI1_Enable>:
{
 800319a:	b480      	push	{r7}
 800319c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800319e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80031ac:	6013      	str	r3, [r2, #0]
}
 80031ae:	bf00      	nop
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LL_RCC_PLLSAI1_Disable>:
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80031bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80031ca:	6013      	str	r3, [r2, #0]
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <LL_RCC_PLLSAI1_IsReady>:
{
 80031d6:	b480      	push	{r7}
 80031d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80031da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031e8:	d101      	bne.n	80031ee <LL_RCC_PLLSAI1_IsReady+0x18>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b088      	sub	sp, #32
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003202:	2300      	movs	r3, #0
 8003204:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003206:	2300      	movs	r3, #0
 8003208:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d034      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800321e:	d021      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003220:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003224:	d81b      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003226:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800322a:	d01d      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800322c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003230:	d815      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00b      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003236:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800323a:	d110      	bne.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800323c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003246:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800324a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800324c:	e00d      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3304      	adds	r3, #4
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f947 	bl	80034e6 <RCCEx_PLLSAI1_ConfigNP>
 8003258:	4603      	mov	r3, r0
 800325a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800325c:	e005      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	77fb      	strb	r3, [r7, #31]
        break;
 8003262:	e002      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003264:	bf00      	nop
 8003266:	e000      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800326a:	7ffb      	ldrb	r3, [r7, #31]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d105      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fee8 	bl	800304a <LL_RCC_SetSAIClockSource>
 800327a:	e001      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800327c:	7ffb      	ldrb	r3, [r7, #31]
 800327e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003288:	2b00      	cmp	r3, #0
 800328a:	d046      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800328c:	f7ff ff56 	bl	800313c <LL_RCC_GetRTCClockSource>
 8003290:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	429a      	cmp	r2, r3
 800329a:	d03c      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800329c:	f7fe fcac 	bl	8001bf8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d105      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff ff30 	bl	8003110 <LL_RCC_SetRTCClockSource>
 80032b0:	e02e      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80032b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ba:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80032bc:	f7ff ff4b 	bl	8003156 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80032c0:	f7ff ff5a 	bl	8003178 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	4313      	orrs	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80032d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80032dc:	f7ff fdf0 	bl	8002ec0 <LL_RCC_LSE_IsEnabled>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d114      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032e6:	f7fd ff37 	bl	8001158 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80032ec:	e00b      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ee:	f7fd ff33 	bl	8001158 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d902      	bls.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	77fb      	strb	r3, [r7, #31]
              break;
 8003304:	e004      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003306:	f7ff fded 	bl	8002ee4 <LL_RCC_LSE_IsReady>
 800330a:	4603      	mov	r3, r0
 800330c:	2b01      	cmp	r3, #1
 800330e:	d1ee      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003310:	7ffb      	ldrb	r3, [r7, #31]
 8003312:	77bb      	strb	r3, [r7, #30]
 8003314:	e001      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003316:	7ffb      	ldrb	r3, [r7, #31]
 8003318:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d004      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff fe2a 	bl	8002f84 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d004      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff fe35 	bl	8002fb0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0310 	and.w	r3, r3, #16
 800334e:	2b00      	cmp	r3, #0
 8003350:	d004      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fe5d 	bl	8003016 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0320 	and.w	r3, r3, #32
 8003364:	2b00      	cmp	r3, #0
 8003366:	d004      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff fe52 	bl	8003016 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0304 	and.w	r3, r3, #4
 800337a:	2b00      	cmp	r3, #0
 800337c:	d004      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fe2a 	bl	8002fdc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d004      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff fe1f 	bl	8002fdc <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d022      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fe8d 	bl	80030ce <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033bc:	d107      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80033be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033cc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033d6:	d10b      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3304      	adds	r3, #4
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 f8dd 	bl	800359c <RCCEx_PLLSAI1_ConfigNQ>
 80033e2:	4603      	mov	r3, r0
 80033e4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80033e6:	7ffb      	ldrb	r3, [r7, #31]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80033ec:	7ffb      	ldrb	r3, [r7, #31]
 80033ee:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d02b      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003404:	d008      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800340a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800340e:	d003      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003414:	2b00      	cmp	r3, #0
 8003416:	d105      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff fe2a 	bl	8003076 <LL_RCC_SetRNGClockSource>
 8003422:	e00a      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003428:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	2000      	movs	r0, #0
 8003430:	f7ff fe21 	bl	8003076 <LL_RCC_SetRNGClockSource>
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f7ff fe34 	bl	80030a2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003442:	d107      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003444:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800344e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003452:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800345c:	2b00      	cmp	r3, #0
 800345e:	d022      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fe3d 	bl	80030e4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800346e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003472:	d107      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800347e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003482:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003488:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800348c:	d10b      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3304      	adds	r3, #4
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f8dd 	bl	8003652 <RCCEx_PLLSAI1_ConfigNR>
 8003498:	4603      	mov	r3, r0
 800349a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800349c:	7ffb      	ldrb	r3, [r7, #31]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80034a2:	7ffb      	ldrb	r3, [r7, #31]
 80034a4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d004      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff fd26 	bl	8002f08 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d009      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff fd45 	bl	8002f5c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff fd2c 	bl	8002f34 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80034dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80034f2:	f7ff fe61 	bl	80031b8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80034f6:	f7fd fe2f 	bl	8001158 <HAL_GetTick>
 80034fa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034fc:	e009      	b.n	8003512 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034fe:	f7fd fe2b 	bl	8001158 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d902      	bls.n	8003512 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	73fb      	strb	r3, [r7, #15]
      break;
 8003510:	e004      	b.n	800351c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003512:	f7ff fe60 	bl	80031d6 <LL_RCC_PLLSAI1_IsReady>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1f0      	bne.n	80034fe <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d137      	bne.n	8003592 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003522:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	021b      	lsls	r3, r3, #8
 8003532:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003536:	4313      	orrs	r3, r2
 8003538:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800353a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800354c:	4313      	orrs	r3, r2
 800354e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003550:	f7ff fe23 	bl	800319a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003554:	f7fd fe00 	bl	8001158 <HAL_GetTick>
 8003558:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800355a:	e009      	b.n	8003570 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800355c:	f7fd fdfc 	bl	8001158 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d902      	bls.n	8003570 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	73fb      	strb	r3, [r7, #15]
        break;
 800356e:	e004      	b.n	800357a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003570:	f7ff fe31 	bl	80031d6 <LL_RCC_PLLSAI1_IsReady>
 8003574:	4603      	mov	r3, r0
 8003576:	2b01      	cmp	r3, #1
 8003578:	d1f0      	bne.n	800355c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d108      	bne.n	8003592 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800358e:	4313      	orrs	r3, r2
 8003590:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003592:	7bfb      	ldrb	r3, [r7, #15]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80035a8:	f7ff fe06 	bl	80031b8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80035ac:	f7fd fdd4 	bl	8001158 <HAL_GetTick>
 80035b0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80035b2:	e009      	b.n	80035c8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035b4:	f7fd fdd0 	bl	8001158 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d902      	bls.n	80035c8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	73fb      	strb	r3, [r7, #15]
      break;
 80035c6:	e004      	b.n	80035d2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80035c8:	f7ff fe05 	bl	80031d6 <LL_RCC_PLLSAI1_IsReady>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d137      	bne.n	8003648 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80035d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	021b      	lsls	r3, r3, #8
 80035e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035ec:	4313      	orrs	r3, r2
 80035ee:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80035f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003602:	4313      	orrs	r3, r2
 8003604:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003606:	f7ff fdc8 	bl	800319a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800360a:	f7fd fda5 	bl	8001158 <HAL_GetTick>
 800360e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003610:	e009      	b.n	8003626 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003612:	f7fd fda1 	bl	8001158 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d902      	bls.n	8003626 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	73fb      	strb	r3, [r7, #15]
        break;
 8003624:	e004      	b.n	8003630 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003626:	f7ff fdd6 	bl	80031d6 <LL_RCC_PLLSAI1_IsReady>
 800362a:	4603      	mov	r3, r0
 800362c:	2b01      	cmp	r3, #1
 800362e:	d1f0      	bne.n	8003612 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d108      	bne.n	8003648 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003644:	4313      	orrs	r3, r2
 8003646:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003648:	7bfb      	ldrb	r3, [r7, #15]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800365e:	f7ff fdab 	bl	80031b8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003662:	f7fd fd79 	bl	8001158 <HAL_GetTick>
 8003666:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003668:	e009      	b.n	800367e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800366a:	f7fd fd75 	bl	8001158 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d902      	bls.n	800367e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	73fb      	strb	r3, [r7, #15]
      break;
 800367c:	e004      	b.n	8003688 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800367e:	f7ff fdaa 	bl	80031d6 <LL_RCC_PLLSAI1_IsReady>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f0      	bne.n	800366a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d137      	bne.n	80036fe <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800368e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036a2:	4313      	orrs	r3, r2
 80036a4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80036a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036b8:	4313      	orrs	r3, r2
 80036ba:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80036bc:	f7ff fd6d 	bl	800319a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c0:	f7fd fd4a 	bl	8001158 <HAL_GetTick>
 80036c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80036c6:	e009      	b.n	80036dc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036c8:	f7fd fd46 	bl	8001158 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d902      	bls.n	80036dc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	73fb      	strb	r3, [r7, #15]
        break;
 80036da:	e004      	b.n	80036e6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80036dc:	f7ff fd7b 	bl	80031d6 <LL_RCC_PLLSAI1_IsReady>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d1f0      	bne.n	80036c8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d108      	bne.n	80036fe <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80036ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036fa:	4313      	orrs	r3, r2
 80036fc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e07a      	b.n	8003810 <HAL_RTC_Init+0x108>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7fc ffc8 	bl	80006c4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b10      	cmp	r3, #16
 8003748:	d058      	beq.n	80037fc <HAL_RTC_Init+0xf4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	22ca      	movs	r2, #202	@ 0xca
 8003750:	625a      	str	r2, [r3, #36]	@ 0x24
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2253      	movs	r2, #83	@ 0x53
 8003758:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f882 	bl	8003864 <RTC_EnterInitMode>
 8003760:	4603      	mov	r3, r0
 8003762:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003764:	7bfb      	ldrb	r3, [r7, #15]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d12c      	bne.n	80037c4 <HAL_RTC_Init+0xbc>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003778:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800377c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6899      	ldr	r1, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	68d2      	ldr	r2, [r2, #12]
 80037a4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6919      	ldr	r1, [r3, #16]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	041a      	lsls	r2, r3, #16
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f88a 	bl	80038d4 <RTC_ExitInitMode>
 80037c0:	4603      	mov	r3, r0
 80037c2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d113      	bne.n	80037f2 <HAL_RTC_Init+0xea>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0203 	bic.w	r2, r2, #3
 80037d8:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69da      	ldr	r2, [r3, #28]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	22ff      	movs	r2, #255	@ 0xff
 80037f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80037fa:	e001      	b.n	8003800 <HAL_RTC_Init+0xf8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003800:	7bfb      	ldrb	r3, [r7, #15]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d103      	bne.n	800380e <HAL_RTC_Init+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800380e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a0d      	ldr	r2, [pc, #52]	@ (8003860 <HAL_RTC_WaitForSynchro+0x48>)
 800382a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800382c:	f7fd fc94 	bl	8001158 <HAL_GetTick>
 8003830:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003832:	e009      	b.n	8003848 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003834:	f7fd fc90 	bl	8001158 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003842:	d901      	bls.n	8003848 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e007      	b.n	8003858 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0320 	and.w	r3, r3, #32
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0ee      	beq.n	8003834 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	0001ff5f 	.word	0x0001ff5f

08003864 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003870:	2300      	movs	r3, #0
 8003872:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d123      	bne.n	80038ca <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003890:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003892:	f7fd fc61 	bl	8001158 <HAL_GetTick>
 8003896:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003898:	e00d      	b.n	80038b6 <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800389a:	f7fd fc5d 	bl	8001158 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038a8:	d905      	bls.n	80038b6 <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2204      	movs	r2, #4
 80038ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d102      	bne.n	80038ca <RTC_EnterInitMode+0x66>
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d1e7      	bne.n	800389a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038ee:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10b      	bne.n	8003916 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff ff8a 	bl	8003818 <HAL_RTC_WaitForSynchro>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d005      	beq.n	8003916 <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2204      	movs	r2, #4
 800390e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003916:	7bfb      	ldrb	r3, [r7, #15]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_RTCEx_SetWakeUpTimer+0x1e>
 800393a:	2302      	movs	r3, #2
 800393c:	e092      	b.n	8003a64 <HAL_RTCEx_SetWakeUpTimer+0x144>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2202      	movs	r2, #2
 800394a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	22ca      	movs	r2, #202	@ 0xca
 8003954:	625a      	str	r2, [r3, #36]	@ 0x24
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2253      	movs	r2, #83	@ 0x53
 800395c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003968:	2b00      	cmp	r3, #0
 800396a:	d020      	beq.n	80039ae <HAL_RTCEx_SetWakeUpTimer+0x8e>
  {
    tickstart = HAL_GetTick();
 800396c:	f7fd fbf4 	bl	8001158 <HAL_GetTick>
 8003970:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8003972:	e015      	b.n	80039a0 <HAL_RTCEx_SetWakeUpTimer+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003974:	f7fd fbf0 	bl	8001158 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003982:	d90d      	bls.n	80039a0 <HAL_RTCEx_SetWakeUpTimer+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	22ff      	movs	r2, #255	@ 0xff
 800398a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2203      	movs	r2, #3
 8003990:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e061      	b.n	8003a64 <HAL_RTCEx_SetWakeUpTimer+0x144>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e2      	bne.n	8003974 <HAL_RTCEx_SetWakeUpTimer+0x54>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039bc:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80039ce:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039d0:	f7fd fbc2 	bl	8001158 <HAL_GetTick>
 80039d4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80039d6:	e015      	b.n	8003a04 <HAL_RTCEx_SetWakeUpTimer+0xe4>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80039d8:	f7fd fbbe 	bl	8001158 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80039e6:	d90d      	bls.n	8003a04 <HAL_RTCEx_SetWakeUpTimer+0xe4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	22ff      	movs	r2, #255	@ 0xff
 80039ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2203      	movs	r2, #3
 80039f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e02f      	b.n	8003a64 <HAL_RTCEx_SetWakeUpTimer+0x144>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0e2      	beq.n	80039d8 <HAL_RTCEx_SetWakeUpTimer+0xb8>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0207 	bic.w	r2, r2, #7
 8003a20:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6899      	ldr	r1, [r3, #8]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a48:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	22ff      	movs	r2, #255	@ 0xff
 8003a50:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e095      	b.n	8003baa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d108      	bne.n	8003a98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a8e:	d009      	beq.n	8003aa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	61da      	str	r2, [r3, #28]
 8003a96:	e005      	b.n	8003aa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fc fe2e 	bl	8000720 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ada:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ae4:	d902      	bls.n	8003aec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	e002      	b.n	8003af2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003aec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003af0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003afa:	d007      	beq.n	8003b0c <HAL_SPI_Init+0xa0>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b04:	d002      	beq.n	8003b0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4e:	ea42 0103 	orr.w	r1, r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b56:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	0c1b      	lsrs	r3, r3, #16
 8003b68:	f003 0204 	and.w	r2, r3, #4
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003b88:	ea42 0103 	orr.w	r1, r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b088      	sub	sp, #32
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	603b      	str	r3, [r7, #0]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bc2:	f7fd fac9 	bl	8001158 <HAL_GetTick>
 8003bc6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003bc8:	88fb      	ldrh	r3, [r7, #6]
 8003bca:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d001      	beq.n	8003bdc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e15c      	b.n	8003e96 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <HAL_SPI_Transmit+0x36>
 8003be2:	88fb      	ldrh	r3, [r7, #6]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e154      	b.n	8003e96 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d101      	bne.n	8003bfa <HAL_SPI_Transmit+0x48>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	e14d      	b.n	8003e96 <HAL_SPI_Transmit+0x2e4>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2203      	movs	r2, #3
 8003c06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	88fa      	ldrh	r2, [r7, #6]
 8003c1a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	88fa      	ldrh	r2, [r7, #6]
 8003c20:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c4c:	d10f      	bne.n	8003c6e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c78:	2b40      	cmp	r3, #64	@ 0x40
 8003c7a:	d007      	beq.n	8003c8c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c94:	d952      	bls.n	8003d3c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <HAL_SPI_Transmit+0xf2>
 8003c9e:	8b7b      	ldrh	r3, [r7, #26]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d145      	bne.n	8003d30 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca8:	881a      	ldrh	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb4:	1c9a      	adds	r2, r3, #2
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cc8:	e032      	b.n	8003d30 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d112      	bne.n	8003cfe <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cdc:	881a      	ldrh	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce8:	1c9a      	adds	r2, r3, #2
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003cfc:	e018      	b.n	8003d30 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cfe:	f7fd fa2b 	bl	8001158 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d803      	bhi.n	8003d16 <HAL_SPI_Transmit+0x164>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d14:	d102      	bne.n	8003d1c <HAL_SPI_Transmit+0x16a>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d109      	bne.n	8003d30 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e0b2      	b.n	8003e96 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1c7      	bne.n	8003cca <HAL_SPI_Transmit+0x118>
 8003d3a:	e083      	b.n	8003e44 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <HAL_SPI_Transmit+0x198>
 8003d44:	8b7b      	ldrh	r3, [r7, #26]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d177      	bne.n	8003e3a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d912      	bls.n	8003d7a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d58:	881a      	ldrh	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d64:	1c9a      	adds	r2, r3, #2
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b02      	subs	r3, #2
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d78:	e05f      	b.n	8003e3a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	330c      	adds	r3, #12
 8003d84:	7812      	ldrb	r2, [r2, #0]
 8003d86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003da0:	e04b      	b.n	8003e3a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d12b      	bne.n	8003e08 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d912      	bls.n	8003de0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dbe:	881a      	ldrh	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dca:	1c9a      	adds	r2, r3, #2
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b02      	subs	r3, #2
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003dde:	e02c      	b.n	8003e3a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	330c      	adds	r3, #12
 8003dea:	7812      	ldrb	r2, [r2, #0]
 8003dec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e06:	e018      	b.n	8003e3a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e08:	f7fd f9a6 	bl	8001158 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d803      	bhi.n	8003e20 <HAL_SPI_Transmit+0x26e>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1e:	d102      	bne.n	8003e26 <HAL_SPI_Transmit+0x274>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d109      	bne.n	8003e3a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e02d      	b.n	8003e96 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1ae      	bne.n	8003da2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e44:	69fa      	ldr	r2, [r7, #28]
 8003e46:	6839      	ldr	r1, [r7, #0]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 fb65 	bl	8004518 <SPI_EndRxTxTransaction>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10a      	bne.n	8003e78 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003e94:	2300      	movs	r3, #0
  }
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3720      	adds	r7, #32
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b08a      	sub	sp, #40	@ 0x28
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	60f8      	str	r0, [r7, #12]
 8003ea6:	60b9      	str	r1, [r7, #8]
 8003ea8:	607a      	str	r2, [r7, #4]
 8003eaa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003eac:	2301      	movs	r3, #1
 8003eae:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eb0:	f7fd f952 	bl	8001158 <HAL_GetTick>
 8003eb4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ebc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003ec4:	887b      	ldrh	r3, [r7, #2]
 8003ec6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003ec8:	887b      	ldrh	r3, [r7, #2]
 8003eca:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ecc:	7ffb      	ldrb	r3, [r7, #31]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d00c      	beq.n	8003eec <HAL_SPI_TransmitReceive+0x4e>
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ed8:	d106      	bne.n	8003ee8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d102      	bne.n	8003ee8 <HAL_SPI_TransmitReceive+0x4a>
 8003ee2:	7ffb      	ldrb	r3, [r7, #31]
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d001      	beq.n	8003eec <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e1f3      	b.n	80042d4 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d005      	beq.n	8003efe <HAL_SPI_TransmitReceive+0x60>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <HAL_SPI_TransmitReceive+0x60>
 8003ef8:	887b      	ldrh	r3, [r7, #2]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e1e8      	b.n	80042d4 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_SPI_TransmitReceive+0x72>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e1e1      	b.n	80042d4 <HAL_SPI_TransmitReceive+0x436>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d003      	beq.n	8003f2c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2205      	movs	r2, #5
 8003f28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	887a      	ldrh	r2, [r7, #2]
 8003f3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	887a      	ldrh	r2, [r7, #2]
 8003f44:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	887a      	ldrh	r2, [r7, #2]
 8003f52:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	887a      	ldrh	r2, [r7, #2]
 8003f58:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f6e:	d802      	bhi.n	8003f76 <HAL_SPI_TransmitReceive+0xd8>
 8003f70:	8abb      	ldrh	r3, [r7, #20]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d908      	bls.n	8003f88 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f84:	605a      	str	r2, [r3, #4]
 8003f86:	e007      	b.n	8003f98 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f96:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa2:	2b40      	cmp	r3, #64	@ 0x40
 8003fa4:	d007      	beq.n	8003fb6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fb4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fbe:	f240 8083 	bls.w	80040c8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <HAL_SPI_TransmitReceive+0x132>
 8003fca:	8afb      	ldrh	r3, [r7, #22]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d16f      	bne.n	80040b0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd4:	881a      	ldrh	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe0:	1c9a      	adds	r2, r3, #2
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ff4:	e05c      	b.n	80040b0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b02      	cmp	r3, #2
 8004002:	d11b      	bne.n	800403c <HAL_SPI_TransmitReceive+0x19e>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d016      	beq.n	800403c <HAL_SPI_TransmitReceive+0x19e>
 800400e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004010:	2b01      	cmp	r3, #1
 8004012:	d113      	bne.n	800403c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004018:	881a      	ldrh	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004024:	1c9a      	adds	r2, r3, #2
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b01      	cmp	r3, #1
 8004048:	d11c      	bne.n	8004084 <HAL_SPI_TransmitReceive+0x1e6>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d016      	beq.n	8004084 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004060:	b292      	uxth	r2, r2
 8004062:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004068:	1c9a      	adds	r2, r3, #2
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004080:	2301      	movs	r3, #1
 8004082:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004084:	f7fd f868 	bl	8001158 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004090:	429a      	cmp	r2, r3
 8004092:	d80d      	bhi.n	80040b0 <HAL_SPI_TransmitReceive+0x212>
 8004094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409a:	d009      	beq.n	80040b0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e111      	b.n	80042d4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d19d      	bne.n	8003ff6 <HAL_SPI_TransmitReceive+0x158>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d197      	bne.n	8003ff6 <HAL_SPI_TransmitReceive+0x158>
 80040c6:	e0e5      	b.n	8004294 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_SPI_TransmitReceive+0x23a>
 80040d0:	8afb      	ldrh	r3, [r7, #22]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	f040 80d1 	bne.w	800427a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d912      	bls.n	8004108 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e6:	881a      	ldrh	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f2:	1c9a      	adds	r2, r3, #2
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b02      	subs	r3, #2
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004106:	e0b8      	b.n	800427a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	330c      	adds	r3, #12
 8004112:	7812      	ldrb	r2, [r2, #0]
 8004114:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800412e:	e0a4      	b.n	800427a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b02      	cmp	r3, #2
 800413c:	d134      	bne.n	80041a8 <HAL_SPI_TransmitReceive+0x30a>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004142:	b29b      	uxth	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d02f      	beq.n	80041a8 <HAL_SPI_TransmitReceive+0x30a>
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	2b01      	cmp	r3, #1
 800414c:	d12c      	bne.n	80041a8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b01      	cmp	r3, #1
 8004156:	d912      	bls.n	800417e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800415c:	881a      	ldrh	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004168:	1c9a      	adds	r2, r3, #2
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b02      	subs	r3, #2
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800417c:	e012      	b.n	80041a4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	330c      	adds	r3, #12
 8004188:	7812      	ldrb	r2, [r2, #0]
 800418a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d148      	bne.n	8004248 <HAL_SPI_TransmitReceive+0x3aa>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d042      	beq.n	8004248 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d923      	bls.n	8004216 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d8:	b292      	uxth	r2, r2
 80041da:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e0:	1c9a      	adds	r2, r3, #2
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b02      	subs	r3, #2
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2b01      	cmp	r3, #1
 8004202:	d81f      	bhi.n	8004244 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004212:	605a      	str	r2, [r3, #4]
 8004214:	e016      	b.n	8004244 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f103 020c 	add.w	r2, r3, #12
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004222:	7812      	ldrb	r2, [r2, #0]
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004238:	b29b      	uxth	r3, r3
 800423a:	3b01      	subs	r3, #1
 800423c:	b29a      	uxth	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004244:	2301      	movs	r3, #1
 8004246:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004248:	f7fc ff86 	bl	8001158 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004254:	429a      	cmp	r2, r3
 8004256:	d803      	bhi.n	8004260 <HAL_SPI_TransmitReceive+0x3c2>
 8004258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425e:	d102      	bne.n	8004266 <HAL_SPI_TransmitReceive+0x3c8>
 8004260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004262:	2b00      	cmp	r3, #0
 8004264:	d109      	bne.n	800427a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e02c      	b.n	80042d4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800427e:	b29b      	uxth	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	f47f af55 	bne.w	8004130 <HAL_SPI_TransmitReceive+0x292>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	f47f af4e 	bne.w	8004130 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004294:	6a3a      	ldr	r2, [r7, #32]
 8004296:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f93d 	bl	8004518 <SPI_EndRxTxTransaction>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d008      	beq.n	80042b6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e00e      	b.n	80042d4 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80042d2:	2300      	movs	r3, #0
  }
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3728      	adds	r7, #40	@ 0x28
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	4613      	mov	r3, r2
 80042ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042ec:	f7fc ff34 	bl	8001158 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	4413      	add	r3, r2
 80042fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042fc:	f7fc ff2c 	bl	8001158 <HAL_GetTick>
 8004300:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004302:	4b39      	ldr	r3, [pc, #228]	@ (80043e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	015b      	lsls	r3, r3, #5
 8004308:	0d1b      	lsrs	r3, r3, #20
 800430a:	69fa      	ldr	r2, [r7, #28]
 800430c:	fb02 f303 	mul.w	r3, r2, r3
 8004310:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004312:	e055      	b.n	80043c0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431a:	d051      	beq.n	80043c0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800431c:	f7fc ff1c 	bl	8001158 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	69fa      	ldr	r2, [r7, #28]
 8004328:	429a      	cmp	r2, r3
 800432a:	d902      	bls.n	8004332 <SPI_WaitFlagStateUntilTimeout+0x56>
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d13d      	bne.n	80043ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004340:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800434a:	d111      	bne.n	8004370 <SPI_WaitFlagStateUntilTimeout+0x94>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004354:	d004      	beq.n	8004360 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800435e:	d107      	bne.n	8004370 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800436e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004374:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004378:	d10f      	bne.n	800439a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004398:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e018      	b.n	80043e0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d102      	bne.n	80043ba <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	61fb      	str	r3, [r7, #28]
 80043b8:	e002      	b.n	80043c0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	3b01      	subs	r3, #1
 80043be:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	4013      	ands	r3, r2
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	bf0c      	ite	eq
 80043d0:	2301      	moveq	r3, #1
 80043d2:	2300      	movne	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	461a      	mov	r2, r3
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d19a      	bne.n	8004314 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3720      	adds	r7, #32
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20000010 	.word	0x20000010

080043ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08a      	sub	sp, #40	@ 0x28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80043fa:	2300      	movs	r3, #0
 80043fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80043fe:	f7fc feab 	bl	8001158 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004406:	1a9b      	subs	r3, r3, r2
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	4413      	add	r3, r2
 800440c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800440e:	f7fc fea3 	bl	8001158 <HAL_GetTick>
 8004412:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	330c      	adds	r3, #12
 800441a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800441c:	4b3d      	ldr	r3, [pc, #244]	@ (8004514 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	00da      	lsls	r2, r3, #3
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	0d1b      	lsrs	r3, r3, #20
 800442c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800442e:	fb02 f303 	mul.w	r3, r2, r3
 8004432:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004434:	e061      	b.n	80044fa <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800443c:	d107      	bne.n	800444e <SPI_WaitFifoStateUntilTimeout+0x62>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d104      	bne.n	800444e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800444c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004454:	d051      	beq.n	80044fa <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004456:	f7fc fe7f 	bl	8001158 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004462:	429a      	cmp	r2, r3
 8004464:	d902      	bls.n	800446c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004468:	2b00      	cmp	r3, #0
 800446a:	d13d      	bne.n	80044e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800447a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004484:	d111      	bne.n	80044aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800448e:	d004      	beq.n	800449a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004498:	d107      	bne.n	80044aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044b2:	d10f      	bne.n	80044d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e011      	b.n	800450c <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d102      	bne.n	80044f4 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80044f2:	e002      	b.n	80044fa <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4013      	ands	r3, r2
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	429a      	cmp	r2, r3
 8004508:	d195      	bne.n	8004436 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3728      	adds	r7, #40	@ 0x28
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	20000010 	.word	0x20000010

08004518 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af02      	add	r7, sp, #8
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2200      	movs	r2, #0
 800452c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f7ff ff5b 	bl	80043ec <SPI_WaitFifoStateUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d007      	beq.n	800454c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004540:	f043 0220 	orr.w	r2, r3, #32
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e027      	b.n	800459c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2200      	movs	r2, #0
 8004554:	2180      	movs	r1, #128	@ 0x80
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f7ff fec0 	bl	80042dc <SPI_WaitFlagStateUntilTimeout>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d007      	beq.n	8004572 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004566:	f043 0220 	orr.w	r2, r3, #32
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e014      	b.n	800459c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2200      	movs	r2, #0
 800457a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f7ff ff34 	bl	80043ec <SPI_WaitFifoStateUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d007      	beq.n	800459a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800458e:	f043 0220 	orr.w	r2, r3, #32
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e000      	b.n	800459c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <memset>:
 80045a4:	4402      	add	r2, r0
 80045a6:	4603      	mov	r3, r0
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d100      	bne.n	80045ae <memset+0xa>
 80045ac:	4770      	bx	lr
 80045ae:	f803 1b01 	strb.w	r1, [r3], #1
 80045b2:	e7f9      	b.n	80045a8 <memset+0x4>

080045b4 <__libc_init_array>:
 80045b4:	b570      	push	{r4, r5, r6, lr}
 80045b6:	4d0d      	ldr	r5, [pc, #52]	@ (80045ec <__libc_init_array+0x38>)
 80045b8:	4c0d      	ldr	r4, [pc, #52]	@ (80045f0 <__libc_init_array+0x3c>)
 80045ba:	1b64      	subs	r4, r4, r5
 80045bc:	10a4      	asrs	r4, r4, #2
 80045be:	2600      	movs	r6, #0
 80045c0:	42a6      	cmp	r6, r4
 80045c2:	d109      	bne.n	80045d8 <__libc_init_array+0x24>
 80045c4:	4d0b      	ldr	r5, [pc, #44]	@ (80045f4 <__libc_init_array+0x40>)
 80045c6:	4c0c      	ldr	r4, [pc, #48]	@ (80045f8 <__libc_init_array+0x44>)
 80045c8:	f000 f826 	bl	8004618 <_init>
 80045cc:	1b64      	subs	r4, r4, r5
 80045ce:	10a4      	asrs	r4, r4, #2
 80045d0:	2600      	movs	r6, #0
 80045d2:	42a6      	cmp	r6, r4
 80045d4:	d105      	bne.n	80045e2 <__libc_init_array+0x2e>
 80045d6:	bd70      	pop	{r4, r5, r6, pc}
 80045d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045dc:	4798      	blx	r3
 80045de:	3601      	adds	r6, #1
 80045e0:	e7ee      	b.n	80045c0 <__libc_init_array+0xc>
 80045e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e6:	4798      	blx	r3
 80045e8:	3601      	adds	r6, #1
 80045ea:	e7f2      	b.n	80045d2 <__libc_init_array+0x1e>
 80045ec:	080046dc 	.word	0x080046dc
 80045f0:	080046dc 	.word	0x080046dc
 80045f4:	080046dc 	.word	0x080046dc
 80045f8:	080046e0 	.word	0x080046e0

080045fc <memcpy>:
 80045fc:	440a      	add	r2, r1
 80045fe:	4291      	cmp	r1, r2
 8004600:	f100 33ff 	add.w	r3, r0, #4294967295
 8004604:	d100      	bne.n	8004608 <memcpy+0xc>
 8004606:	4770      	bx	lr
 8004608:	b510      	push	{r4, lr}
 800460a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800460e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004612:	4291      	cmp	r1, r2
 8004614:	d1f9      	bne.n	800460a <memcpy+0xe>
 8004616:	bd10      	pop	{r4, pc}

08004618 <_init>:
 8004618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461a:	bf00      	nop
 800461c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461e:	bc08      	pop	{r3}
 8004620:	469e      	mov	lr, r3
 8004622:	4770      	bx	lr

08004624 <_fini>:
 8004624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004626:	bf00      	nop
 8004628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462a:	bc08      	pop	{r3}
 800462c:	469e      	mov	lr, r3
 800462e:	4770      	bx	lr
