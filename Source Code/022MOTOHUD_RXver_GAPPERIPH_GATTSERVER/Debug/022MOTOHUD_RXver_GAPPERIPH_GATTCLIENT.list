
022MOTOHUD_RXver_GAPPERIPH_GATTCLIENT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df88  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001da4  0800e0c8  0800e0c8  0000f0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fe6c  0800fe6c  00010e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fe74  0800fe74  00010e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800fe78  0800fe78  00010e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000488  20000008  0800fe7c  00011008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000490  08010304  00011490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200004c8  08010339  000114c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001594  200004dc  0801034a  000114dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a70  0801034a  00011a70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00013000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00013000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0801034a  000121e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00034298  00000000  00000000  00012a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006fb6  00000000  00000000  00046d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002e30  00000000  00000000  0004dce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002362  00000000  00000000  00050b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002fd8b  00000000  00000000  00052e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00036ce5  00000000  00000000  00082c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010b2e3  00000000  00000000  000b98ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001c4bcd  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000cb14  00000000  00000000  001c4c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000088  00000000  00000000  001d1724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200004dc 	.word	0x200004dc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e0b0 	.word	0x0800e0b0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200004e0 	.word	0x200004e0
 800017c:	0800e0b0 	.word	0x0800e0b0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295
 800080c:	f04f 30ff 	movne.w	r0, #4294967295
 8000810:	f000 b988 	b.w	8000b24 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9d08      	ldr	r5, [sp, #32]
 8000832:	468e      	mov	lr, r1
 8000834:	4604      	mov	r4, r0
 8000836:	4688      	mov	r8, r1
 8000838:	2b00      	cmp	r3, #0
 800083a:	d14a      	bne.n	80008d2 <__udivmoddi4+0xa6>
 800083c:	428a      	cmp	r2, r1
 800083e:	4617      	mov	r7, r2
 8000840:	d962      	bls.n	8000908 <__udivmoddi4+0xdc>
 8000842:	fab2 f682 	clz	r6, r2
 8000846:	b14e      	cbz	r6, 800085c <__udivmoddi4+0x30>
 8000848:	f1c6 0320 	rsb	r3, r6, #32
 800084c:	fa01 f806 	lsl.w	r8, r1, r6
 8000850:	fa20 f303 	lsr.w	r3, r0, r3
 8000854:	40b7      	lsls	r7, r6
 8000856:	ea43 0808 	orr.w	r8, r3, r8
 800085a:	40b4      	lsls	r4, r6
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	fa1f fc87 	uxth.w	ip, r7
 8000864:	fbb8 f1fe 	udiv	r1, r8, lr
 8000868:	0c23      	lsrs	r3, r4, #16
 800086a:	fb0e 8811 	mls	r8, lr, r1, r8
 800086e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000872:	fb01 f20c 	mul.w	r2, r1, ip
 8000876:	429a      	cmp	r2, r3
 8000878:	d909      	bls.n	800088e <__udivmoddi4+0x62>
 800087a:	18fb      	adds	r3, r7, r3
 800087c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000880:	f080 80ea 	bcs.w	8000a58 <__udivmoddi4+0x22c>
 8000884:	429a      	cmp	r2, r3
 8000886:	f240 80e7 	bls.w	8000a58 <__udivmoddi4+0x22c>
 800088a:	3902      	subs	r1, #2
 800088c:	443b      	add	r3, r7
 800088e:	1a9a      	subs	r2, r3, r2
 8000890:	b2a3      	uxth	r3, r4
 8000892:	fbb2 f0fe 	udiv	r0, r2, lr
 8000896:	fb0e 2210 	mls	r2, lr, r0, r2
 800089a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800089e:	fb00 fc0c 	mul.w	ip, r0, ip
 80008a2:	459c      	cmp	ip, r3
 80008a4:	d909      	bls.n	80008ba <__udivmoddi4+0x8e>
 80008a6:	18fb      	adds	r3, r7, r3
 80008a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ac:	f080 80d6 	bcs.w	8000a5c <__udivmoddi4+0x230>
 80008b0:	459c      	cmp	ip, r3
 80008b2:	f240 80d3 	bls.w	8000a5c <__udivmoddi4+0x230>
 80008b6:	443b      	add	r3, r7
 80008b8:	3802      	subs	r0, #2
 80008ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008be:	eba3 030c 	sub.w	r3, r3, ip
 80008c2:	2100      	movs	r1, #0
 80008c4:	b11d      	cbz	r5, 80008ce <__udivmoddi4+0xa2>
 80008c6:	40f3      	lsrs	r3, r6
 80008c8:	2200      	movs	r2, #0
 80008ca:	e9c5 3200 	strd	r3, r2, [r5]
 80008ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d905      	bls.n	80008e2 <__udivmoddi4+0xb6>
 80008d6:	b10d      	cbz	r5, 80008dc <__udivmoddi4+0xb0>
 80008d8:	e9c5 0100 	strd	r0, r1, [r5]
 80008dc:	2100      	movs	r1, #0
 80008de:	4608      	mov	r0, r1
 80008e0:	e7f5      	b.n	80008ce <__udivmoddi4+0xa2>
 80008e2:	fab3 f183 	clz	r1, r3
 80008e6:	2900      	cmp	r1, #0
 80008e8:	d146      	bne.n	8000978 <__udivmoddi4+0x14c>
 80008ea:	4573      	cmp	r3, lr
 80008ec:	d302      	bcc.n	80008f4 <__udivmoddi4+0xc8>
 80008ee:	4282      	cmp	r2, r0
 80008f0:	f200 8105 	bhi.w	8000afe <__udivmoddi4+0x2d2>
 80008f4:	1a84      	subs	r4, r0, r2
 80008f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80008fa:	2001      	movs	r0, #1
 80008fc:	4690      	mov	r8, r2
 80008fe:	2d00      	cmp	r5, #0
 8000900:	d0e5      	beq.n	80008ce <__udivmoddi4+0xa2>
 8000902:	e9c5 4800 	strd	r4, r8, [r5]
 8000906:	e7e2      	b.n	80008ce <__udivmoddi4+0xa2>
 8000908:	2a00      	cmp	r2, #0
 800090a:	f000 8090 	beq.w	8000a2e <__udivmoddi4+0x202>
 800090e:	fab2 f682 	clz	r6, r2
 8000912:	2e00      	cmp	r6, #0
 8000914:	f040 80a4 	bne.w	8000a60 <__udivmoddi4+0x234>
 8000918:	1a8a      	subs	r2, r1, r2
 800091a:	0c03      	lsrs	r3, r0, #16
 800091c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000920:	b280      	uxth	r0, r0
 8000922:	b2bc      	uxth	r4, r7
 8000924:	2101      	movs	r1, #1
 8000926:	fbb2 fcfe 	udiv	ip, r2, lr
 800092a:	fb0e 221c 	mls	r2, lr, ip, r2
 800092e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000932:	fb04 f20c 	mul.w	r2, r4, ip
 8000936:	429a      	cmp	r2, r3
 8000938:	d907      	bls.n	800094a <__udivmoddi4+0x11e>
 800093a:	18fb      	adds	r3, r7, r3
 800093c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000940:	d202      	bcs.n	8000948 <__udivmoddi4+0x11c>
 8000942:	429a      	cmp	r2, r3
 8000944:	f200 80e0 	bhi.w	8000b08 <__udivmoddi4+0x2dc>
 8000948:	46c4      	mov	ip, r8
 800094a:	1a9b      	subs	r3, r3, r2
 800094c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000950:	fb0e 3312 	mls	r3, lr, r2, r3
 8000954:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000958:	fb02 f404 	mul.w	r4, r2, r4
 800095c:	429c      	cmp	r4, r3
 800095e:	d907      	bls.n	8000970 <__udivmoddi4+0x144>
 8000960:	18fb      	adds	r3, r7, r3
 8000962:	f102 30ff 	add.w	r0, r2, #4294967295
 8000966:	d202      	bcs.n	800096e <__udivmoddi4+0x142>
 8000968:	429c      	cmp	r4, r3
 800096a:	f200 80ca 	bhi.w	8000b02 <__udivmoddi4+0x2d6>
 800096e:	4602      	mov	r2, r0
 8000970:	1b1b      	subs	r3, r3, r4
 8000972:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000976:	e7a5      	b.n	80008c4 <__udivmoddi4+0x98>
 8000978:	f1c1 0620 	rsb	r6, r1, #32
 800097c:	408b      	lsls	r3, r1
 800097e:	fa22 f706 	lsr.w	r7, r2, r6
 8000982:	431f      	orrs	r7, r3
 8000984:	fa0e f401 	lsl.w	r4, lr, r1
 8000988:	fa20 f306 	lsr.w	r3, r0, r6
 800098c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000990:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000994:	4323      	orrs	r3, r4
 8000996:	fa00 f801 	lsl.w	r8, r0, r1
 800099a:	fa1f fc87 	uxth.w	ip, r7
 800099e:	fbbe f0f9 	udiv	r0, lr, r9
 80009a2:	0c1c      	lsrs	r4, r3, #16
 80009a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80009a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80009ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80009b0:	45a6      	cmp	lr, r4
 80009b2:	fa02 f201 	lsl.w	r2, r2, r1
 80009b6:	d909      	bls.n	80009cc <__udivmoddi4+0x1a0>
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	f100 3aff 	add.w	sl, r0, #4294967295
 80009be:	f080 809c 	bcs.w	8000afa <__udivmoddi4+0x2ce>
 80009c2:	45a6      	cmp	lr, r4
 80009c4:	f240 8099 	bls.w	8000afa <__udivmoddi4+0x2ce>
 80009c8:	3802      	subs	r0, #2
 80009ca:	443c      	add	r4, r7
 80009cc:	eba4 040e 	sub.w	r4, r4, lr
 80009d0:	fa1f fe83 	uxth.w	lr, r3
 80009d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80009d8:	fb09 4413 	mls	r4, r9, r3, r4
 80009dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80009e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80009e4:	45a4      	cmp	ip, r4
 80009e6:	d908      	bls.n	80009fa <__udivmoddi4+0x1ce>
 80009e8:	193c      	adds	r4, r7, r4
 80009ea:	f103 3eff 	add.w	lr, r3, #4294967295
 80009ee:	f080 8082 	bcs.w	8000af6 <__udivmoddi4+0x2ca>
 80009f2:	45a4      	cmp	ip, r4
 80009f4:	d97f      	bls.n	8000af6 <__udivmoddi4+0x2ca>
 80009f6:	3b02      	subs	r3, #2
 80009f8:	443c      	add	r4, r7
 80009fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009fe:	eba4 040c 	sub.w	r4, r4, ip
 8000a02:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a06:	4564      	cmp	r4, ip
 8000a08:	4673      	mov	r3, lr
 8000a0a:	46e1      	mov	r9, ip
 8000a0c:	d362      	bcc.n	8000ad4 <__udivmoddi4+0x2a8>
 8000a0e:	d05f      	beq.n	8000ad0 <__udivmoddi4+0x2a4>
 8000a10:	b15d      	cbz	r5, 8000a2a <__udivmoddi4+0x1fe>
 8000a12:	ebb8 0203 	subs.w	r2, r8, r3
 8000a16:	eb64 0409 	sbc.w	r4, r4, r9
 8000a1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a1e:	fa22 f301 	lsr.w	r3, r2, r1
 8000a22:	431e      	orrs	r6, r3
 8000a24:	40cc      	lsrs	r4, r1
 8000a26:	e9c5 6400 	strd	r6, r4, [r5]
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	e74f      	b.n	80008ce <__udivmoddi4+0xa2>
 8000a2e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a32:	0c01      	lsrs	r1, r0, #16
 8000a34:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a38:	b280      	uxth	r0, r0
 8000a3a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a3e:	463b      	mov	r3, r7
 8000a40:	4638      	mov	r0, r7
 8000a42:	463c      	mov	r4, r7
 8000a44:	46b8      	mov	r8, r7
 8000a46:	46be      	mov	lr, r7
 8000a48:	2620      	movs	r6, #32
 8000a4a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a4e:	eba2 0208 	sub.w	r2, r2, r8
 8000a52:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a56:	e766      	b.n	8000926 <__udivmoddi4+0xfa>
 8000a58:	4601      	mov	r1, r0
 8000a5a:	e718      	b.n	800088e <__udivmoddi4+0x62>
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	e72c      	b.n	80008ba <__udivmoddi4+0x8e>
 8000a60:	f1c6 0220 	rsb	r2, r6, #32
 8000a64:	fa2e f302 	lsr.w	r3, lr, r2
 8000a68:	40b7      	lsls	r7, r6
 8000a6a:	40b1      	lsls	r1, r6
 8000a6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000a70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a74:	430a      	orrs	r2, r1
 8000a76:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a7a:	b2bc      	uxth	r4, r7
 8000a7c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a80:	0c11      	lsrs	r1, r2, #16
 8000a82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a86:	fb08 f904 	mul.w	r9, r8, r4
 8000a8a:	40b0      	lsls	r0, r6
 8000a8c:	4589      	cmp	r9, r1
 8000a8e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a92:	b280      	uxth	r0, r0
 8000a94:	d93e      	bls.n	8000b14 <__udivmoddi4+0x2e8>
 8000a96:	1879      	adds	r1, r7, r1
 8000a98:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a9c:	d201      	bcs.n	8000aa2 <__udivmoddi4+0x276>
 8000a9e:	4589      	cmp	r9, r1
 8000aa0:	d81f      	bhi.n	8000ae2 <__udivmoddi4+0x2b6>
 8000aa2:	eba1 0109 	sub.w	r1, r1, r9
 8000aa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aaa:	fb09 f804 	mul.w	r8, r9, r4
 8000aae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ab2:	b292      	uxth	r2, r2
 8000ab4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ab8:	4542      	cmp	r2, r8
 8000aba:	d229      	bcs.n	8000b10 <__udivmoddi4+0x2e4>
 8000abc:	18ba      	adds	r2, r7, r2
 8000abe:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ac2:	d2c4      	bcs.n	8000a4e <__udivmoddi4+0x222>
 8000ac4:	4542      	cmp	r2, r8
 8000ac6:	d2c2      	bcs.n	8000a4e <__udivmoddi4+0x222>
 8000ac8:	f1a9 0102 	sub.w	r1, r9, #2
 8000acc:	443a      	add	r2, r7
 8000ace:	e7be      	b.n	8000a4e <__udivmoddi4+0x222>
 8000ad0:	45f0      	cmp	r8, lr
 8000ad2:	d29d      	bcs.n	8000a10 <__udivmoddi4+0x1e4>
 8000ad4:	ebbe 0302 	subs.w	r3, lr, r2
 8000ad8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000adc:	3801      	subs	r0, #1
 8000ade:	46e1      	mov	r9, ip
 8000ae0:	e796      	b.n	8000a10 <__udivmoddi4+0x1e4>
 8000ae2:	eba7 0909 	sub.w	r9, r7, r9
 8000ae6:	4449      	add	r1, r9
 8000ae8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000aec:	fbb1 f9fe 	udiv	r9, r1, lr
 8000af0:	fb09 f804 	mul.w	r8, r9, r4
 8000af4:	e7db      	b.n	8000aae <__udivmoddi4+0x282>
 8000af6:	4673      	mov	r3, lr
 8000af8:	e77f      	b.n	80009fa <__udivmoddi4+0x1ce>
 8000afa:	4650      	mov	r0, sl
 8000afc:	e766      	b.n	80009cc <__udivmoddi4+0x1a0>
 8000afe:	4608      	mov	r0, r1
 8000b00:	e6fd      	b.n	80008fe <__udivmoddi4+0xd2>
 8000b02:	443b      	add	r3, r7
 8000b04:	3a02      	subs	r2, #2
 8000b06:	e733      	b.n	8000970 <__udivmoddi4+0x144>
 8000b08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	e71c      	b.n	800094a <__udivmoddi4+0x11e>
 8000b10:	4649      	mov	r1, r9
 8000b12:	e79c      	b.n	8000a4e <__udivmoddi4+0x222>
 8000b14:	eba1 0109 	sub.w	r1, r1, r9
 8000b18:	46c4      	mov	ip, r8
 8000b1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b1e:	fb09 f804 	mul.w	r8, r9, r4
 8000b22:	e7c4      	b.n	8000aae <__udivmoddi4+0x282>

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <LL_EXTI_EnableIT_32_63+0x24>)
 8000b32:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000b36:	4905      	ldr	r1, [pc, #20]	@ (8000b4c <LL_EXTI_EnableIT_32_63+0x24>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	58000800 	.word	0x58000800

08000b50 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b6c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4013      	ands	r3, r2
 8000b72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b74:	68fb      	ldr	r3, [r7, #12]
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b085      	sub	sp, #20
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b8e:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000b92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ba2:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bac:	68fb      	ldr	r3, [r7, #12]
}
 8000bae:	bf00      	nop
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000bbe:	f002 fce7 	bl	8003590 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000bc2:	f002 fceb 	bl	800359c <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000bc6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000bca:	f7ff ffad 	bl	8000b28 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000bce:	f00a f8c3 	bl	800ad58 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000bd2:	f000 f821 	bl	8000c18 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000bd6:	f000 f8c1 	bl	8000d5c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000bda:	bf00      	nop
}
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000be0:	b5b0      	push	{r4, r5, r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000be6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <APPD_EnableCPU2+0x34>)
 8000be8:	1d3c      	adds	r4, r7, #4
 8000bea:	461d      	mov	r5, r3
 8000bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bf4:	c403      	stmia	r4!, {r0, r1}
 8000bf6:	8022      	strh	r2, [r4, #0]
 8000bf8:	3402      	adds	r4, #2
 8000bfa:	0c13      	lsrs	r3, r2, #16
 8000bfc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000bfe:	f009 ffdf 	bl	800abc0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	4618      	mov	r0, r3
 8000c06:	f009 fa6c 	bl	800a0e2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000c0a:	bf00      	nop
}
 8000c0c:	3720      	adds	r7, #32
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bdb0      	pop	{r4, r5, r7, pc}
 8000c12:	bf00      	nop
 8000c14:	0800e0c8 	.word	0x0800e0c8

08000c18 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c38:	2300      	movs	r3, #0
 8000c3a:	77fb      	strb	r3, [r7, #31]
 8000c3c:	e036      	b.n	8000cac <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000c3e:	7ffb      	ldrb	r3, [r7, #31]
 8000c40:	4a43      	ldr	r2, [pc, #268]	@ (8000d50 <APPD_SetCPU2GpioConfig+0x138>)
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	4413      	add	r3, r2
 8000c46:	799b      	ldrb	r3, [r3, #6]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d02c      	beq.n	8000ca6 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000c4c:	7ffb      	ldrb	r3, [r7, #31]
 8000c4e:	4a40      	ldr	r2, [pc, #256]	@ (8000d50 <APPD_SetCPU2GpioConfig+0x138>)
 8000c50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c54:	4a3f      	ldr	r2, [pc, #252]	@ (8000d54 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d01b      	beq.n	8000c92 <APPD_SetCPU2GpioConfig+0x7a>
 8000c5a:	4a3e      	ldr	r2, [pc, #248]	@ (8000d54 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d821      	bhi.n	8000ca4 <APPD_SetCPU2GpioConfig+0x8c>
 8000c60:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c64:	d003      	beq.n	8000c6e <APPD_SetCPU2GpioConfig+0x56>
 8000c66:	4a3c      	ldr	r2, [pc, #240]	@ (8000d58 <APPD_SetCPU2GpioConfig+0x140>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d009      	beq.n	8000c80 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000c6c:	e01a      	b.n	8000ca4 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000c6e:	7ffb      	ldrb	r3, [r7, #31]
 8000c70:	4a37      	ldr	r2, [pc, #220]	@ (8000d50 <APPD_SetCPU2GpioConfig+0x138>)
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	4413      	add	r3, r2
 8000c76:	889a      	ldrh	r2, [r3, #4]
 8000c78:	8bbb      	ldrh	r3, [r7, #28]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	83bb      	strh	r3, [r7, #28]
          break;
 8000c7e:	e012      	b.n	8000ca6 <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000c80:	7ffb      	ldrb	r3, [r7, #31]
 8000c82:	4a33      	ldr	r2, [pc, #204]	@ (8000d50 <APPD_SetCPU2GpioConfig+0x138>)
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	4413      	add	r3, r2
 8000c88:	889a      	ldrh	r2, [r3, #4]
 8000c8a:	8b7b      	ldrh	r3, [r7, #26]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	837b      	strh	r3, [r7, #26]
          break;
 8000c90:	e009      	b.n	8000ca6 <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000c92:	7ffb      	ldrb	r3, [r7, #31]
 8000c94:	4a2e      	ldr	r2, [pc, #184]	@ (8000d50 <APPD_SetCPU2GpioConfig+0x138>)
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	4413      	add	r3, r2
 8000c9a:	889a      	ldrh	r2, [r3, #4]
 8000c9c:	8b3b      	ldrh	r3, [r7, #24]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	833b      	strh	r3, [r7, #24]
          break;
 8000ca2:	e000      	b.n	8000ca6 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000ca4:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000ca6:	7ffb      	ldrb	r3, [r7, #31]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	77fb      	strb	r3, [r7, #31]
 8000cac:	7ffb      	ldrb	r3, [r7, #31]
 8000cae:	2b25      	cmp	r3, #37	@ 0x25
 8000cb0:	d9c5      	bls.n	8000c3e <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000cbe:	8bbb      	ldrh	r3, [r7, #28]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d014      	beq.n	8000cee <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000cc4:	8bbb      	ldrh	r3, [r7, #28]
 8000cc6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f7ff ff41 	bl	8000b50 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f7ff ff57 	bl	8000b82 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cdc:	f003 fe12 	bl	8004904 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000ce0:	8bbb      	ldrh	r3, [r7, #28]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cea:	f003 ff7b 	bl	8004be4 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000cee:	8b7b      	ldrh	r3, [r7, #26]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d012      	beq.n	8000d1a <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000cf4:	8b7b      	ldrh	r3, [r7, #26]
 8000cf6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf8:	2002      	movs	r0, #2
 8000cfa:	f7ff ff29 	bl	8000b50 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000cfe:	2002      	movs	r0, #2
 8000d00:	f7ff ff3f 	bl	8000b82 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	4619      	mov	r1, r3
 8000d08:	4813      	ldr	r0, [pc, #76]	@ (8000d58 <APPD_SetCPU2GpioConfig+0x140>)
 8000d0a:	f003 fdfb 	bl	8004904 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000d0e:	8b7b      	ldrh	r3, [r7, #26]
 8000d10:	2200      	movs	r2, #0
 8000d12:	4619      	mov	r1, r3
 8000d14:	4810      	ldr	r0, [pc, #64]	@ (8000d58 <APPD_SetCPU2GpioConfig+0x140>)
 8000d16:	f003 ff65 	bl	8004be4 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000d1a:	8b3b      	ldrh	r3, [r7, #24]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d013      	beq.n	8000d48 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000d20:	8b3b      	ldrh	r3, [r7, #24]
 8000d22:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d24:	2004      	movs	r0, #4
 8000d26:	f7ff ff13 	bl	8000b50 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000d2a:	2004      	movs	r0, #4
 8000d2c:	f7ff ff29 	bl	8000b82 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	4619      	mov	r1, r3
 8000d34:	4807      	ldr	r0, [pc, #28]	@ (8000d54 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d36:	f003 fde5 	bl	8004904 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000d3a:	8b3b      	ldrh	r3, [r7, #24]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4804      	ldr	r0, [pc, #16]	@ (8000d54 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d42:	f003 ff4f 	bl	8004be4 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000d46:	bf00      	nop
 8000d48:	bf00      	nop
}
 8000d4a:	3720      	adds	r7, #32
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	0800f52c 	.word	0x0800f52c
 8000d54:	48000800 	.word	0x48000800
 8000d58:	48000400 	.word	0x48000400

08000d5c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000d60:	bf00      	nop
}
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000d6e:	f001 fc67 	bl	8002640 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000d72:	bf00      	nop
}
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b084      	sub	sp, #16
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	60f8      	str	r0, [r7, #12]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	607a      	str	r2, [r7, #4]
 8000d82:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000d84:	897a      	ldrh	r2, [r7, #10]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	68f9      	ldr	r1, [r7, #12]
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f001 f940 	bl	8002010 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000d90:	bf00      	nop
}
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 8000d9c:	4b05      	ldr	r3, [pc, #20]	@ (8000db4 <LL_PWR_SMPS_Enable+0x1c>)
 8000d9e:	69db      	ldr	r3, [r3, #28]
 8000da0:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <LL_PWR_SMPS_Enable+0x1c>)
 8000da2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000da6:	61d3      	str	r3, [r2, #28]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	58000400 	.word	0x58000400

08000db8 <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 8000dc0:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8000dc2:	69db      	ldr	r3, [r3, #28]
 8000dc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000dc8:	4904      	ldr	r1, [pc, #16]	@ (8000ddc <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61cb      	str	r3, [r1, #28]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	58000400 	.word	0x58000400

08000de0 <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b087      	sub	sp, #28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8000de8:	4b18      	ldr	r3, [pc, #96]	@ (8000e4c <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if (OutputVoltageLevel_calibration == 0UL)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d108      	bne.n	8000e0c <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	f023 020f 	bic.w	r2, r3, #15
 8000e02:	4913      	ldr	r1, [pc, #76]	@ (8000e50 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 8000e0a:	e019      	b.n	8000e40 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3b06      	subs	r3, #6
 8000e10:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4413      	add	r3, r2
 8000e18:	617b      	str	r3, [r7, #20]
    if (OutputVoltageLevelTrimmed < 0)
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	da02      	bge.n	8000e26 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	e004      	b.n	8000e30 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if (OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	2b0f      	cmp	r3, #15
 8000e2a:	dd01      	ble.n	8000e30 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 8000e30:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000e32:	69db      	ldr	r3, [r3, #28]
 8000e34:	f023 020f 	bic.w	r2, r3, #15
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	4905      	ldr	r1, [pc, #20]	@ (8000e50 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	61cb      	str	r3, [r1, #28]
}
 8000e40:	bf00      	nop
 8000e42:	371c      	adds	r7, #28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	1fff7558 	.word	0x1fff7558
 8000e50:	58000400 	.word	0x58000400

08000e54 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000e5c:	4b07      	ldr	r3, [pc, #28]	@ (8000e7c <LL_C2_PWR_SetPowerMode+0x28>)
 8000e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e62:	f023 0207 	bic.w	r2, r3, #7
 8000e66:	4905      	ldr	r1, [pc, #20]	@ (8000e7c <LL_C2_PWR_SetPowerMode+0x28>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	58000400 	.word	0x58000400

08000e80 <LL_EXTI_EnableIT_32_63>:
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000e8a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000e8e:	4905      	ldr	r1, [pc, #20]	@ (8000ea4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	58000800 	.word	0x58000800

08000ea8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000eb6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000eba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ec2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	cafecafe 	.word	0xcafecafe

08000ee4 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000eec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000ef6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	608b      	str	r3, [r1, #8]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000f10:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <LL_DBGMCU_GetDeviceID+0x18>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e0042000 	.word	0xe0042000

08000f28 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <LL_DBGMCU_GetRevisionID+0x18>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	0c1b      	lsrs	r3, r3, #16
 8000f32:	b29b      	uxth	r3, r3
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e0042000 	.word	0xe0042000

08000f44 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000f48:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <LL_LPM_EnableSleep+0x1c>)
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	4a04      	ldr	r2, [pc, #16]	@ (8000f60 <LL_LPM_EnableSleep+0x1c>)
 8000f4e:	f023 0304 	bic.w	r3, r3, #4
 8000f52:	6113      	str	r3, [r2, #16]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	22ff      	movs	r2, #255	@ 0xff
 8000f70:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	22ca      	movs	r2, #202	@ 0xca
 8000f8a:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2253      	movs	r2, #83	@ 0x53
 8000f90:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f023 0207 	bic.w	r2, r3, #7
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000fc8:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <MX_APPE_Config+0x18>)
 8000fca:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000fce:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000fd0:	f000 f82b 	bl	800102a <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000fd4:	f000 f830 	bl	8001038 <Config_HSE>

  return;
 8000fd8:	bf00      	nop
}
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	58004000 	.word	0x58004000

08000fe0 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000fe4:	f000 f83c 	bl	8001060 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000fe8:	f000 f854 	bl	8001094 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000fec:	4904      	ldr	r1, [pc, #16]	@ (8001000 <MX_APPE_Init+0x20>)
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f000 fe1c 	bl	8001c2c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
	APPD_Init();         /**< Initialize the Debugger */
 8000ff4:	f7ff fde1 	bl	8000bba <APPD_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ff8:	f000 f85a 	bl	80010b0 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000ffc:	bf00      	nop
}
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000690 	.word	0x20000690

08001004 <Init_Smps>:

void Init_Smps(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 8001008:	2000      	movs	r0, #0
 800100a:	f7ff fed5 	bl	8000db8 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 800100e:	2004      	movs	r0, #4
 8001010:	f7ff fee6 	bl	8000de0 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 8001014:	f7ff fec0 	bl	8000d98 <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001018:	bf00      	nop
}
 800101a:	bd80      	pop	{r7, pc}

0800101c <Init_Exti>:

void Init_Exti(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001020:	2050      	movs	r0, #80	@ 0x50
 8001022:	f7ff ff2d 	bl	8000e80 <LL_EXTI_EnableIT_32_63>

  return;
 8001026:	bf00      	nop
}
 8001028:	bd80      	pop	{r7, pc}

0800102a <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800102e:	bf00      	nop
}
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800103e:	2000      	movs	r0, #0
 8001040:	f009 ff08 	bl	800ae54 <OTP_Read>
 8001044:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d005      	beq.n	8001058 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	799b      	ldrb	r3, [r3, #6]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff29 	bl	8000ea8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001056:	bf00      	nop
 8001058:	bf00      	nop
}
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <System_Init>:

static void System_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  Init_Smps();
 8001064:	f7ff ffce 	bl	8001004 <Init_Smps>

  Init_Exti();
 8001068:	f7ff ffd8 	bl	800101c <Init_Exti>

  Init_Rtc();
 800106c:	f000 f802 	bl	8001074 <Init_Rtc>

  return;
 8001070:	bf00      	nop
}
 8001072:	bd80      	pop	{r7, pc}

08001074 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001078:	4805      	ldr	r0, [pc, #20]	@ (8001090 <Init_Rtc+0x1c>)
 800107a:	f7ff ff80 	bl	8000f7e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800107e:	2100      	movs	r1, #0
 8001080:	4803      	ldr	r0, [pc, #12]	@ (8001090 <Init_Rtc+0x1c>)
 8001082:	f7ff ff8c 	bl	8000f9e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001086:	4802      	ldr	r0, [pc, #8]	@ (8001090 <Init_Rtc+0x1c>)
 8001088:	f7ff ff6c 	bl	8000f64 <LL_RTC_EnableWriteProtection>

  return;
 800108c:	bf00      	nop
}
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40002800 	.word	0x40002800

08001094 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001098:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800109c:	f7ff ff22 	bl	8000ee4 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80010a0:	f00b fd20 	bl	800cae4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80010a4:	2004      	movs	r0, #4
 80010a6:	f7ff fed5 	bl	8000e54 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80010aa:	bf00      	nop
}
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80010b6:	f009 fbc9 	bl	800a84c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80010ba:	4a11      	ldr	r2, [pc, #68]	@ (8001100 <appe_Tl_Init+0x50>)
 80010bc:	2100      	movs	r1, #0
 80010be:	2004      	movs	r0, #4
 80010c0:	f00b fed4 	bl	800ce6c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <appe_Tl_Init+0x54>)
 80010c6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <appe_Tl_Init+0x58>)
 80010ca:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80010cc:	463b      	mov	r3, r7
 80010ce:	4619      	mov	r1, r3
 80010d0:	480e      	ldr	r0, [pc, #56]	@ (800110c <appe_Tl_Init+0x5c>)
 80010d2:	f009 fa7d 	bl	800a5d0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <appe_Tl_Init+0x60>)
 80010d8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80010da:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <appe_Tl_Init+0x64>)
 80010dc:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80010de:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <appe_Tl_Init+0x68>)
 80010e0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80010e2:	f240 533c 	movw	r3, #1340	@ 0x53c
 80010e6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	4618      	mov	r0, r3
 80010ee:	f009 fcf3 	bl	800aad8 <TL_MM_Init>

  TL_Enable();
 80010f2:	f009 fba5 	bl	800a840 <TL_Enable>

  return;
 80010f6:	bf00      	nop
}
 80010f8:	3720      	adds	r7, #32
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	0800a609 	.word	0x0800a609
 8001104:	20030734 	.word	0x20030734
 8001108:	0800111d 	.word	0x0800111d
 800110c:	08001135 	.word	0x08001135
 8001110:	2003094c 	.word	0x2003094c
 8001114:	20030840 	.word	0x20030840
 8001118:	200301f8 	.word	0x200301f8

0800111c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001126:	bf00      	nop
}
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	330b      	adds	r3, #11
 8001142:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	b29b      	uxth	r3, r3
 800114a:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800114e:	2b07      	cmp	r3, #7
 8001150:	d860      	bhi.n	8001214 <APPE_SysUserEvtRx+0xe0>
 8001152:	a201      	add	r2, pc, #4	@ (adr r2, 8001158 <APPE_SysUserEvtRx+0x24>)
 8001154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001158:	08001179 	.word	0x08001179
 800115c:	080011bb 	.word	0x080011bb
 8001160:	080011c9 	.word	0x080011c9
 8001164:	08001215 	.word	0x08001215
 8001168:	080011e5 	.word	0x080011e5
 800116c:	080011f5 	.word	0x080011f5
 8001170:	080011fd 	.word	0x080011fd
 8001174:	0800120d 	.word	0x0800120d
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	4618      	mov	r0, r3
 800117e:	f008 ffdd 	bl	800a13c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001182:	7b3b      	ldrb	r3, [r7, #12]
 8001184:	4619      	mov	r1, r3
 8001186:	7b7b      	ldrb	r3, [r7, #13]
 8001188:	461a      	mov	r2, r3
 800118a:	7bbb      	ldrb	r3, [r7, #14]
 800118c:	4824      	ldr	r0, [pc, #144]	@ (8001220 <APPE_SysUserEvtRx+0xec>)
 800118e:	f00c f87b 	bl	800d288 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8001192:	7c3b      	ldrb	r3, [r7, #16]
 8001194:	4619      	mov	r1, r3
 8001196:	4823      	ldr	r0, [pc, #140]	@ (8001224 <APPE_SysUserEvtRx+0xf0>)
 8001198:	f00c f876 	bl	800d288 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 800119c:	7dbb      	ldrb	r3, [r7, #22]
 800119e:	4619      	mov	r1, r3
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
 80011a2:	461a      	mov	r2, r3
 80011a4:	7e3b      	ldrb	r3, [r7, #24]
 80011a6:	4820      	ldr	r0, [pc, #128]	@ (8001228 <APPE_SysUserEvtRx+0xf4>)
 80011a8:	f00c f86e 	bl	800d288 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80011ac:	481f      	ldr	r0, [pc, #124]	@ (800122c <APPE_SysUserEvtRx+0xf8>)
 80011ae:	f00c f86b 	bl	800d288 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 f870 	bl	8001298 <APPE_SysEvtReadyProcessing>
    break;
 80011b8:	e02d      	b.n	8001216 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80011ba:	481d      	ldr	r0, [pc, #116]	@ (8001230 <APPE_SysUserEvtRx+0xfc>)
 80011bc:	f00c f864 	bl	800d288 <iprintf>
    APPE_SysEvtError(pPayload);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 f843 	bl	800124c <APPE_SysEvtError>
    break;
 80011c6:	e026      	b.n	8001216 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 80011c8:	481a      	ldr	r0, [pc, #104]	@ (8001234 <APPE_SysUserEvtRx+0x100>)
 80011ca:	f00c f8cd 	bl	800d368 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80011d2:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	461a      	mov	r2, r3
 80011dc:	4816      	ldr	r0, [pc, #88]	@ (8001238 <APPE_SysUserEvtRx+0x104>)
 80011de:	f00c f853 	bl	800d288 <iprintf>
    break;
 80011e2:	e018      	b.n	8001216 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4619      	mov	r1, r3
 80011ec:	4813      	ldr	r0, [pc, #76]	@ (800123c <APPE_SysUserEvtRx+0x108>)
 80011ee:	f00c f84b 	bl	800d288 <iprintf>
    break;
 80011f2:	e010      	b.n	8001216 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80011f4:	4812      	ldr	r0, [pc, #72]	@ (8001240 <APPE_SysUserEvtRx+0x10c>)
 80011f6:	f00c f847 	bl	800d288 <iprintf>
    break;
 80011fa:	e00c      	b.n	8001216 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4619      	mov	r1, r3
 8001204:	480f      	ldr	r0, [pc, #60]	@ (8001244 <APPE_SysUserEvtRx+0x110>)
 8001206:	f00c f83f 	bl	800d288 <iprintf>
    break;
 800120a:	e004      	b.n	8001216 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 800120c:	480e      	ldr	r0, [pc, #56]	@ (8001248 <APPE_SysUserEvtRx+0x114>)
 800120e:	f00c f83b 	bl	800d288 <iprintf>
    break;
 8001212:	e000      	b.n	8001216 <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8001214:	bf00      	nop
  }

  return;
 8001216:	bf00      	nop
}
 8001218:	3720      	adds	r7, #32
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	0800e0e4 	.word	0x0800e0e4
 8001224:	0800e108 	.word	0x0800e108
 8001228:	0800e124 	.word	0x0800e124
 800122c:	0800e13c 	.word	0x0800e13c
 8001230:	0800e15c 	.word	0x0800e15c
 8001234:	0800e180 	.word	0x0800e180
 8001238:	0800e1d0 	.word	0x0800e1d0
 800123c:	0800e1f8 	.word	0x0800e1f8
 8001240:	0800e234 	.word	0x0800e234
 8001244:	0800e258 	.word	0x0800e258
 8001248:	0800e294 	.word	0x0800e294

0800124c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	330b      	adds	r3, #11
 800125a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3302      	adds	r3, #2
 8001260:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	4619      	mov	r1, r3
 8001268:	4808      	ldr	r0, [pc, #32]	@ (800128c <APPE_SysEvtError+0x40>)
 800126a:	f00c f80d 	bl	800d288 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d103      	bne.n	800127e <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001276:	4806      	ldr	r0, [pc, #24]	@ (8001290 <APPE_SysEvtError+0x44>)
 8001278:	f00c f876 	bl	800d368 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800127c:	e003      	b.n	8001286 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 800127e:	4805      	ldr	r0, [pc, #20]	@ (8001294 <APPE_SysEvtError+0x48>)
 8001280:	f00c f872 	bl	800d368 <puts>
  return;
 8001284:	bf00      	nop
}
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	0800e2b8 	.word	0x0800e2b8
 8001290:	0800e2e8 	.word	0x0800e2e8
 8001294:	0800e324 	.word	0x0800e324

08001298 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	@ 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	330b      	adds	r3, #11
 80012bc:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3302      	adds	r3, #2
 80012c2:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d128      	bne.n	800131e <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80012cc:	481d      	ldr	r0, [pc, #116]	@ (8001344 <APPE_SysEvtReadyProcessing+0xac>)
 80012ce:	f00c f84b 	bl	800d368 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80012d2:	f7ff fc85 	bl	8000be0 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80012d6:	230f      	movs	r3, #15
 80012d8:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80012da:	237f      	movs	r3, #127	@ 0x7f
 80012dc:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80012de:	f7ff fe23 	bl	8000f28 <LL_DBGMCU_GetRevisionID>
 80012e2:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80012e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012e6:	4818      	ldr	r0, [pc, #96]	@ (8001348 <APPE_SysEvtReadyProcessing+0xb0>)
 80012e8:	f00b ffce 	bl	800d288 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 80012ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80012f2:	f7ff fe0b 	bl	8000f0c <LL_DBGMCU_GetDeviceID>
 80012f6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 80012f8:	6a39      	ldr	r1, [r7, #32]
 80012fa:	4814      	ldr	r0, [pc, #80]	@ (800134c <APPE_SysEvtReadyProcessing+0xb4>)
 80012fc:	f00b ffc4 	bl	800d288 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	b29b      	uxth	r3, r3
 8001304:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001306:	f107 0308 	add.w	r3, r7, #8
 800130a:	4618      	mov	r0, r3
 800130c:	f008 ff00 	bl	800a110 <SHCI_C2_Config>

    APP_BLE_Init();
 8001310:	f00a faa6 	bl	800b860 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001314:	2100      	movs	r1, #0
 8001316:	2001      	movs	r0, #1
 8001318:	f00b fbf6 	bl	800cb08 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 800131c:	e00e      	b.n	800133c <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d106      	bne.n	8001334 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001326:	480a      	ldr	r0, [pc, #40]	@ (8001350 <APPE_SysEvtReadyProcessing+0xb8>)
 8001328:	f00b ffae 	bl	800d288 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
  return;
 8001332:	e003      	b.n	800133c <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001334:	4807      	ldr	r0, [pc, #28]	@ (8001354 <APPE_SysEvtReadyProcessing+0xbc>)
 8001336:	f00b ffa7 	bl	800d288 <iprintf>
  return;
 800133a:	bf00      	nop
}
 800133c:	3728      	adds	r7, #40	@ 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	0800e35c 	.word	0x0800e35c
 8001348:	0800e378 	.word	0x0800e378
 800134c:	0800e39c 	.word	0x0800e39c
 8001350:	0800e3bc 	.word	0x0800e3bc
 8001354:	0800e3f0 	.word	0x0800e3f0

08001358 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001360:	f002 f8f2 	bl	8003548 <HAL_GetTick>
 8001364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001370:	d00a      	beq.n	8001388 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001372:	f002 f901 	bl	8003578 <HAL_GetTickFreq>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4413      	add	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001380:	e002      	b.n	8001388 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001382:	f7ff fddf 	bl	8000f44 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8001386:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001388:	f002 f8de 	bl	8003548 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	429a      	cmp	r2, r3
 8001396:	d8f4      	bhi.n	8001382 <HAL_Delay+0x2a>
  }
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80013a6:	f04f 30ff 	mov.w	r0, #4294967295
 80013aa:	f00b fbdd 	bl	800cb68 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80013b6:	bf00      	nop
}
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80013c8:	2100      	movs	r1, #0
 80013ca:	2004      	movs	r0, #4
 80013cc:	f00b fd70 	bl	800ceb0 <UTIL_SEQ_SetTask>
  return;
 80013d0:	bf00      	nop
}
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80013e0:	2002      	movs	r0, #2
 80013e2:	f00b fdd1 	bl	800cf88 <UTIL_SEQ_SetEvt>
  return;
 80013e6:	bf00      	nop
}
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80013f6:	2002      	movs	r0, #2
 80013f8:	f00b fde6 	bl	800cfc8 <UTIL_SEQ_WaitEvt>
  return;
 80013fc:	bf00      	nop
}
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <LL_EXTI_EnableIT_0_31>:
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800140c:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <LL_EXTI_EnableIT_0_31+0x24>)
 800140e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001412:	4905      	ldr	r1, [pc, #20]	@ (8001428 <LL_EXTI_EnableIT_0_31+0x24>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4313      	orrs	r3, r2
 8001418:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	58000800 	.word	0x58000800

0800142c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001434:	4b05      	ldr	r3, [pc, #20]	@ (800144c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4904      	ldr	r1, [pc, #16]	@ (800144c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4313      	orrs	r3, r2
 800143e:	600b      	str	r3, [r1, #0]

}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	58000800 	.word	0x58000800

08001450 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001456:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <ReadRtcSsrValue+0x3c>)
 8001458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800145a:	b29b      	uxth	r3, r3
 800145c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800145e:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <ReadRtcSsrValue+0x3c>)
 8001460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001462:	b29b      	uxth	r3, r3
 8001464:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001466:	e005      	b.n	8001474 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800146c:	4b07      	ldr	r3, [pc, #28]	@ (800148c <ReadRtcSsrValue+0x3c>)
 800146e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001470:	b29b      	uxth	r3, r3
 8001472:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d1f5      	bne.n	8001468 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800147c:	683b      	ldr	r3, [r7, #0]
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40002800 	.word	0x40002800

08001490 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	460a      	mov	r2, r1
 800149a:	71fb      	strb	r3, [r7, #7]
 800149c:	4613      	mov	r3, r2
 800149e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80014a0:	79ba      	ldrb	r2, [r7, #6]
 80014a2:	491d      	ldr	r1, [pc, #116]	@ (8001518 <LinkTimerAfter+0x88>)
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	440b      	add	r3, r1
 80014ae:	3315      	adds	r3, #21
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d009      	beq.n	80014ce <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80014ba:	7bfa      	ldrb	r2, [r7, #15]
 80014bc:	4916      	ldr	r1, [pc, #88]	@ (8001518 <LinkTimerAfter+0x88>)
 80014be:	4613      	mov	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4413      	add	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	440b      	add	r3, r1
 80014c8:	3314      	adds	r3, #20
 80014ca:	79fa      	ldrb	r2, [r7, #7]
 80014cc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80014ce:	79fa      	ldrb	r2, [r7, #7]
 80014d0:	4911      	ldr	r1, [pc, #68]	@ (8001518 <LinkTimerAfter+0x88>)
 80014d2:	4613      	mov	r3, r2
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4413      	add	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	440b      	add	r3, r1
 80014dc:	3315      	adds	r3, #21
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80014e2:	79fa      	ldrb	r2, [r7, #7]
 80014e4:	490c      	ldr	r1, [pc, #48]	@ (8001518 <LinkTimerAfter+0x88>)
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	440b      	add	r3, r1
 80014f0:	3314      	adds	r3, #20
 80014f2:	79ba      	ldrb	r2, [r7, #6]
 80014f4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80014f6:	79ba      	ldrb	r2, [r7, #6]
 80014f8:	4907      	ldr	r1, [pc, #28]	@ (8001518 <LinkTimerAfter+0x88>)
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	440b      	add	r3, r1
 8001504:	3315      	adds	r3, #21
 8001506:	79fa      	ldrb	r2, [r7, #7]
 8001508:	701a      	strb	r2, [r3, #0]

  return;
 800150a:	bf00      	nop
}
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	200004f8 	.word	0x200004f8

0800151c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	460a      	mov	r2, r1
 8001526:	71fb      	strb	r3, [r7, #7]
 8001528:	4613      	mov	r3, r2
 800152a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800152c:	4b29      	ldr	r3, [pc, #164]	@ (80015d4 <LinkTimerBefore+0xb8>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	79ba      	ldrb	r2, [r7, #6]
 8001534:	429a      	cmp	r2, r3
 8001536:	d032      	beq.n	800159e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001538:	79ba      	ldrb	r2, [r7, #6]
 800153a:	4927      	ldr	r1, [pc, #156]	@ (80015d8 <LinkTimerBefore+0xbc>)
 800153c:	4613      	mov	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	440b      	add	r3, r1
 8001546:	3314      	adds	r3, #20
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	4922      	ldr	r1, [pc, #136]	@ (80015d8 <LinkTimerBefore+0xbc>)
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	440b      	add	r3, r1
 800155a:	3315      	adds	r3, #21
 800155c:	79fa      	ldrb	r2, [r7, #7]
 800155e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001560:	79fa      	ldrb	r2, [r7, #7]
 8001562:	491d      	ldr	r1, [pc, #116]	@ (80015d8 <LinkTimerBefore+0xbc>)
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	440b      	add	r3, r1
 800156e:	3315      	adds	r3, #21
 8001570:	79ba      	ldrb	r2, [r7, #6]
 8001572:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001574:	79fa      	ldrb	r2, [r7, #7]
 8001576:	4918      	ldr	r1, [pc, #96]	@ (80015d8 <LinkTimerBefore+0xbc>)
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	440b      	add	r3, r1
 8001582:	3314      	adds	r3, #20
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001588:	79ba      	ldrb	r2, [r7, #6]
 800158a:	4913      	ldr	r1, [pc, #76]	@ (80015d8 <LinkTimerBefore+0xbc>)
 800158c:	4613      	mov	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4413      	add	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	440b      	add	r3, r1
 8001596:	3314      	adds	r3, #20
 8001598:	79fa      	ldrb	r2, [r7, #7]
 800159a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800159c:	e014      	b.n	80015c8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800159e:	79fa      	ldrb	r2, [r7, #7]
 80015a0:	490d      	ldr	r1, [pc, #52]	@ (80015d8 <LinkTimerBefore+0xbc>)
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	440b      	add	r3, r1
 80015ac:	3315      	adds	r3, #21
 80015ae:	79ba      	ldrb	r2, [r7, #6]
 80015b0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80015b2:	79ba      	ldrb	r2, [r7, #6]
 80015b4:	4908      	ldr	r1, [pc, #32]	@ (80015d8 <LinkTimerBefore+0xbc>)
 80015b6:	4613      	mov	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	440b      	add	r3, r1
 80015c0:	3314      	adds	r3, #20
 80015c2:	79fa      	ldrb	r2, [r7, #7]
 80015c4:	701a      	strb	r2, [r3, #0]
  return;
 80015c6:	bf00      	nop
}
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000588 	.word	0x20000588
 80015d8:	200004f8 	.word	0x200004f8

080015dc <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80015e6:	4b4e      	ldr	r3, [pc, #312]	@ (8001720 <linkTimer+0x144>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b06      	cmp	r3, #6
 80015ee:	d118      	bne.n	8001622 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80015f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001720 <linkTimer+0x144>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001724 <linkTimer+0x148>)
 80015f8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80015fa:	4a49      	ldr	r2, [pc, #292]	@ (8001720 <linkTimer+0x144>)
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001600:	79fa      	ldrb	r2, [r7, #7]
 8001602:	4949      	ldr	r1, [pc, #292]	@ (8001728 <linkTimer+0x14c>)
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	440b      	add	r3, r1
 800160e:	3315      	adds	r3, #21
 8001610:	2206      	movs	r2, #6
 8001612:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001614:	4b45      	ldr	r3, [pc, #276]	@ (800172c <linkTimer+0x150>)
 8001616:	f04f 32ff 	mov.w	r2, #4294967295
 800161a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	81fb      	strh	r3, [r7, #14]
 8001620:	e078      	b.n	8001714 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001622:	f000 f909 	bl	8001838 <ReturnTimeElapsed>
 8001626:	4603      	mov	r3, r0
 8001628:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800162a:	79fa      	ldrb	r2, [r7, #7]
 800162c:	493e      	ldr	r1, [pc, #248]	@ (8001728 <linkTimer+0x14c>)
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	440b      	add	r3, r1
 8001638:	3308      	adds	r3, #8
 800163a:	6819      	ldr	r1, [r3, #0]
 800163c:	89fb      	ldrh	r3, [r7, #14]
 800163e:	79fa      	ldrb	r2, [r7, #7]
 8001640:	4419      	add	r1, r3
 8001642:	4839      	ldr	r0, [pc, #228]	@ (8001728 <linkTimer+0x14c>)
 8001644:	4613      	mov	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4413      	add	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	4403      	add	r3, r0
 800164e:	3308      	adds	r3, #8
 8001650:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001652:	79fa      	ldrb	r2, [r7, #7]
 8001654:	4934      	ldr	r1, [pc, #208]	@ (8001728 <linkTimer+0x14c>)
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	440b      	add	r3, r1
 8001660:	3308      	adds	r3, #8
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001666:	4b2e      	ldr	r3, [pc, #184]	@ (8001720 <linkTimer+0x144>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	4619      	mov	r1, r3
 800166e:	4a2e      	ldr	r2, [pc, #184]	@ (8001728 <linkTimer+0x14c>)
 8001670:	460b      	mov	r3, r1
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	440b      	add	r3, r1
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4413      	add	r3, r2
 800167a:	3308      	adds	r3, #8
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	429a      	cmp	r2, r3
 8001682:	d337      	bcc.n	80016f4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001684:	4b26      	ldr	r3, [pc, #152]	@ (8001720 <linkTimer+0x144>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800168a:	7b7a      	ldrb	r2, [r7, #13]
 800168c:	4926      	ldr	r1, [pc, #152]	@ (8001728 <linkTimer+0x14c>)
 800168e:	4613      	mov	r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4413      	add	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	440b      	add	r3, r1
 8001698:	3315      	adds	r3, #21
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800169e:	e013      	b.n	80016c8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80016a0:	7b7a      	ldrb	r2, [r7, #13]
 80016a2:	4921      	ldr	r1, [pc, #132]	@ (8001728 <linkTimer+0x14c>)
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	440b      	add	r3, r1
 80016ae:	3315      	adds	r3, #21
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80016b4:	7b7a      	ldrb	r2, [r7, #13]
 80016b6:	491c      	ldr	r1, [pc, #112]	@ (8001728 <linkTimer+0x14c>)
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	440b      	add	r3, r1
 80016c2:	3315      	adds	r3, #21
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80016c8:	7b3b      	ldrb	r3, [r7, #12]
 80016ca:	2b06      	cmp	r3, #6
 80016cc:	d00b      	beq.n	80016e6 <linkTimer+0x10a>
 80016ce:	7b3a      	ldrb	r2, [r7, #12]
 80016d0:	4915      	ldr	r1, [pc, #84]	@ (8001728 <linkTimer+0x14c>)
 80016d2:	4613      	mov	r3, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4413      	add	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	440b      	add	r3, r1
 80016dc:	3308      	adds	r3, #8
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d2dc      	bcs.n	80016a0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80016e6:	7b7a      	ldrb	r2, [r7, #13]
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fecf 	bl	8001490 <LinkTimerAfter>
 80016f2:	e00f      	b.n	8001714 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80016f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <linkTimer+0x144>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	4611      	mov	r1, r2
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff0c 	bl	800151c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <linkTimer+0x144>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <linkTimer+0x148>)
 800170c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800170e:	4a04      	ldr	r2, [pc, #16]	@ (8001720 <linkTimer+0x144>)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001714:	89fb      	ldrh	r3, [r7, #14]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000588 	.word	0x20000588
 8001724:	20000589 	.word	0x20000589
 8001728:	200004f8 	.word	0x200004f8
 800172c:	2000058c 	.word	0x2000058c

08001730 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	460a      	mov	r2, r1
 800173a:	71fb      	strb	r3, [r7, #7]
 800173c:	4613      	mov	r3, r2
 800173e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001740:	4b39      	ldr	r3, [pc, #228]	@ (8001828 <UnlinkTimer+0xf8>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	79fa      	ldrb	r2, [r7, #7]
 8001748:	429a      	cmp	r2, r3
 800174a:	d111      	bne.n	8001770 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800174c:	4b36      	ldr	r3, [pc, #216]	@ (8001828 <UnlinkTimer+0xf8>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4b36      	ldr	r3, [pc, #216]	@ (800182c <UnlinkTimer+0xfc>)
 8001754:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001756:	79fa      	ldrb	r2, [r7, #7]
 8001758:	4935      	ldr	r1, [pc, #212]	@ (8001830 <UnlinkTimer+0x100>)
 800175a:	4613      	mov	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	440b      	add	r3, r1
 8001764:	3315      	adds	r3, #21
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4b2f      	ldr	r3, [pc, #188]	@ (8001828 <UnlinkTimer+0xf8>)
 800176c:	701a      	strb	r2, [r3, #0]
 800176e:	e03e      	b.n	80017ee <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001770:	79fa      	ldrb	r2, [r7, #7]
 8001772:	492f      	ldr	r1, [pc, #188]	@ (8001830 <UnlinkTimer+0x100>)
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	440b      	add	r3, r1
 800177e:	3314      	adds	r3, #20
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001784:	79fa      	ldrb	r2, [r7, #7]
 8001786:	492a      	ldr	r1, [pc, #168]	@ (8001830 <UnlinkTimer+0x100>)
 8001788:	4613      	mov	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	3315      	adds	r3, #21
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001798:	79f9      	ldrb	r1, [r7, #7]
 800179a:	7bfa      	ldrb	r2, [r7, #15]
 800179c:	4824      	ldr	r0, [pc, #144]	@ (8001830 <UnlinkTimer+0x100>)
 800179e:	460b      	mov	r3, r1
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	440b      	add	r3, r1
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	4403      	add	r3, r0
 80017a8:	3315      	adds	r3, #21
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b2d8      	uxtb	r0, r3
 80017ae:	4920      	ldr	r1, [pc, #128]	@ (8001830 <UnlinkTimer+0x100>)
 80017b0:	4613      	mov	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	440b      	add	r3, r1
 80017ba:	3315      	adds	r3, #21
 80017bc:	4602      	mov	r2, r0
 80017be:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80017c0:	7bbb      	ldrb	r3, [r7, #14]
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d013      	beq.n	80017ee <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80017c6:	79f9      	ldrb	r1, [r7, #7]
 80017c8:	7bba      	ldrb	r2, [r7, #14]
 80017ca:	4819      	ldr	r0, [pc, #100]	@ (8001830 <UnlinkTimer+0x100>)
 80017cc:	460b      	mov	r3, r1
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	440b      	add	r3, r1
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	4403      	add	r3, r0
 80017d6:	3314      	adds	r3, #20
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	b2d8      	uxtb	r0, r3
 80017dc:	4914      	ldr	r1, [pc, #80]	@ (8001830 <UnlinkTimer+0x100>)
 80017de:	4613      	mov	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4413      	add	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	440b      	add	r3, r1
 80017e8:	3314      	adds	r3, #20
 80017ea:	4602      	mov	r2, r0
 80017ec:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80017ee:	79fa      	ldrb	r2, [r7, #7]
 80017f0:	490f      	ldr	r1, [pc, #60]	@ (8001830 <UnlinkTimer+0x100>)
 80017f2:	4613      	mov	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4413      	add	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	440b      	add	r3, r1
 80017fc:	330c      	adds	r3, #12
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <UnlinkTimer+0xf8>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b06      	cmp	r3, #6
 800180a:	d107      	bne.n	800181c <UnlinkTimer+0xec>
 800180c:	79bb      	ldrb	r3, [r7, #6]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d104      	bne.n	800181c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001812:	4b08      	ldr	r3, [pc, #32]	@ (8001834 <UnlinkTimer+0x104>)
 8001814:	f04f 32ff 	mov.w	r2, #4294967295
 8001818:	601a      	str	r2, [r3, #0]
  }

  return;
 800181a:	bf00      	nop
 800181c:	bf00      	nop
}
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	20000588 	.word	0x20000588
 800182c:	20000589 	.word	0x20000589
 8001830:	200004f8 	.word	0x200004f8
 8001834:	2000058c 	.word	0x2000058c

08001838 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800183e:	4b1a      	ldr	r3, [pc, #104]	@ (80018a8 <ReturnTimeElapsed+0x70>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001846:	d026      	beq.n	8001896 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001848:	f7ff fe02 	bl	8001450 <ReadRtcSsrValue>
 800184c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800184e:	4b16      	ldr	r3, [pc, #88]	@ (80018a8 <ReturnTimeElapsed+0x70>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	429a      	cmp	r2, r3
 8001856:	d805      	bhi.n	8001864 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001858:	4b13      	ldr	r3, [pc, #76]	@ (80018a8 <ReturnTimeElapsed+0x70>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	e00a      	b.n	800187a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001864:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <ReturnTimeElapsed+0x74>)
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001870:	4b0d      	ldr	r3, [pc, #52]	@ (80018a8 <ReturnTimeElapsed+0x70>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	4413      	add	r3, r2
 8001878:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800187a:	4b0d      	ldr	r3, [pc, #52]	@ (80018b0 <ReturnTimeElapsed+0x78>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	fb02 f303 	mul.w	r3, r2, r3
 8001886:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001888:	4b0a      	ldr	r3, [pc, #40]	@ (80018b4 <ReturnTimeElapsed+0x7c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	40d3      	lsrs	r3, r2
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	e001      	b.n	800189a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	b29b      	uxth	r3, r3
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	2000058c 	.word	0x2000058c
 80018ac:	20000594 	.word	0x20000594
 80018b0:	20000592 	.word	0x20000592
 80018b4:	20000591 	.word	0x20000591

080018b8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d108      	bne.n	80018da <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80018c8:	f7ff fdc2 	bl	8001450 <ReadRtcSsrValue>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4a21      	ldr	r2, [pc, #132]	@ (8001954 <RestartWakeupCounter+0x9c>)
 80018d0:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80018d2:	2003      	movs	r0, #3
 80018d4:	f002 fe83 	bl	80045de <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80018d8:	e039      	b.n	800194e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80018da:	88fb      	ldrh	r3, [r7, #6]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d803      	bhi.n	80018e8 <RestartWakeupCounter+0x30>
 80018e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001958 <RestartWakeupCounter+0xa0>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d002      	beq.n	80018ee <RestartWakeupCounter+0x36>
      Value -= 1;
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80018ee:	bf00      	nop
 80018f0:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <RestartWakeupCounter+0xa4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f8      	beq.n	80018f0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80018fe:	4b17      	ldr	r3, [pc, #92]	@ (800195c <RestartWakeupCounter+0xa4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4b15      	ldr	r3, [pc, #84]	@ (800195c <RestartWakeupCounter+0xa4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800190e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001910:	4b13      	ldr	r3, [pc, #76]	@ (8001960 <RestartWakeupCounter+0xa8>)
 8001912:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001916:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001918:	2003      	movs	r0, #3
 800191a:	f002 fe6e 	bl	80045fa <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800191e:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <RestartWakeupCounter+0xac>)
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	0c1b      	lsrs	r3, r3, #16
 8001924:	041b      	lsls	r3, r3, #16
 8001926:	88fa      	ldrh	r2, [r7, #6]
 8001928:	490e      	ldr	r1, [pc, #56]	@ (8001964 <RestartWakeupCounter+0xac>)
 800192a:	4313      	orrs	r3, r2
 800192c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800192e:	f7ff fd8f 	bl	8001450 <ReadRtcSsrValue>
 8001932:	4603      	mov	r3, r0
 8001934:	4a07      	ldr	r2, [pc, #28]	@ (8001954 <RestartWakeupCounter+0x9c>)
 8001936:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001938:	4b08      	ldr	r3, [pc, #32]	@ (800195c <RestartWakeupCounter+0xa4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	4b07      	ldr	r3, [pc, #28]	@ (800195c <RestartWakeupCounter+0xa4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001946:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001948:	f3af 8000 	nop.w
  return ;
 800194c:	bf00      	nop
}
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	2000058c 	.word	0x2000058c
 8001958:	20000591 	.word	0x20000591
 800195c:	20000690 	.word	0x20000690
 8001960:	58000800 	.word	0x58000800
 8001964:	40002800 	.word	0x40002800

08001968 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800196e:	4b45      	ldr	r3, [pc, #276]	@ (8001a84 <RescheduleTimerList+0x11c>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800197a:	d107      	bne.n	800198c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800197c:	bf00      	nop
 800197e:	4b42      	ldr	r3, [pc, #264]	@ (8001a88 <RescheduleTimerList+0x120>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f8      	bne.n	800197e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800198c:	4b3e      	ldr	r3, [pc, #248]	@ (8001a88 <RescheduleTimerList+0x120>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	4b3d      	ldr	r3, [pc, #244]	@ (8001a88 <RescheduleTimerList+0x120>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800199a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800199c:	4b3b      	ldr	r3, [pc, #236]	@ (8001a8c <RescheduleTimerList+0x124>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80019a2:	7bfa      	ldrb	r2, [r7, #15]
 80019a4:	493a      	ldr	r1, [pc, #232]	@ (8001a90 <RescheduleTimerList+0x128>)
 80019a6:	4613      	mov	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	440b      	add	r3, r1
 80019b0:	3308      	adds	r3, #8
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80019b6:	f7ff ff3f 	bl	8001838 <ReturnTimeElapsed>
 80019ba:	4603      	mov	r3, r0
 80019bc:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d205      	bcs.n	80019d2 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80019ca:	4b32      	ldr	r3, [pc, #200]	@ (8001a94 <RescheduleTimerList+0x12c>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	701a      	strb	r2, [r3, #0]
 80019d0:	e04d      	b.n	8001a6e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	4a30      	ldr	r2, [pc, #192]	@ (8001a98 <RescheduleTimerList+0x130>)
 80019d6:	8812      	ldrh	r2, [r2, #0]
 80019d8:	b292      	uxth	r2, r2
 80019da:	4413      	add	r3, r2
 80019dc:	461a      	mov	r2, r3
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d906      	bls.n	80019f2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80019e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a98 <RescheduleTimerList+0x130>)
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80019ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001a94 <RescheduleTimerList+0x12c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
 80019f0:	e03d      	b.n	8001a6e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80019fc:	4b25      	ldr	r3, [pc, #148]	@ (8001a94 <RescheduleTimerList+0x12c>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a02:	e034      	b.n	8001a6e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001a04:	7bfa      	ldrb	r2, [r7, #15]
 8001a06:	4922      	ldr	r1, [pc, #136]	@ (8001a90 <RescheduleTimerList+0x128>)
 8001a08:	4613      	mov	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	440b      	add	r3, r1
 8001a12:	3308      	adds	r3, #8
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d20a      	bcs.n	8001a32 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001a1c:	7bfa      	ldrb	r2, [r7, #15]
 8001a1e:	491c      	ldr	r1, [pc, #112]	@ (8001a90 <RescheduleTimerList+0x128>)
 8001a20:	4613      	mov	r3, r2
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	4413      	add	r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	440b      	add	r3, r1
 8001a2a:	3308      	adds	r3, #8
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e013      	b.n	8001a5a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	4916      	ldr	r1, [pc, #88]	@ (8001a90 <RescheduleTimerList+0x128>)
 8001a36:	4613      	mov	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	440b      	add	r3, r1
 8001a40:	3308      	adds	r3, #8
 8001a42:	6819      	ldr	r1, [r3, #0]
 8001a44:	88fb      	ldrh	r3, [r7, #6]
 8001a46:	7bfa      	ldrb	r2, [r7, #15]
 8001a48:	1ac9      	subs	r1, r1, r3
 8001a4a:	4811      	ldr	r0, [pc, #68]	@ (8001a90 <RescheduleTimerList+0x128>)
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	4403      	add	r3, r0
 8001a56:	3308      	adds	r3, #8
 8001a58:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001a5a:	7bfa      	ldrb	r2, [r7, #15]
 8001a5c:	490c      	ldr	r1, [pc, #48]	@ (8001a90 <RescheduleTimerList+0x128>)
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	440b      	add	r3, r1
 8001a68:	3315      	adds	r3, #21
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	2b06      	cmp	r3, #6
 8001a72:	d1c7      	bne.n	8001a04 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001a74:	89bb      	ldrh	r3, [r7, #12]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ff1e 	bl	80018b8 <RestartWakeupCounter>

  return ;
 8001a7c:	bf00      	nop
}
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40002800 	.word	0x40002800
 8001a88:	20000690 	.word	0x20000690
 8001a8c:	20000588 	.word	0x20000588
 8001a90:	200004f8 	.word	0x200004f8
 8001a94:	20000590 	.word	0x20000590
 8001a98:	20000596 	.word	0x20000596

08001a9c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	@ 0x28
 8001aa0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8001aa6:	617b      	str	r3, [r7, #20]
  return(result);
 8001aa8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001aac:	b672      	cpsid	i
}
 8001aae:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001ab0:	4b59      	ldr	r3, [pc, #356]	@ (8001c18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	22ca      	movs	r2, #202	@ 0xca
 8001ab6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ab8:	4b57      	ldr	r3, [pc, #348]	@ (8001c18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2253      	movs	r2, #83	@ 0x53
 8001abe:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001ac0:	4b55      	ldr	r3, [pc, #340]	@ (8001c18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	4b54      	ldr	r3, [pc, #336]	@ (8001c18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ace:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001ad0:	4b52      	ldr	r3, [pc, #328]	@ (8001c1c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001ad8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001adc:	4950      	ldr	r1, [pc, #320]	@ (8001c20 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	440b      	add	r3, r1
 8001ae8:	330c      	adds	r3, #12
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d16e      	bne.n	8001bd0 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001af2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001af6:	494a      	ldr	r1, [pc, #296]	@ (8001c20 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001af8:	4613      	mov	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4413      	add	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	440b      	add	r3, r1
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001b06:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001b0a:	4945      	ldr	r1, [pc, #276]	@ (8001c20 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4413      	add	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	440b      	add	r3, r1
 8001b16:	3310      	adds	r3, #16
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001b1c:	4b41      	ldr	r3, [pc, #260]	@ (8001c24 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d04c      	beq.n	8001bc0 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001b26:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001b2a:	493d      	ldr	r1, [pc, #244]	@ (8001c20 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	330d      	adds	r3, #13
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d124      	bne.n	8001b8a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001b40:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b44:	2101      	movs	r1, #1
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fdf2 	bl	8001730 <UnlinkTimer>
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	f383 8810 	msr	PRIMASK, r3
}
 8001b56:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001b58:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001b5c:	4930      	ldr	r1, [pc, #192]	@ (8001c20 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	440b      	add	r3, r1
 8001b68:	3304      	adds	r3, #4
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b70:	4611      	mov	r1, r2
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 f9b8 	bl	8001ee8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001b78:	4b27      	ldr	r3, [pc, #156]	@ (8001c18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	22ca      	movs	r2, #202	@ 0xca
 8001b7e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b80:	4b25      	ldr	r3, [pc, #148]	@ (8001c18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2253      	movs	r2, #83	@ 0x53
 8001b86:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b88:	e012      	b.n	8001bb0 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f383 8810 	msr	PRIMASK, r3
}
 8001b94:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001b96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 f920 	bl	8001de0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	22ca      	movs	r2, #202	@ 0xca
 8001ba6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2253      	movs	r2, #83	@ 0x53
 8001bae:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001bb0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	69b8      	ldr	r0, [r7, #24]
 8001bba:	f000 fa1b 	bl	8001ff4 <HW_TS_RTC_Int_AppNot>
 8001bbe:	e022      	b.n	8001c06 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001bc0:	f7ff fed2 	bl	8001968 <RescheduleTimerList>
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f383 8810 	msr	PRIMASK, r3
}
 8001bce:	e01a      	b.n	8001c06 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001bd0:	bf00      	nop
 8001bd2:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0f8      	beq.n	8001bd2 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001be0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001bf0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8001c28 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001bf4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f383 8810 	msr	PRIMASK, r3
}
 8001c04:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001c06:	4b04      	ldr	r3, [pc, #16]	@ (8001c18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	22ff      	movs	r2, #255	@ 0xff
 8001c0c:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001c0e:	bf00      	nop
}
 8001c10:	3728      	adds	r7, #40	@ 0x28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000690 	.word	0x20000690
 8001c1c:	20000588 	.word	0x20000588
 8001c20:	200004f8 	.word	0x200004f8
 8001c24:	20000590 	.word	0x20000590
 8001c28:	58000800 	.word	0x58000800

08001c2c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c38:	4b5e      	ldr	r3, [pc, #376]	@ (8001db4 <HW_TS_Init+0x188>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	22ca      	movs	r2, #202	@ 0xca
 8001c3e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c40:	4b5c      	ldr	r3, [pc, #368]	@ (8001db4 <HW_TS_Init+0x188>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2253      	movs	r2, #83	@ 0x53
 8001c46:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001c48:	4b5b      	ldr	r3, [pc, #364]	@ (8001db8 <HW_TS_Init+0x18c>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4a5a      	ldr	r2, [pc, #360]	@ (8001db8 <HW_TS_Init+0x18c>)
 8001c4e:	f043 0320 	orr.w	r3, r3, #32
 8001c52:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001c54:	4b58      	ldr	r3, [pc, #352]	@ (8001db8 <HW_TS_Init+0x18c>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	f1c3 0304 	rsb	r3, r3, #4
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4b55      	ldr	r3, [pc, #340]	@ (8001dbc <HW_TS_Init+0x190>)
 8001c68:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001c6a:	4b53      	ldr	r3, [pc, #332]	@ (8001db8 <HW_TS_Init+0x18c>)
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001c72:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8001c76:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	fa92 f2a2 	rbit	r2, r2
 8001c7e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	2a00      	cmp	r2, #0
 8001c88:	d101      	bne.n	8001c8e <HW_TS_Init+0x62>
  {
    return 32U;
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	e003      	b.n	8001c96 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	fab2 f282 	clz	r2, r2
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	40d3      	lsrs	r3, r2
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4b48      	ldr	r3, [pc, #288]	@ (8001dc0 <HW_TS_Init+0x194>)
 8001ca0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001ca2:	4b45      	ldr	r3, [pc, #276]	@ (8001db8 <HW_TS_Init+0x18c>)
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	4b44      	ldr	r3, [pc, #272]	@ (8001dc4 <HW_TS_Init+0x198>)
 8001cb4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001cb6:	4b43      	ldr	r3, [pc, #268]	@ (8001dc4 <HW_TS_Init+0x198>)
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	4a40      	ldr	r2, [pc, #256]	@ (8001dc0 <HW_TS_Init+0x194>)
 8001cbe:	7812      	ldrb	r2, [r2, #0]
 8001cc0:	fb02 f303 	mul.w	r3, r2, r3
 8001cc4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001cc8:	4a3c      	ldr	r2, [pc, #240]	@ (8001dbc <HW_TS_Init+0x190>)
 8001cca:	7812      	ldrb	r2, [r2, #0]
 8001ccc:	40d3      	lsrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d904      	bls.n	8001ce4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001cda:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc8 <HW_TS_Init+0x19c>)
 8001cdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ce0:	801a      	strh	r2, [r3, #0]
 8001ce2:	e003      	b.n	8001cec <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	4b37      	ldr	r3, [pc, #220]	@ (8001dc8 <HW_TS_Init+0x19c>)
 8001cea:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001cec:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001cf0:	f7ff fb9c 	bl	800142c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001cf4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001cf8:	f7ff fb84 	bl	8001404 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d13d      	bne.n	8001d7e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001d02:	4b32      	ldr	r3, [pc, #200]	@ (8001dcc <HW_TS_Init+0x1a0>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001d08:	4b31      	ldr	r3, [pc, #196]	@ (8001dd0 <HW_TS_Init+0x1a4>)
 8001d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001d10:	2300      	movs	r3, #0
 8001d12:	77fb      	strb	r3, [r7, #31]
 8001d14:	e00c      	b.n	8001d30 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001d16:	7ffa      	ldrb	r2, [r7, #31]
 8001d18:	492e      	ldr	r1, [pc, #184]	@ (8001dd4 <HW_TS_Init+0x1a8>)
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	440b      	add	r3, r1
 8001d24:	330c      	adds	r3, #12
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001d2a:	7ffb      	ldrb	r3, [r7, #31]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	77fb      	strb	r3, [r7, #31]
 8001d30:	7ffb      	ldrb	r3, [r7, #31]
 8001d32:	2b05      	cmp	r3, #5
 8001d34:	d9ef      	bls.n	8001d16 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001d36:	4b28      	ldr	r3, [pc, #160]	@ (8001dd8 <HW_TS_Init+0x1ac>)
 8001d38:	2206      	movs	r2, #6
 8001d3a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001db4 <HW_TS_Init+0x188>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	4b1c      	ldr	r3, [pc, #112]	@ (8001db4 <HW_TS_Init+0x188>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d4a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001d4c:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <HW_TS_Init+0x188>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	4b17      	ldr	r3, [pc, #92]	@ (8001db4 <HW_TS_Init+0x188>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001d5c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ddc <HW_TS_Init+0x1b0>)
 8001d60:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001d64:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001d66:	2003      	movs	r0, #3
 8001d68:	f002 fc47 	bl	80045fa <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001d6c:	4b11      	ldr	r3, [pc, #68]	@ (8001db4 <HW_TS_Init+0x188>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	4b10      	ldr	r3, [pc, #64]	@ (8001db4 <HW_TS_Init+0x188>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	e009      	b.n	8001d92 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001db4 <HW_TS_Init+0x188>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001d8c:	2003      	movs	r0, #3
 8001d8e:	f002 fc26 	bl	80045de <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001d92:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <HW_TS_Init+0x188>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	22ff      	movs	r2, #255	@ 0xff
 8001d98:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2103      	movs	r1, #3
 8001d9e:	2003      	movs	r0, #3
 8001da0:	f002 fbdb 	bl	800455a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001da4:	2003      	movs	r0, #3
 8001da6:	f002 fbf2 	bl	800458e <HAL_NVIC_EnableIRQ>

  return;
 8001daa:	bf00      	nop
}
 8001dac:	3720      	adds	r7, #32
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000690 	.word	0x20000690
 8001db8:	40002800 	.word	0x40002800
 8001dbc:	20000591 	.word	0x20000591
 8001dc0:	20000592 	.word	0x20000592
 8001dc4:	20000594 	.word	0x20000594
 8001dc8:	20000596 	.word	0x20000596
 8001dcc:	20000590 	.word	0x20000590
 8001dd0:	2000058c 	.word	0x2000058c
 8001dd4:	200004f8 	.word	0x200004f8
 8001dd8:	20000588 	.word	0x20000588
 8001ddc:	58000800 	.word	0x58000800

08001de0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dea:	f3ef 8310 	mrs	r3, PRIMASK
 8001dee:	60fb      	str	r3, [r7, #12]
  return(result);
 8001df0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001df2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001df4:	b672      	cpsid	i
}
 8001df6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001df8:	2003      	movs	r0, #3
 8001dfa:	f002 fbd6 	bl	80045aa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001dfe:	4b34      	ldr	r3, [pc, #208]	@ (8001ed0 <HW_TS_Stop+0xf0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	22ca      	movs	r2, #202	@ 0xca
 8001e04:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e06:	4b32      	ldr	r3, [pc, #200]	@ (8001ed0 <HW_TS_Stop+0xf0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2253      	movs	r2, #83	@ 0x53
 8001e0c:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001e0e:	79fa      	ldrb	r2, [r7, #7]
 8001e10:	4930      	ldr	r1, [pc, #192]	@ (8001ed4 <HW_TS_Stop+0xf4>)
 8001e12:	4613      	mov	r3, r2
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4413      	add	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	440b      	add	r3, r1
 8001e1c:	330c      	adds	r3, #12
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d142      	bne.n	8001eac <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fc80 	bl	8001730 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001e30:	4b29      	ldr	r3, [pc, #164]	@ (8001ed8 <HW_TS_Stop+0xf8>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e36:	7cfb      	ldrb	r3, [r7, #19]
 8001e38:	2b06      	cmp	r3, #6
 8001e3a:	d12f      	bne.n	8001e9c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001e3c:	4b27      	ldr	r3, [pc, #156]	@ (8001edc <HW_TS_Stop+0xfc>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e48:	d107      	bne.n	8001e5a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001e4a:	bf00      	nop
 8001e4c:	4b20      	ldr	r3, [pc, #128]	@ (8001ed0 <HW_TS_Stop+0xf0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f8      	bne.n	8001e4c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed0 <HW_TS_Stop+0xf0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed0 <HW_TS_Stop+0xf0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e68:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001e6a:	bf00      	nop
 8001e6c:	4b18      	ldr	r3, [pc, #96]	@ (8001ed0 <HW_TS_Stop+0xf0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f8      	beq.n	8001e6c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001e7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <HW_TS_Stop+0xf0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <HW_TS_Stop+0xf0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001e8a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001e8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ee0 <HW_TS_Stop+0x100>)
 8001e8e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001e92:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001e94:	2003      	movs	r0, #3
 8001e96:	f002 fbb0 	bl	80045fa <HAL_NVIC_ClearPendingIRQ>
 8001e9a:	e007      	b.n	8001eac <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001e9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <HW_TS_Stop+0x104>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	7cfa      	ldrb	r2, [r7, #19]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001ea8:	f7ff fd5e 	bl	8001968 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001eac:	4b08      	ldr	r3, [pc, #32]	@ (8001ed0 <HW_TS_Stop+0xf0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	22ff      	movs	r2, #255	@ 0xff
 8001eb2:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	f002 fb6a 	bl	800458e <HAL_NVIC_EnableIRQ>
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f383 8810 	msr	PRIMASK, r3
}
 8001ec4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001ec6:	bf00      	nop
}
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000690 	.word	0x20000690
 8001ed4:	200004f8 	.word	0x200004f8
 8001ed8:	20000588 	.word	0x20000588
 8001edc:	40002800 	.word	0x40002800
 8001ee0:	58000800 	.word	0x58000800
 8001ee4:	20000589 	.word	0x20000589

08001ee8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001ef4:	79fa      	ldrb	r2, [r7, #7]
 8001ef6:	493b      	ldr	r1, [pc, #236]	@ (8001fe4 <HW_TS_Start+0xfc>)
 8001ef8:	4613      	mov	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	440b      	add	r3, r1
 8001f02:	330c      	adds	r3, #12
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d103      	bne.n	8001f14 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ff66 	bl	8001de0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f14:	f3ef 8310 	mrs	r3, PRIMASK
 8001f18:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001f1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f1e:	b672      	cpsid	i
}
 8001f20:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001f22:	2003      	movs	r0, #3
 8001f24:	f002 fb41 	bl	80045aa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f28:	4b2f      	ldr	r3, [pc, #188]	@ (8001fe8 <HW_TS_Start+0x100>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	22ca      	movs	r2, #202	@ 0xca
 8001f2e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f30:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe8 <HW_TS_Start+0x100>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2253      	movs	r2, #83	@ 0x53
 8001f36:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001f38:	79fa      	ldrb	r2, [r7, #7]
 8001f3a:	492a      	ldr	r1, [pc, #168]	@ (8001fe4 <HW_TS_Start+0xfc>)
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	440b      	add	r3, r1
 8001f46:	330c      	adds	r3, #12
 8001f48:	2202      	movs	r2, #2
 8001f4a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001f4c:	79fa      	ldrb	r2, [r7, #7]
 8001f4e:	4925      	ldr	r1, [pc, #148]	@ (8001fe4 <HW_TS_Start+0xfc>)
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	440b      	add	r3, r1
 8001f5a:	3308      	adds	r3, #8
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001f60:	79fa      	ldrb	r2, [r7, #7]
 8001f62:	4920      	ldr	r1, [pc, #128]	@ (8001fe4 <HW_TS_Start+0xfc>)
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	440b      	add	r3, r1
 8001f6e:	3304      	adds	r3, #4
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fb30 	bl	80015dc <linkTimer>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001f80:	4b1a      	ldr	r3, [pc, #104]	@ (8001fec <HW_TS_Start+0x104>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001f86:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff0 <HW_TS_Start+0x108>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	7c7a      	ldrb	r2, [r7, #17]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d002      	beq.n	8001f98 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001f92:	f7ff fce9 	bl	8001968 <RescheduleTimerList>
 8001f96:	e013      	b.n	8001fc0 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001f98:	79fa      	ldrb	r2, [r7, #7]
 8001f9a:	4912      	ldr	r1, [pc, #72]	@ (8001fe4 <HW_TS_Start+0xfc>)
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	4413      	add	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	440b      	add	r3, r1
 8001fa6:	3308      	adds	r3, #8
 8001fa8:	6819      	ldr	r1, [r3, #0]
 8001faa:	8a7b      	ldrh	r3, [r7, #18]
 8001fac:	79fa      	ldrb	r2, [r7, #7]
 8001fae:	1ac9      	subs	r1, r1, r3
 8001fb0:	480c      	ldr	r0, [pc, #48]	@ (8001fe4 <HW_TS_Start+0xfc>)
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4403      	add	r3, r0
 8001fbc:	3308      	adds	r3, #8
 8001fbe:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001fc0:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <HW_TS_Start+0x100>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	22ff      	movs	r2, #255	@ 0xff
 8001fc6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001fc8:	2003      	movs	r0, #3
 8001fca:	f002 fae0 	bl	800458e <HAL_NVIC_EnableIRQ>
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	f383 8810 	msr	PRIMASK, r3
}
 8001fd8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001fda:	bf00      	nop
}
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200004f8 	.word	0x200004f8
 8001fe8:	20000690 	.word	0x20000690
 8001fec:	20000588 	.word	0x20000588
 8001ff0:	20000589 	.word	0x20000589

08001ff4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4798      	blx	r3

  return;
 8002006:	bf00      	nop
}
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	4603      	mov	r3, r0
 800201c:	73fb      	strb	r3, [r7, #15]
 800201e:	4613      	mov	r3, r2
 8002020:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8002026:	2300      	movs	r3, #0
 8002028:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10e      	bne.n	800204e <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8002030:	4a17      	ldr	r2, [pc, #92]	@ (8002090 <HW_UART_Transmit_DMA+0x80>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8002036:	4b17      	ldr	r3, [pc, #92]	@ (8002094 <HW_UART_Transmit_DMA+0x84>)
 8002038:	4a17      	ldr	r2, [pc, #92]	@ (8002098 <HW_UART_Transmit_DMA+0x88>)
 800203a:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 800203c:	89bb      	ldrh	r3, [r7, #12]
 800203e:	461a      	mov	r2, r3
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	4814      	ldr	r0, [pc, #80]	@ (8002094 <HW_UART_Transmit_DMA+0x84>)
 8002044:	f005 fb6c 	bl	8007720 <HAL_UART_Transmit_DMA>
 8002048:	4603      	mov	r3, r0
 800204a:	75fb      	strb	r3, [r7, #23]
            break;
 800204c:	e000      	b.n	8002050 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800204e:	bf00      	nop
    }

    switch (hal_status)
 8002050:	7dfb      	ldrb	r3, [r7, #23]
 8002052:	2b03      	cmp	r3, #3
 8002054:	d816      	bhi.n	8002084 <HW_UART_Transmit_DMA+0x74>
 8002056:	a201      	add	r2, pc, #4	@ (adr r2, 800205c <HW_UART_Transmit_DMA+0x4c>)
 8002058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205c:	0800206d 	.word	0x0800206d
 8002060:	08002073 	.word	0x08002073
 8002064:	08002079 	.word	0x08002079
 8002068:	0800207f 	.word	0x0800207f
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 800206c:	2300      	movs	r3, #0
 800206e:	75bb      	strb	r3, [r7, #22]
            break;
 8002070:	e009      	b.n	8002086 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002072:	2301      	movs	r3, #1
 8002074:	75bb      	strb	r3, [r7, #22]
            break;
 8002076:	e006      	b.n	8002086 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002078:	2302      	movs	r3, #2
 800207a:	75bb      	strb	r3, [r7, #22]
            break;
 800207c:	e003      	b.n	8002086 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800207e:	2303      	movs	r3, #3
 8002080:	75bb      	strb	r3, [r7, #22]
            break;
 8002082:	e000      	b.n	8002086 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002084:	bf00      	nop
    }

    return hw_status;
 8002086:	7dbb      	ldrb	r3, [r7, #22]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000598 	.word	0x20000598
 8002094:	200006b4 	.word	0x200006b4
 8002098:	40013800 	.word	0x40013800

0800209c <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b09      	ldr	r3, [pc, #36]	@ (80020d0 <HAL_UART_TxCpltCallback+0x34>)
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d107      	bne.n	80020c0 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80020b0:	4b08      	ldr	r3, [pc, #32]	@ (80020d4 <HAL_UART_TxCpltCallback+0x38>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80020b8:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <HAL_UART_TxCpltCallback+0x38>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4798      	blx	r3
            }
            break;
 80020be:	e001      	b.n	80020c4 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80020c0:	bf00      	nop
 80020c2:	e000      	b.n	80020c6 <HAL_UART_TxCpltCallback+0x2a>
            break;
 80020c4:	bf00      	nop
    }

    return;
 80020c6:	bf00      	nop
}
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40013800 	.word	0x40013800
 80020d4:	20000598 	.word	0x20000598

080020d8 <LL_RCC_LSE_SetDriveCapability>:
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80020e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e8:	f023 0218 	bic.w	r2, r3, #24
 80020ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_AHB2_GRP1_EnableClock>:
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002110:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002112:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4313      	orrs	r3, r2
 800211a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800211c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002120:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4013      	ands	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002128:	68fb      	ldr	r3, [r7, #12]
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800213e:	f001 f995 	bl	800346c <HAL_Init>
	/* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
	MX_APPE_Config();
 8002142:	f7fe ff3f 	bl	8000fc4 <MX_APPE_Config>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002146:	f000 f8f7 	bl	8002338 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800214a:	f000 f961 	bl	8002410 <PeriphCommonClock_Config>

	/* IPCC initialisation */
	MX_IPCC_Init();
 800214e:	f000 fa27 	bl	80025a0 <MX_IPCC_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002152:	f000 fac3 	bl	80026dc <MX_GPIO_Init>
	MX_RTC_Init();
 8002156:	f000 fa3f 	bl	80025d8 <MX_RTC_Init>
	MX_ADC1_Init();
 800215a:	f000 f979 	bl	8002450 <MX_ADC1_Init>
	MX_I2C1_Init();
 800215e:	f000 f9db 	bl	8002518 <MX_I2C1_Init>
	MX_RF_Init();
 8002162:	f000 fa31 	bl	80025c8 <MX_RF_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init code for STM32_WPAN */
	MX_APPE_Init();
 8002166:	f7fe ff3b 	bl	8000fe0 <MX_APPE_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	oled_init();
 800216a:	f000 fe67 	bl	8002e3c <oled_init>

	//speedometer digit test
	oled_RenderGlyph(&speedometer_digit_1, GLYPH_DIGIT_6, GLYPH_MODE_OVERWRITE);
 800216e:	2200      	movs	r2, #0
 8002170:	2106      	movs	r1, #6
 8002172:	485f      	ldr	r0, [pc, #380]	@ (80022f0 <main+0x1b8>)
 8002174:	f001 f916 	bl	80033a4 <oled_RenderGlyph>
	oled_RenderGlyph(&speedometer_digit_2, GLYPH_DIGIT_2, GLYPH_MODE_OVERWRITE);
 8002178:	2200      	movs	r2, #0
 800217a:	2102      	movs	r1, #2
 800217c:	485d      	ldr	r0, [pc, #372]	@ (80022f4 <main+0x1bc>)
 800217e:	f001 f911 	bl	80033a4 <oled_RenderGlyph>
	oled_RenderGlyph(&speedometer_digit_3, GLYPH_DIGIT_1, GLYPH_MODE_OVERWRITE);
 8002182:	2200      	movs	r2, #0
 8002184:	2101      	movs	r1, #1
 8002186:	485c      	ldr	r0, [pc, #368]	@ (80022f8 <main+0x1c0>)
 8002188:	f001 f90c 	bl	80033a4 <oled_RenderGlyph>

	//rpm font test
	oled_RenderGlyph(&rpm_integer_digit_1, GLYPH_DIGIT_4, GLYPH_MODE_OVERWRITE);
 800218c:	2200      	movs	r2, #0
 800218e:	2104      	movs	r1, #4
 8002190:	485a      	ldr	r0, [pc, #360]	@ (80022fc <main+0x1c4>)
 8002192:	f001 f907 	bl	80033a4 <oled_RenderGlyph>
	oled_RenderGlyph(&rpm_decimal_digit_2, GLYPH_DIGIT_5, GLYPH_MODE_OVERWRITE);
 8002196:	2200      	movs	r2, #0
 8002198:	2105      	movs	r1, #5
 800219a:	4859      	ldr	r0, [pc, #356]	@ (8002300 <main+0x1c8>)
 800219c:	f001 f902 	bl	80033a4 <oled_RenderGlyph>

	//clock font test
	oled_RenderGlyph(&time_hour_digit_1, GLYPH_DIGIT_2, GLYPH_MODE_OVERWRITE);
 80021a0:	2200      	movs	r2, #0
 80021a2:	2102      	movs	r1, #2
 80021a4:	4857      	ldr	r0, [pc, #348]	@ (8002304 <main+0x1cc>)
 80021a6:	f001 f8fd 	bl	80033a4 <oled_RenderGlyph>
	oled_RenderGlyph(&time_hour_digit_2, GLYPH_DIGIT_3, GLYPH_MODE_OVERWRITE);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2103      	movs	r1, #3
 80021ae:	4856      	ldr	r0, [pc, #344]	@ (8002308 <main+0x1d0>)
 80021b0:	f001 f8f8 	bl	80033a4 <oled_RenderGlyph>
	oled_RenderGlyph(&time_minute_digit_1, GLYPH_DIGIT_5, GLYPH_MODE_OVERWRITE);
 80021b4:	2200      	movs	r2, #0
 80021b6:	2105      	movs	r1, #5
 80021b8:	4854      	ldr	r0, [pc, #336]	@ (800230c <main+0x1d4>)
 80021ba:	f001 f8f3 	bl	80033a4 <oled_RenderGlyph>
	oled_RenderGlyph(&time_minute_digit_2, GLYPH_DIGIT_4, GLYPH_MODE_OVERWRITE);
 80021be:	2200      	movs	r2, #0
 80021c0:	2104      	movs	r1, #4
 80021c2:	4853      	ldr	r0, [pc, #332]	@ (8002310 <main+0x1d8>)
 80021c4:	f001 f8ee 	bl	80033a4 <oled_RenderGlyph>

	//battery voltage font test
	oled_RenderGlyph(&battery_integer_digit_1, GLYPH_DIGIT_3, GLYPH_MODE_OVERWRITE);
 80021c8:	2200      	movs	r2, #0
 80021ca:	2103      	movs	r1, #3
 80021cc:	4851      	ldr	r0, [pc, #324]	@ (8002314 <main+0x1dc>)
 80021ce:	f001 f8e9 	bl	80033a4 <oled_RenderGlyph>
	oled_RenderGlyph(&battery_decimal_digit_1, GLYPH_DIGIT_6, GLYPH_MODE_OVERWRITE);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2106      	movs	r1, #6
 80021d6:	4850      	ldr	r0, [pc, #320]	@ (8002318 <main+0x1e0>)
 80021d8:	f001 f8e4 	bl	80033a4 <oled_RenderGlyph>
	oled_RenderGlyph(&battery_V_char, GLYPH_V_CHAR, GLYPH_MODE_OVERWRITE);
 80021dc:	2200      	movs	r2, #0
 80021de:	210a      	movs	r1, #10
 80021e0:	484e      	ldr	r0, [pc, #312]	@ (800231c <main+0x1e4>)
 80021e2:	f001 f8df 	bl	80033a4 <oled_RenderGlyph>

	oled_UpdateScreen();
 80021e6:	f000 fed3 	bl	8002f90 <oled_UpdateScreen>

	uint8_t rpm_index = 0, fuel_index = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	71fb      	strb	r3, [r7, #7]
 80021ee:	2300      	movs	r3, #0
 80021f0:	71bb      	strb	r3, [r7, #6]
	while (1)
	{
		/* USER CODE END WHILE */
		MX_APPE_Process();
 80021f2:	f7ff f8d6 	bl	80013a2 <MX_APPE_Process>

		/* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 80021f6:	2201      	movs	r2, #1
 80021f8:	2104      	movs	r1, #4
 80021fa:	4849      	ldr	r0, [pc, #292]	@ (8002320 <main+0x1e8>)
 80021fc:	f002 fcf2 	bl	8004be4 <HAL_GPIO_WritePin>

		oled_RenderGlyph(&bluetooth_broadcasting_icon, GLYPH_SINGLE_ELEMENT, GLYPH_MODE_TOGGLE);
 8002200:	2203      	movs	r2, #3
 8002202:	210c      	movs	r1, #12
 8002204:	4847      	ldr	r0, [pc, #284]	@ (8002324 <main+0x1ec>)
 8002206:	f001 f8cd 	bl	80033a4 <oled_RenderGlyph>
		oled_RenderGlyph(&left_turn_signal, GLYPH_SINGLE_ELEMENT, GLYPH_MODE_TOGGLE);
 800220a:	2203      	movs	r2, #3
 800220c:	210c      	movs	r1, #12
 800220e:	4846      	ldr	r0, [pc, #280]	@ (8002328 <main+0x1f0>)
 8002210:	f001 f8c8 	bl	80033a4 <oled_RenderGlyph>
		oled_RenderGlyph(&right_turn_signal, GLYPH_SINGLE_ELEMENT, GLYPH_MODE_TOGGLE);
 8002214:	2203      	movs	r2, #3
 8002216:	210c      	movs	r1, #12
 8002218:	4844      	ldr	r0, [pc, #272]	@ (800232c <main+0x1f4>)
 800221a:	f001 f8c3 	bl	80033a4 <oled_RenderGlyph>

		//clock font test
		oled_RenderGlyph(&time_hour_digit_1, rpm_index, GLYPH_MODE_OVERWRITE);
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	2200      	movs	r2, #0
 8002222:	4619      	mov	r1, r3
 8002224:	4837      	ldr	r0, [pc, #220]	@ (8002304 <main+0x1cc>)
 8002226:	f001 f8bd 	bl	80033a4 <oled_RenderGlyph>
		oled_RenderGlyph(&time_hour_digit_2, rpm_index, GLYPH_MODE_OVERWRITE);
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	2200      	movs	r2, #0
 800222e:	4619      	mov	r1, r3
 8002230:	4835      	ldr	r0, [pc, #212]	@ (8002308 <main+0x1d0>)
 8002232:	f001 f8b7 	bl	80033a4 <oled_RenderGlyph>
		oled_RenderGlyph(&time_minute_digit_1, rpm_index, GLYPH_MODE_OVERWRITE);
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	2200      	movs	r2, #0
 800223a:	4619      	mov	r1, r3
 800223c:	4833      	ldr	r0, [pc, #204]	@ (800230c <main+0x1d4>)
 800223e:	f001 f8b1 	bl	80033a4 <oled_RenderGlyph>
		oled_RenderGlyph(&time_minute_digit_2, rpm_index, GLYPH_MODE_OVERWRITE);
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	2200      	movs	r2, #0
 8002246:	4619      	mov	r1, r3
 8002248:	4831      	ldr	r0, [pc, #196]	@ (8002310 <main+0x1d8>)
 800224a:	f001 f8ab 	bl	80033a4 <oled_RenderGlyph>

		//battery voltage font test
		oled_RenderGlyph(&battery_integer_digit_1, rpm_index, GLYPH_MODE_OVERWRITE);
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	2200      	movs	r2, #0
 8002252:	4619      	mov	r1, r3
 8002254:	482f      	ldr	r0, [pc, #188]	@ (8002314 <main+0x1dc>)
 8002256:	f001 f8a5 	bl	80033a4 <oled_RenderGlyph>
		oled_RenderGlyph(&battery_decimal_digit_1, rpm_index, GLYPH_MODE_OVERWRITE);
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	2200      	movs	r2, #0
 800225e:	4619      	mov	r1, r3
 8002260:	482d      	ldr	r0, [pc, #180]	@ (8002318 <main+0x1e0>)
 8002262:	f001 f89f 	bl	80033a4 <oled_RenderGlyph>

		//test drawing rpm gauge glyph
		oled_RenderGlyph(&rpm_bar_gauge, rpm_index, GLYPH_MODE_OVERWRITE);
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	2200      	movs	r2, #0
 800226a:	4619      	mov	r1, r3
 800226c:	4830      	ldr	r0, [pc, #192]	@ (8002330 <main+0x1f8>)
 800226e:	f001 f899 	bl	80033a4 <oled_RenderGlyph>
		oled_RenderGlyph(&rpm_integer_digit_1, rpm_index, GLYPH_MODE_OVERWRITE);
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	2200      	movs	r2, #0
 8002276:	4619      	mov	r1, r3
 8002278:	4820      	ldr	r0, [pc, #128]	@ (80022fc <main+0x1c4>)
 800227a:	f001 f893 	bl	80033a4 <oled_RenderGlyph>
		oled_RenderGlyph(&rpm_decimal_digit_2, rpm_index, GLYPH_MODE_OVERWRITE);
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	2200      	movs	r2, #0
 8002282:	4619      	mov	r1, r3
 8002284:	481e      	ldr	r0, [pc, #120]	@ (8002300 <main+0x1c8>)
 8002286:	f001 f88d 	bl	80033a4 <oled_RenderGlyph>

		//test drawing fuel gauge glyph
		oled_RenderGlyph(&fuel_bar_gauge, fuel_index, GLYPH_MODE_OVERWRITE);
 800228a:	79bb      	ldrb	r3, [r7, #6]
 800228c:	2200      	movs	r2, #0
 800228e:	4619      	mov	r1, r3
 8002290:	4828      	ldr	r0, [pc, #160]	@ (8002334 <main+0x1fc>)
 8002292:	f001 f887 	bl	80033a4 <oled_RenderGlyph>

		oled_RenderGlyph(&speedometer_digit_1, rpm_index, GLYPH_MODE_OVERWRITE);
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	2200      	movs	r2, #0
 800229a:	4619      	mov	r1, r3
 800229c:	4814      	ldr	r0, [pc, #80]	@ (80022f0 <main+0x1b8>)
 800229e:	f001 f881 	bl	80033a4 <oled_RenderGlyph>
		oled_RenderGlyph(&speedometer_digit_2, rpm_index, GLYPH_MODE_OVERWRITE);
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	2200      	movs	r2, #0
 80022a6:	4619      	mov	r1, r3
 80022a8:	4812      	ldr	r0, [pc, #72]	@ (80022f4 <main+0x1bc>)
 80022aa:	f001 f87b 	bl	80033a4 <oled_RenderGlyph>
		oled_RenderGlyph(&speedometer_digit_3, rpm_index, GLYPH_MODE_OVERWRITE);
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	2200      	movs	r2, #0
 80022b2:	4619      	mov	r1, r3
 80022b4:	4810      	ldr	r0, [pc, #64]	@ (80022f8 <main+0x1c0>)
 80022b6:	f001 f875 	bl	80033a4 <oled_RenderGlyph>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2104      	movs	r1, #4
 80022be:	4818      	ldr	r0, [pc, #96]	@ (8002320 <main+0x1e8>)
 80022c0:	f002 fc90 	bl	8004be4 <HAL_GPIO_WritePin>

		oled_UpdateScreen();
 80022c4:	f000 fe64 	bl	8002f90 <oled_UpdateScreen>

		rpm_index++;
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	3301      	adds	r3, #1
 80022cc:	71fb      	strb	r3, [r7, #7]
		fuel_index++;
 80022ce:	79bb      	ldrb	r3, [r7, #6]
 80022d0:	3301      	adds	r3, #1
 80022d2:	71bb      	strb	r3, [r7, #6]

		if(rpm_index > GLYPH_GAUGE_LEVEL_9) rpm_index = 0;
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	2b09      	cmp	r3, #9
 80022d8:	d901      	bls.n	80022de <main+0x1a6>
 80022da:	2300      	movs	r3, #0
 80022dc:	71fb      	strb	r3, [r7, #7]
		if(fuel_index > GLYPH_GAUGE_LEVEL_6) fuel_index = 0;
 80022de:	79bb      	ldrb	r3, [r7, #6]
 80022e0:	2b06      	cmp	r3, #6
 80022e2:	d901      	bls.n	80022e8 <main+0x1b0>
 80022e4:	2300      	movs	r3, #0
 80022e6:	71bb      	strb	r3, [r7, #6]

		HAL_Delay(100);
 80022e8:	2064      	movs	r0, #100	@ 0x64
 80022ea:	f7ff f835 	bl	8001358 <HAL_Delay>
		MX_APPE_Process();
 80022ee:	e780      	b.n	80021f2 <main+0xba>
 80022f0:	0800f738 	.word	0x0800f738
 80022f4:	0800f744 	.word	0x0800f744
 80022f8:	0800f750 	.word	0x0800f750
 80022fc:	0800f75c 	.word	0x0800f75c
 8002300:	0800f768 	.word	0x0800f768
 8002304:	0800f774 	.word	0x0800f774
 8002308:	0800f780 	.word	0x0800f780
 800230c:	0800f78c 	.word	0x0800f78c
 8002310:	0800f798 	.word	0x0800f798
 8002314:	0800f7a4 	.word	0x0800f7a4
 8002318:	0800f7b0 	.word	0x0800f7b0
 800231c:	0800f7bc 	.word	0x0800f7bc
 8002320:	48000800 	.word	0x48000800
 8002324:	0800f6fc 	.word	0x0800f6fc
 8002328:	0800f708 	.word	0x0800f708
 800232c:	0800f714 	.word	0x0800f714
 8002330:	0800f72c 	.word	0x0800f72c
 8002334:	0800f720 	.word	0x0800f720

08002338 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b09a      	sub	sp, #104	@ 0x68
 800233c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800233e:	f107 0320 	add.w	r3, r7, #32
 8002342:	2248      	movs	r2, #72	@ 0x48
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f00b f8ee 	bl	800d528 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800234c:	1d3b      	adds	r3, r7, #4
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	609a      	str	r2, [r3, #8]
 8002356:	60da      	str	r2, [r3, #12]
 8002358:	611a      	str	r2, [r3, #16]
 800235a:	615a      	str	r2, [r3, #20]
 800235c:	619a      	str	r2, [r3, #24]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800235e:	f003 f9cb 	bl	80056f8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8002362:	2010      	movs	r0, #16
 8002364:	f7ff feb8 	bl	80020d8 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002368:	4b28      	ldr	r3, [pc, #160]	@ (800240c <SystemClock_Config+0xd4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002370:	4a26      	ldr	r2, [pc, #152]	@ (800240c <SystemClock_Config+0xd4>)
 8002372:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	4b24      	ldr	r3, [pc, #144]	@ (800240c <SystemClock_Config+0xd4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002384:	2307      	movs	r3, #7
 8002386:	623b      	str	r3, [r7, #32]
			|RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002388:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800238e:	2301      	movs	r3, #1
 8002390:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002392:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002396:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002398:	2340      	movs	r3, #64	@ 0x40
 800239a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800239c:	2302      	movs	r3, #2
 800239e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023a0:	2303      	movs	r3, #3
 80023a2:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80023a4:	2310      	movs	r3, #16
 80023a6:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLN = 8;
 80023a8:	2308      	movs	r3, #8
 80023aa:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80023b2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80023b6:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80023b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023bc:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023be:	f107 0320 	add.w	r3, r7, #32
 80023c2:	4618      	mov	r0, r3
 80023c4:	f003 fd2c 	bl	8005e20 <HAL_RCC_OscConfig>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80023ce:	f000 f9bd 	bl	800274c <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80023d2:	236f      	movs	r3, #111	@ 0x6f
 80023d4:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023d6:	2303      	movs	r3, #3
 80023d8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80023e6:	2380      	movs	r3, #128	@ 0x80
 80023e8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	2103      	movs	r1, #3
 80023f2:	4618      	mov	r0, r3
 80023f4:	f004 f888 	bl	8006508 <HAL_RCC_ClockConfig>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <SystemClock_Config+0xca>
	{
		Error_Handler();
 80023fe:	f000 f9a5 	bl	800274c <Error_Handler>
	}
}
 8002402:	bf00      	nop
 8002404:	3768      	adds	r7, #104	@ 0x68
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	58000400 	.word	0x58000400

08002410 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b094      	sub	sp, #80	@ 0x50
 8002414:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002416:	463b      	mov	r3, r7
 8002418:	2250      	movs	r2, #80	@ 0x50
 800241a:	2100      	movs	r1, #0
 800241c:	4618      	mov	r0, r3
 800241e:	f00b f883 	bl	800d528 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002422:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002426:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002428:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800242c:	647b      	str	r3, [r7, #68]	@ 0x44
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800242e:	2302      	movs	r3, #2
 8002430:	64bb      	str	r3, [r7, #72]	@ 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002432:	2310      	movs	r3, #16
 8002434:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002436:	463b      	mov	r3, r7
 8002438:	4618      	mov	r0, r3
 800243a:	f004 fca2 	bl	8006d82 <HAL_RCCEx_PeriphCLKConfig>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <PeriphCommonClock_Config+0x38>
	{
		Error_Handler();
 8002444:	f000 f982 	bl	800274c <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 8002448:	bf00      	nop
 800244a:	3750      	adds	r7, #80	@ 0x50
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8002456:	463b      	mov	r3, r7
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]
 8002464:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8002466:	4b29      	ldr	r3, [pc, #164]	@ (800250c <MX_ADC1_Init+0xbc>)
 8002468:	4a29      	ldr	r2, [pc, #164]	@ (8002510 <MX_ADC1_Init+0xc0>)
 800246a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800246c:	4b27      	ldr	r3, [pc, #156]	@ (800250c <MX_ADC1_Init+0xbc>)
 800246e:	2200      	movs	r2, #0
 8002470:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002472:	4b26      	ldr	r3, [pc, #152]	@ (800250c <MX_ADC1_Init+0xbc>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002478:	4b24      	ldr	r3, [pc, #144]	@ (800250c <MX_ADC1_Init+0xbc>)
 800247a:	2200      	movs	r2, #0
 800247c:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800247e:	4b23      	ldr	r3, [pc, #140]	@ (800250c <MX_ADC1_Init+0xbc>)
 8002480:	2200      	movs	r2, #0
 8002482:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002484:	4b21      	ldr	r3, [pc, #132]	@ (800250c <MX_ADC1_Init+0xbc>)
 8002486:	2204      	movs	r2, #4
 8002488:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800248a:	4b20      	ldr	r3, [pc, #128]	@ (800250c <MX_ADC1_Init+0xbc>)
 800248c:	2200      	movs	r2, #0
 800248e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002490:	4b1e      	ldr	r3, [pc, #120]	@ (800250c <MX_ADC1_Init+0xbc>)
 8002492:	2200      	movs	r2, #0
 8002494:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8002496:	4b1d      	ldr	r3, [pc, #116]	@ (800250c <MX_ADC1_Init+0xbc>)
 8002498:	2201      	movs	r2, #1
 800249a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800249c:	4b1b      	ldr	r3, [pc, #108]	@ (800250c <MX_ADC1_Init+0xbc>)
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024a4:	4b19      	ldr	r3, [pc, #100]	@ (800250c <MX_ADC1_Init+0xbc>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024aa:	4b18      	ldr	r3, [pc, #96]	@ (800250c <MX_ADC1_Init+0xbc>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80024b0:	4b16      	ldr	r3, [pc, #88]	@ (800250c <MX_ADC1_Init+0xbc>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80024b8:	4b14      	ldr	r3, [pc, #80]	@ (800250c <MX_ADC1_Init+0xbc>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80024be:	4b13      	ldr	r3, [pc, #76]	@ (800250c <MX_ADC1_Init+0xbc>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024c6:	4811      	ldr	r0, [pc, #68]	@ (800250c <MX_ADC1_Init+0xbc>)
 80024c8:	f001 f9fa 	bl	80038c0 <HAL_ADC_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_ADC1_Init+0x86>
	{
		Error_Handler();
 80024d2:	f000 f93b 	bl	800274c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 80024d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002514 <MX_ADC1_Init+0xc4>)
 80024d8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80024da:	2306      	movs	r3, #6
 80024dc:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80024e2:	237f      	movs	r3, #127	@ 0x7f
 80024e4:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80024e6:	2304      	movs	r3, #4
 80024e8:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024ee:	463b      	mov	r3, r7
 80024f0:	4619      	mov	r1, r3
 80024f2:	4806      	ldr	r0, [pc, #24]	@ (800250c <MX_ADC1_Init+0xbc>)
 80024f4:	f001 fb30 	bl	8003b58 <HAL_ADC_ConfigChannel>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_ADC1_Init+0xb2>
	{
		Error_Handler();
 80024fe:	f000 f925 	bl	800274c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002502:	bf00      	nop
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	2000059c 	.word	0x2000059c
 8002510:	50040000 	.word	0x50040000
 8002514:	14f00020 	.word	0x14f00020

08002518 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800251c:	4b1d      	ldr	r3, [pc, #116]	@ (8002594 <MX_I2C1_Init+0x7c>)
 800251e:	4a1e      	ldr	r2, [pc, #120]	@ (8002598 <MX_I2C1_Init+0x80>)
 8002520:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00910B1C;
 8002522:	4b1c      	ldr	r3, [pc, #112]	@ (8002594 <MX_I2C1_Init+0x7c>)
 8002524:	4a1d      	ldr	r2, [pc, #116]	@ (800259c <MX_I2C1_Init+0x84>)
 8002526:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8002528:	4b1a      	ldr	r3, [pc, #104]	@ (8002594 <MX_I2C1_Init+0x7c>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800252e:	4b19      	ldr	r3, [pc, #100]	@ (8002594 <MX_I2C1_Init+0x7c>)
 8002530:	2201      	movs	r2, #1
 8002532:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002534:	4b17      	ldr	r3, [pc, #92]	@ (8002594 <MX_I2C1_Init+0x7c>)
 8002536:	2200      	movs	r2, #0
 8002538:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800253a:	4b16      	ldr	r3, [pc, #88]	@ (8002594 <MX_I2C1_Init+0x7c>)
 800253c:	2200      	movs	r2, #0
 800253e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002540:	4b14      	ldr	r3, [pc, #80]	@ (8002594 <MX_I2C1_Init+0x7c>)
 8002542:	2200      	movs	r2, #0
 8002544:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002546:	4b13      	ldr	r3, [pc, #76]	@ (8002594 <MX_I2C1_Init+0x7c>)
 8002548:	2200      	movs	r2, #0
 800254a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800254c:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <MX_I2C1_Init+0x7c>)
 800254e:	2200      	movs	r2, #0
 8002550:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002552:	4810      	ldr	r0, [pc, #64]	@ (8002594 <MX_I2C1_Init+0x7c>)
 8002554:	f002 fb82 	bl	8004c5c <HAL_I2C_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 800255e:	f000 f8f5 	bl	800274c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002562:	2100      	movs	r1, #0
 8002564:	480b      	ldr	r0, [pc, #44]	@ (8002594 <MX_I2C1_Init+0x7c>)
 8002566:	f002 ff97 	bl	8005498 <HAL_I2CEx_ConfigAnalogFilter>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8002570:	f000 f8ec 	bl	800274c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002574:	2100      	movs	r1, #0
 8002576:	4807      	ldr	r0, [pc, #28]	@ (8002594 <MX_I2C1_Init+0x7c>)
 8002578:	f002 ffd9 	bl	800552e <HAL_I2CEx_ConfigDigitalFilter>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8002582:	f000 f8e3 	bl	800274c <Error_Handler>
	}

	/** I2C Enable Fast Mode Plus
	 */
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002586:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800258a:	f003 f81d 	bl	80055c8 <HAL_I2CEx_EnableFastModePlus>
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000600 	.word	0x20000600
 8002598:	40005400 	.word	0x40005400
 800259c:	00910b1c 	.word	0x00910b1c

080025a0 <MX_IPCC_Init>:
 * @brief IPCC Initialization Function
 * @param None
 * @retval None
 */
static void MX_IPCC_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
	/* USER CODE END IPCC_Init 0 */

	/* USER CODE BEGIN IPCC_Init 1 */

	/* USER CODE END IPCC_Init 1 */
	hipcc.Instance = IPCC;
 80025a4:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <MX_IPCC_Init+0x20>)
 80025a6:	4a07      	ldr	r2, [pc, #28]	@ (80025c4 <MX_IPCC_Init+0x24>)
 80025a8:	601a      	str	r2, [r3, #0]
	if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80025aa:	4805      	ldr	r0, [pc, #20]	@ (80025c0 <MX_IPCC_Init+0x20>)
 80025ac:	f003 f81e 	bl	80055ec <HAL_IPCC_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_IPCC_Init+0x1a>
	{
		Error_Handler();
 80025b6:	f000 f8c9 	bl	800274c <Error_Handler>
	}
	/* USER CODE BEGIN IPCC_Init 2 */

	/* USER CODE END IPCC_Init 2 */

}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000654 	.word	0x20000654
 80025c4:	58000c00 	.word	0x58000c00

080025c8 <MX_RF_Init>:
 * @brief RF Initialization Function
 * @param None
 * @retval None
 */
static void MX_RF_Init(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
	/* USER CODE END RF_Init 1 */
	/* USER CODE BEGIN RF_Init 2 */

	/* USER CODE END RF_Init 2 */

}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
	...

080025d8 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80025dc:	4b16      	ldr	r3, [pc, #88]	@ (8002638 <MX_RTC_Init+0x60>)
 80025de:	4a17      	ldr	r2, [pc, #92]	@ (800263c <MX_RTC_Init+0x64>)
 80025e0:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80025e2:	4b15      	ldr	r3, [pc, #84]	@ (8002638 <MX_RTC_Init+0x60>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80025e8:	4b13      	ldr	r3, [pc, #76]	@ (8002638 <MX_RTC_Init+0x60>)
 80025ea:	220f      	movs	r2, #15
 80025ec:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80025ee:	4b12      	ldr	r3, [pc, #72]	@ (8002638 <MX_RTC_Init+0x60>)
 80025f0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80025f4:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80025f6:	4b10      	ldr	r3, [pc, #64]	@ (8002638 <MX_RTC_Init+0x60>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80025fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002638 <MX_RTC_Init+0x60>)
 80025fe:	2200      	movs	r2, #0
 8002600:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002602:	4b0d      	ldr	r3, [pc, #52]	@ (8002638 <MX_RTC_Init+0x60>)
 8002604:	2200      	movs	r2, #0
 8002606:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002608:	4b0b      	ldr	r3, [pc, #44]	@ (8002638 <MX_RTC_Init+0x60>)
 800260a:	2200      	movs	r2, #0
 800260c:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800260e:	480a      	ldr	r0, [pc, #40]	@ (8002638 <MX_RTC_Init+0x60>)
 8002610:	f004 fe3e 	bl	8007290 <HAL_RTC_Init>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_RTC_Init+0x46>
	{
		Error_Handler();
 800261a:	f000 f897 	bl	800274c <Error_Handler>
	}

	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800261e:	2200      	movs	r2, #0
 8002620:	2100      	movs	r1, #0
 8002622:	4805      	ldr	r0, [pc, #20]	@ (8002638 <MX_RTC_Init+0x60>)
 8002624:	f004 ff40 	bl	80074a8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_RTC_Init+0x5a>
	{
		Error_Handler();
 800262e:	f000 f88d 	bl	800274c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000690 	.word	0x20000690
 800263c:	40002800 	.word	0x40002800

08002640 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART1_UART_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002644:	4b23      	ldr	r3, [pc, #140]	@ (80026d4 <MX_USART1_UART_Init+0x94>)
 8002646:	4a24      	ldr	r2, [pc, #144]	@ (80026d8 <MX_USART1_UART_Init+0x98>)
 8002648:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800264a:	4b22      	ldr	r3, [pc, #136]	@ (80026d4 <MX_USART1_UART_Init+0x94>)
 800264c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002650:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002652:	4b20      	ldr	r3, [pc, #128]	@ (80026d4 <MX_USART1_UART_Init+0x94>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002658:	4b1e      	ldr	r3, [pc, #120]	@ (80026d4 <MX_USART1_UART_Init+0x94>)
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800265e:	4b1d      	ldr	r3, [pc, #116]	@ (80026d4 <MX_USART1_UART_Init+0x94>)
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002664:	4b1b      	ldr	r3, [pc, #108]	@ (80026d4 <MX_USART1_UART_Init+0x94>)
 8002666:	220c      	movs	r2, #12
 8002668:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800266a:	4b1a      	ldr	r3, [pc, #104]	@ (80026d4 <MX_USART1_UART_Init+0x94>)
 800266c:	2200      	movs	r2, #0
 800266e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002670:	4b18      	ldr	r3, [pc, #96]	@ (80026d4 <MX_USART1_UART_Init+0x94>)
 8002672:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002676:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002678:	4b16      	ldr	r3, [pc, #88]	@ (80026d4 <MX_USART1_UART_Init+0x94>)
 800267a:	2200      	movs	r2, #0
 800267c:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800267e:	4b15      	ldr	r3, [pc, #84]	@ (80026d4 <MX_USART1_UART_Init+0x94>)
 8002680:	2200      	movs	r2, #0
 8002682:	625a      	str	r2, [r3, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002684:	4b13      	ldr	r3, [pc, #76]	@ (80026d4 <MX_USART1_UART_Init+0x94>)
 8002686:	2200      	movs	r2, #0
 8002688:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800268a:	4812      	ldr	r0, [pc, #72]	@ (80026d4 <MX_USART1_UART_Init+0x94>)
 800268c:	f004 fff8 	bl	8007680 <HAL_UART_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_USART1_UART_Init+0x5a>
	{
		Error_Handler();
 8002696:	f000 f859 	bl	800274c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800269a:	2100      	movs	r1, #0
 800269c:	480d      	ldr	r0, [pc, #52]	@ (80026d4 <MX_USART1_UART_Init+0x94>)
 800269e:	f006 f9d8 	bl	8008a52 <HAL_UARTEx_SetTxFifoThreshold>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_USART1_UART_Init+0x6c>
	{
		Error_Handler();
 80026a8:	f000 f850 	bl	800274c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026ac:	2100      	movs	r1, #0
 80026ae:	4809      	ldr	r0, [pc, #36]	@ (80026d4 <MX_USART1_UART_Init+0x94>)
 80026b0:	f006 fa0d 	bl	8008ace <HAL_UARTEx_SetRxFifoThreshold>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_USART1_UART_Init+0x7e>
	{
		Error_Handler();
 80026ba:	f000 f847 	bl	800274c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80026be:	4805      	ldr	r0, [pc, #20]	@ (80026d4 <MX_USART1_UART_Init+0x94>)
 80026c0:	f006 f98e 	bl	80089e0 <HAL_UARTEx_DisableFifoMode>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_USART1_UART_Init+0x8e>
	{
		Error_Handler();
 80026ca:	f000 f83f 	bl	800274c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	200006b4 	.word	0x200006b4
 80026d8:	40013800 	.word	0x40013800

080026dc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e2:	1d3b      	adds	r3, r7, #4
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80026f0:	2001      	movs	r0, #1
 80026f2:	f7ff fd07 	bl	8002104 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80026f6:	2004      	movs	r0, #4
 80026f8:	f7ff fd04 	bl	8002104 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80026fc:	2002      	movs	r0, #2
 80026fe:	f7ff fd01 	bl	8002104 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8002702:	2200      	movs	r2, #0
 8002704:	2104      	movs	r1, #4
 8002706:	4810      	ldr	r0, [pc, #64]	@ (8002748 <MX_GPIO_Init+0x6c>)
 8002708:	f002 fa6c 	bl	8004be4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800270c:	2304      	movs	r3, #4
 800270e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002710:	2301      	movs	r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002718:	2303      	movs	r3, #3
 800271a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	4619      	mov	r1, r3
 8002720:	4809      	ldr	r0, [pc, #36]	@ (8002748 <MX_GPIO_Init+0x6c>)
 8002722:	f002 f8ef 	bl	8004904 <HAL_GPIO_Init>

	/*Configure GPIO pin : USR_BTN1_Pin */
	GPIO_InitStruct.Pin = USR_BTN1_Pin;
 8002726:	2308      	movs	r3, #8
 8002728:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800272e:	2301      	movs	r3, #1
 8002730:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(USR_BTN1_GPIO_Port, &GPIO_InitStruct);
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	4619      	mov	r1, r3
 8002736:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800273a:	f002 f8e3 	bl	8004904 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 800273e:	bf00      	nop
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	48000800 	.word	0x48000800

0800274c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002750:	b672      	cpsid	i
}
 8002752:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002754:	bf00      	nop
 8002756:	e7fd      	b.n	8002754 <Error_Handler+0x8>

08002758 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800275c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002764:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002768:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800276c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <LL_AHB2_GRP1_EnableClock>:
{
 800277a:	b480      	push	{r7}
 800277c:	b085      	sub	sp, #20
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002782:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002786:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002788:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4313      	orrs	r3, r2
 8002790:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002792:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002796:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4013      	ands	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800279e:	68fb      	ldr	r3, [r7, #12]
}
 80027a0:	bf00      	nop
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <LL_AHB3_GRP1_EnableClock>:
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80027b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80027c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4013      	ands	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027d0:	68fb      	ldr	r3, [r7, #12]
}
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <LL_APB1_GRP1_EnableClock>:
{
 80027de:	b480      	push	{r7}
 80027e0:	b085      	sub	sp, #20
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80027e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027ea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80027ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80027f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027fa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4013      	ands	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002802:	68fb      	ldr	r3, [r7, #12]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <LL_APB2_GRP1_EnableClock>:
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800281c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800281e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4313      	orrs	r3, r2
 8002826:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800282c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4013      	ands	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002834:	68fb      	ldr	r3, [r7, #12]
}
 8002836:	bf00      	nop
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002846:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800284a:	f7ff ffaf 	bl	80027ac <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2100      	movs	r1, #0
 8002852:	202e      	movs	r0, #46	@ 0x2e
 8002854:	f001 fe81 	bl	800455a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002858:	202e      	movs	r0, #46	@ 0x2e
 800285a:	f001 fe98 	bl	800458e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b09c      	sub	sp, #112	@ 0x70
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800287c:	f107 030c 	add.w	r3, r7, #12
 8002880:	2250      	movs	r2, #80	@ 0x50
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f00a fe4f 	bl	800d528 <memset>
  if(hadc->Instance==ADC1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a1c      	ldr	r2, [pc, #112]	@ (8002900 <HAL_ADC_MspInit+0x9c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d131      	bne.n	80028f8 <HAL_ADC_MspInit+0x94>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002894:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002898:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 8;
 800289a:	2308      	movs	r3, #8
 800289c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800289e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028a2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80028a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80028aa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80028ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 80028b0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80028b4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80028b6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80028ba:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028bc:	f107 030c 	add.w	r3, r7, #12
 80028c0:	4618      	mov	r0, r3
 80028c2:	f004 fa5e 	bl	8006d82 <HAL_RCCEx_PeriphCLKConfig>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 80028cc:	f7ff ff3e 	bl	800274c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80028d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80028d4:	f7ff ff51 	bl	800277a <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d8:	2001      	movs	r0, #1
 80028da:	f7ff ff4e 	bl	800277a <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028de:	2301      	movs	r3, #1
 80028e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028e2:	2303      	movs	r3, #3
 80028e4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ea:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80028ee:	4619      	mov	r1, r3
 80028f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028f4:	f002 f806 	bl	8004904 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80028f8:	bf00      	nop
 80028fa:	3770      	adds	r7, #112	@ 0x70
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	50040000 	.word	0x50040000

08002904 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b09c      	sub	sp, #112	@ 0x70
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800291c:	f107 030c 	add.w	r3, r7, #12
 8002920:	2250      	movs	r2, #80	@ 0x50
 8002922:	2100      	movs	r1, #0
 8002924:	4618      	mov	r0, r3
 8002926:	f00a fdff 	bl	800d528 <memset>
  if(hi2c->Instance==I2C1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a21      	ldr	r2, [pc, #132]	@ (80029b4 <HAL_I2C_MspInit+0xb0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d13b      	bne.n	80029ac <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002934:	2304      	movs	r3, #4
 8002936:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002938:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800293c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800293e:	f107 030c 	add.w	r3, r7, #12
 8002942:	4618      	mov	r0, r3
 8002944:	f004 fa1d 	bl	8006d82 <HAL_RCCEx_PeriphCLKConfig>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800294e:	f7ff fefd 	bl	800274c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002952:	2002      	movs	r0, #2
 8002954:	f7ff ff11 	bl	800277a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002958:	2001      	movs	r0, #1
 800295a:	f7ff ff0e 	bl	800277a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PA9     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800295e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002962:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002964:	2312      	movs	r3, #18
 8002966:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296c:	2300      	movs	r3, #0
 800296e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002970:	2304      	movs	r3, #4
 8002972:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002974:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002978:	4619      	mov	r1, r3
 800297a:	480f      	ldr	r0, [pc, #60]	@ (80029b8 <HAL_I2C_MspInit+0xb4>)
 800297c:	f001 ffc2 	bl	8004904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002980:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002984:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002986:	2312      	movs	r3, #18
 8002988:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298e:	2300      	movs	r3, #0
 8002990:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002992:	2304      	movs	r3, #4
 8002994:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002996:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800299a:	4619      	mov	r1, r3
 800299c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029a0:	f001 ffb0 	bl	8004904 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029a4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80029a8:	f7ff ff19 	bl	80027de <LL_APB1_GRP1_EnableClock>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80029ac:	bf00      	nop
 80029ae:	3770      	adds	r7, #112	@ 0x70
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40005400 	.word	0x40005400
 80029b8:	48000400 	.word	0x48000400

080029bc <HAL_IPCC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hipcc: IPCC handle pointer
  * @retval None
  */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a00 <HAL_IPCC_MspInit+0x44>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d113      	bne.n	80029f6 <HAL_IPCC_MspInit+0x3a>
  {
    /* USER CODE BEGIN IPCC_MspInit 0 */

    /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80029ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80029d2:	f7ff feeb 	bl	80027ac <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80029d6:	2200      	movs	r2, #0
 80029d8:	2100      	movs	r1, #0
 80029da:	202c      	movs	r0, #44	@ 0x2c
 80029dc:	f001 fdbd 	bl	800455a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80029e0:	202c      	movs	r0, #44	@ 0x2c
 80029e2:	f001 fdd4 	bl	800458e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80029e6:	2200      	movs	r2, #0
 80029e8:	2100      	movs	r1, #0
 80029ea:	202d      	movs	r0, #45	@ 0x2d
 80029ec:	f001 fdb5 	bl	800455a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80029f0:	202d      	movs	r0, #45	@ 0x2d
 80029f2:	f001 fdcc 	bl	800458e <HAL_NVIC_EnableIRQ>

    /* USER CODE END IPCC_MspInit 1 */

  }

}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	58000c00 	.word	0x58000c00

08002a04 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b096      	sub	sp, #88	@ 0x58
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a0c:	f107 0308 	add.w	r3, r7, #8
 8002a10:	2250      	movs	r2, #80	@ 0x50
 8002a12:	2100      	movs	r1, #0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f00a fd87 	bl	800d528 <memset>
  if(hrtc->Instance==RTC)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a12      	ldr	r2, [pc, #72]	@ (8002a68 <HAL_RTC_MspInit+0x64>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d11d      	bne.n	8002a60 <HAL_RTC_MspInit+0x5c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a28:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002a2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a30:	f107 0308 	add.w	r3, r7, #8
 8002a34:	4618      	mov	r0, r3
 8002a36:	f004 f9a4 	bl	8006d82 <HAL_RCCEx_PeriphCLKConfig>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002a40:	f7ff fe84 	bl	800274c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a44:	f7ff fe88 	bl	8002758 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002a48:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002a4c:	f7ff fec7 	bl	80027de <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002a50:	2200      	movs	r2, #0
 8002a52:	2100      	movs	r1, #0
 8002a54:	2003      	movs	r0, #3
 8002a56:	f001 fd80 	bl	800455a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002a5a:	2003      	movs	r0, #3
 8002a5c:	f001 fd97 	bl	800458e <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002a60:	bf00      	nop
 8002a62:	3758      	adds	r7, #88	@ 0x58
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40002800 	.word	0x40002800

08002a6c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b09c      	sub	sp, #112	@ 0x70
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a84:	f107 030c 	add.w	r3, r7, #12
 8002a88:	2250      	movs	r2, #80	@ 0x50
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f00a fd4b 	bl	800d528 <memset>
  if(huart->Instance==USART1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1a      	ldr	r2, [pc, #104]	@ (8002b00 <HAL_UART_MspInit+0x94>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d12c      	bne.n	8002af6 <HAL_UART_MspInit+0x8a>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aa4:	f107 030c 	add.w	r3, r7, #12
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f004 f96a 	bl	8006d82 <HAL_RCCEx_PeriphCLKConfig>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ab4:	f7ff fe4a 	bl	800274c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ab8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002abc:	f7ff fea8 	bl	8002810 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac0:	2002      	movs	r0, #2
 8002ac2:	f7ff fe5a 	bl	800277a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002ac6:	23c0      	movs	r3, #192	@ 0xc0
 8002ac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aca:	2302      	movs	r3, #2
 8002acc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ad6:	2307      	movs	r3, #7
 8002ad8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ada:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4808      	ldr	r0, [pc, #32]	@ (8002b04 <HAL_UART_MspInit+0x98>)
 8002ae2:	f001 ff0f 	bl	8004904 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2100      	movs	r1, #0
 8002aea:	2024      	movs	r0, #36	@ 0x24
 8002aec:	f001 fd35 	bl	800455a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002af0:	2024      	movs	r0, #36	@ 0x24
 8002af2:	f001 fd4c 	bl	800458e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002af6:	bf00      	nop
 8002af8:	3770      	adds	r7, #112	@ 0x70
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40013800 	.word	0x40013800
 8002b04:	48000400 	.word	0x48000400

08002b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b0c:	bf00      	nop
 8002b0e:	e7fd      	b.n	8002b0c <NMI_Handler+0x4>

08002b10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b14:	bf00      	nop
 8002b16:	e7fd      	b.n	8002b14 <HardFault_Handler+0x4>

08002b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b1c:	bf00      	nop
 8002b1e:	e7fd      	b.n	8002b1c <MemManage_Handler+0x4>

08002b20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b24:	bf00      	nop
 8002b26:	e7fd      	b.n	8002b24 <BusFault_Handler+0x4>

08002b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b2c:	bf00      	nop
 8002b2e:	e7fd      	b.n	8002b2c <UsageFault_Handler+0x4>

08002b30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b5e:	f000 fcdf 	bl	8003520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002b6a:	f7fe ff97 	bl	8001a9c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b78:	4802      	ldr	r0, [pc, #8]	@ (8002b84 <USART1_IRQHandler+0x10>)
 8002b7a:	f004 fe51 	bl	8007820 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	200006b4 	.word	0x200006b4

08002b88 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002b8c:	f009 fdf0 	bl	800c770 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002b90:	bf00      	nop
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002b98:	f009 fe20 	bl	800c7dc <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002ba4:	f002 f836 	bl	8004c14 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002ba8:	bf00      	nop
 8002baa:	bd80      	pop	{r7, pc}

08002bac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	e00a      	b.n	8002bd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bbe:	f3af 8000 	nop.w
 8002bc2:	4601      	mov	r1, r0
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	60ba      	str	r2, [r7, #8]
 8002bca:	b2ca      	uxtb	r2, r1
 8002bcc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	dbf0      	blt.n	8002bbe <_read+0x12>
  }

  return len;
 8002bdc:	687b      	ldr	r3, [r7, #4]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c0e:	605a      	str	r2, [r3, #4]
  return 0;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <_isatty>:

int _isatty(int file)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c26:	2301      	movs	r3, #1
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c58:	4a14      	ldr	r2, [pc, #80]	@ (8002cac <_sbrk+0x5c>)
 8002c5a:	4b15      	ldr	r3, [pc, #84]	@ (8002cb0 <_sbrk+0x60>)
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c64:	4b13      	ldr	r3, [pc, #76]	@ (8002cb4 <_sbrk+0x64>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d102      	bne.n	8002c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c6c:	4b11      	ldr	r3, [pc, #68]	@ (8002cb4 <_sbrk+0x64>)
 8002c6e:	4a12      	ldr	r2, [pc, #72]	@ (8002cb8 <_sbrk+0x68>)
 8002c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c72:	4b10      	ldr	r3, [pc, #64]	@ (8002cb4 <_sbrk+0x64>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4413      	add	r3, r2
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d207      	bcs.n	8002c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c80:	f00a fca0 	bl	800d5c4 <__errno>
 8002c84:	4603      	mov	r3, r0
 8002c86:	220c      	movs	r2, #12
 8002c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8e:	e009      	b.n	8002ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c90:	4b08      	ldr	r3, [pc, #32]	@ (8002cb4 <_sbrk+0x64>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c96:	4b07      	ldr	r3, [pc, #28]	@ (8002cb4 <_sbrk+0x64>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	4a05      	ldr	r2, [pc, #20]	@ (8002cb4 <_sbrk+0x64>)
 8002ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20030000 	.word	0x20030000
 8002cb0:	00000400 	.word	0x00000400
 8002cb4:	20000748 	.word	0x20000748
 8002cb8:	20001a70 	.word	0x20001a70

08002cbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002cc0:	4b24      	ldr	r3, [pc, #144]	@ (8002d54 <SystemInit+0x98>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc6:	4a23      	ldr	r2, [pc, #140]	@ (8002d54 <SystemInit+0x98>)
 8002cc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ccc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002cd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002ce0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ce4:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002ce8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002cea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cf4:	4b18      	ldr	r3, [pc, #96]	@ (8002d58 <SystemInit+0x9c>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d06:	f023 0305 	bic.w	r3, r3, #5
 8002d0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002d0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d1a:	f023 0301 	bic.w	r3, r3, #1
 8002d1e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002d22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d26:	4a0d      	ldr	r2, [pc, #52]	@ (8002d5c <SystemInit+0xa0>)
 8002d28:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002d2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d2e:	4a0b      	ldr	r2, [pc, #44]	@ (8002d5c <SystemInit+0xa0>)
 8002d30:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d40:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002d42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d46:	2200      	movs	r2, #0
 8002d48:	619a      	str	r2, [r3, #24]
}
 8002d4a:	bf00      	nop
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000ed00 	.word	0xe000ed00
 8002d58:	faf6fefb 	.word	0xfaf6fefb
 8002d5c:	22041000 	.word	0x22041000

08002d60 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002d60:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d62:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d64:	3304      	adds	r3, #4

08002d66 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d66:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d68:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002d6a:	d3f9      	bcc.n	8002d60 <CopyDataInit>
  bx lr
 8002d6c:	4770      	bx	lr

08002d6e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002d6e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002d70:	3004      	adds	r0, #4

08002d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002d72:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002d74:	d3fb      	bcc.n	8002d6e <FillZerobss>
  bx lr
 8002d76:	4770      	bx	lr

08002d78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d78:	480c      	ldr	r0, [pc, #48]	@ (8002dac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d7a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d7c:	f7ff ff9e 	bl	8002cbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002d80:	480b      	ldr	r0, [pc, #44]	@ (8002db0 <LoopForever+0x6>)
 8002d82:	490c      	ldr	r1, [pc, #48]	@ (8002db4 <LoopForever+0xa>)
 8002d84:	4a0c      	ldr	r2, [pc, #48]	@ (8002db8 <LoopForever+0xe>)
 8002d86:	2300      	movs	r3, #0
 8002d88:	f7ff ffed 	bl	8002d66 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002d8c:	480b      	ldr	r0, [pc, #44]	@ (8002dbc <LoopForever+0x12>)
 8002d8e:	490c      	ldr	r1, [pc, #48]	@ (8002dc0 <LoopForever+0x16>)
 8002d90:	4a0c      	ldr	r2, [pc, #48]	@ (8002dc4 <LoopForever+0x1a>)
 8002d92:	2300      	movs	r3, #0
 8002d94:	f7ff ffe7 	bl	8002d66 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002d98:	480b      	ldr	r0, [pc, #44]	@ (8002dc8 <LoopForever+0x1e>)
 8002d9a:	490c      	ldr	r1, [pc, #48]	@ (8002dcc <LoopForever+0x22>)
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f7ff ffe8 	bl	8002d72 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002da2:	f00a fc15 	bl	800d5d0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002da6:	f7ff f9c7 	bl	8002138 <main>

08002daa <LoopForever>:

LoopForever:
  b LoopForever
 8002daa:	e7fe      	b.n	8002daa <LoopForever>
  ldr   r0, =_estack
 8002dac:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002db0:	20000008 	.word	0x20000008
 8002db4:	20000490 	.word	0x20000490
 8002db8:	0800fe7c 	.word	0x0800fe7c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002dbc:	200301e4 	.word	0x200301e4
 8002dc0:	20030a67 	.word	0x20030a67
 8002dc4:	0801034a 	.word	0x0801034a
  INIT_BSS _sbss, _ebss
 8002dc8:	200004dc 	.word	0x200004dc
 8002dcc:	20001a70 	.word	0x20001a70

08002dd0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dd0:	e7fe      	b.n	8002dd0 <ADC1_IRQHandler>
	...

08002dd4 <oled_WriteCommand>:
 *
 * @param: commandByte: pointer to the command byte array
 *
 * @param: command_length: length of the command byte array
 */
void oled_WriteCommand(uint8_t *commandByte, size_t command_length) {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af04      	add	r7, sp, #16
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
	 * Sends the command bytes through polling mode
	 * DMA mode for future optimizations
	 */

	//HAL_I2C_Mem_Write_DMA(&I2C_OLED_HANDLE, OLED_ADDR, 0x00, 1, commandByte, command_length);
	HAL_I2C_Mem_Write(&I2C_OLED_HANDLE, OLED_ADDR, 0x00, 1, commandByte, command_length, HAL_MAX_DELAY);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f04f 32ff 	mov.w	r2, #4294967295
 8002de6:	9202      	str	r2, [sp, #8]
 8002de8:	9301      	str	r3, [sp, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	2301      	movs	r3, #1
 8002df0:	2200      	movs	r2, #0
 8002df2:	2178      	movs	r1, #120	@ 0x78
 8002df4:	4803      	ldr	r0, [pc, #12]	@ (8002e04 <oled_WriteCommand+0x30>)
 8002df6:	f001 ffcd 	bl	8004d94 <HAL_I2C_Mem_Write>

}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000600 	.word	0x20000600

08002e08 <oled_WriteData>:
 * @brief: Write into the GDDRAM of the OLED from the oled_screenbuffer through I2C peripheral
 *
 * @param: pBuffer: pointer to the data buffer to be sent to the OLED
 * @param: bufferSize: size of the data buffer to be sent to the OLED
 */
void oled_WriteData(uint8_t *pBuffer, size_t bufferSize) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af04      	add	r7, sp, #16
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
	/*
	 * Writes oled_screenbuffer data to GDDRAM in polling mode.
	 * DMA mode for future optimizations
	 */

	HAL_I2C_Mem_Write(&I2C_OLED_HANDLE, OLED_ADDR, 0x40, 1, pBuffer, bufferSize, HAL_MAX_DELAY);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	f04f 32ff 	mov.w	r2, #4294967295
 8002e1a:	9202      	str	r2, [sp, #8]
 8002e1c:	9301      	str	r3, [sp, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	2301      	movs	r3, #1
 8002e24:	2240      	movs	r2, #64	@ 0x40
 8002e26:	2178      	movs	r1, #120	@ 0x78
 8002e28:	4803      	ldr	r0, [pc, #12]	@ (8002e38 <oled_WriteData+0x30>)
 8002e2a:	f001 ffb3 	bl	8004d94 <HAL_I2C_Mem_Write>
	//HAL_I2C_Mem_Write_DMA(&I2C_OLED_HANDLE, OLED_ADDR, 0x40, 1, pBuffer, bufferSize);
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000600 	.word	0x20000600

08002e3c <oled_init>:


/*
 * @brief Initializes the SSD1306/SSD1315 OLED screen
 */
void oled_init(void) {
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0

	uint8_t startline = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	71fb      	strb	r3, [r7, #7]


	//Sets display to OFF for initialization
	oled_SetDisplayOn(OFF);
 8002e46:	2001      	movs	r0, #1
 8002e48:	f000 f8ae 	bl	8002fa8 <oled_SetDisplayOn>
	HAL_Delay(10); //wait for 10ms
 8002e4c:	200a      	movs	r0, #10
 8002e4e:	f7fe fa83 	bl	8001358 <HAL_Delay>

	command_bytes[0] = 0x20; //command for setting memory addressing mode
 8002e52:	4b4e      	ldr	r3, [pc, #312]	@ (8002f8c <oled_init+0x150>)
 8002e54:	2220      	movs	r2, #32
 8002e56:	701a      	strb	r2, [r3, #0]
	command_bytes[1] = 0x00; //0x00 = horizontal addressing mode, 0x01 = vertical addressing mode, 0x02 = page addressing mode
 8002e58:	4b4c      	ldr	r3, [pc, #304]	@ (8002f8c <oled_init+0x150>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	705a      	strb	r2, [r3, #1]
	oled_WriteCommand(command_bytes, 2); //set memory addressing mode
 8002e5e:	2102      	movs	r1, #2
 8002e60:	484a      	ldr	r0, [pc, #296]	@ (8002f8c <oled_init+0x150>)
 8002e62:	f7ff ffb7 	bl	8002dd4 <oled_WriteCommand>

	command_bytes[0] = 0x21; //command for setting column address
 8002e66:	4b49      	ldr	r3, [pc, #292]	@ (8002f8c <oled_init+0x150>)
 8002e68:	2221      	movs	r2, #33	@ 0x21
 8002e6a:	701a      	strb	r2, [r3, #0]
	command_bytes[1] = 0x00; //column start address
 8002e6c:	4b47      	ldr	r3, [pc, #284]	@ (8002f8c <oled_init+0x150>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	705a      	strb	r2, [r3, #1]
	command_bytes[2] = 0x7F; //column end address
 8002e72:	4b46      	ldr	r3, [pc, #280]	@ (8002f8c <oled_init+0x150>)
 8002e74:	227f      	movs	r2, #127	@ 0x7f
 8002e76:	709a      	strb	r2, [r3, #2]
	oled_WriteCommand(command_bytes, 3); //Set column address for horizontal addressing mode
 8002e78:	2103      	movs	r1, #3
 8002e7a:	4844      	ldr	r0, [pc, #272]	@ (8002f8c <oled_init+0x150>)
 8002e7c:	f7ff ffaa 	bl	8002dd4 <oled_WriteCommand>

	command_bytes[0] = 0x22; //command for setting page address
 8002e80:	4b42      	ldr	r3, [pc, #264]	@ (8002f8c <oled_init+0x150>)
 8002e82:	2222      	movs	r2, #34	@ 0x22
 8002e84:	701a      	strb	r2, [r3, #0]
	command_bytes[1] = 0x00; //page start address
 8002e86:	4b41      	ldr	r3, [pc, #260]	@ (8002f8c <oled_init+0x150>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	705a      	strb	r2, [r3, #1]
	command_bytes[2] = 0x07; //page end address
 8002e8c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f8c <oled_init+0x150>)
 8002e8e:	2207      	movs	r2, #7
 8002e90:	709a      	strb	r2, [r3, #2]
	oled_WriteCommand(command_bytes, 3); //Set page address for horizontal addressing mode
 8002e92:	2103      	movs	r1, #3
 8002e94:	483d      	ldr	r0, [pc, #244]	@ (8002f8c <oled_init+0x150>)
 8002e96:	f7ff ff9d 	bl	8002dd4 <oled_WriteCommand>

	command_bytes[0] = 0xC8; //command for setting COM output scan direction
 8002e9a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f8c <oled_init+0x150>)
 8002e9c:	22c8      	movs	r2, #200	@ 0xc8
 8002e9e:	701a      	strb	r2, [r3, #0]
	oled_WriteCommand(command_bytes, 1); //Set COM output scan direction, 0xC8 = top to bottom, 0xC0 = bottom to top (inverted)
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	483a      	ldr	r0, [pc, #232]	@ (8002f8c <oled_init+0x150>)
 8002ea4:	f7ff ff96 	bl	8002dd4 <oled_WriteCommand>

	command_bytes[0] = 0x40 | startline; //command for setting display start line
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	4b36      	ldr	r3, [pc, #216]	@ (8002f8c <oled_init+0x150>)
 8002eb2:	701a      	strb	r2, [r3, #0]
	oled_WriteCommand(command_bytes, 1); //Set start line address, startline values 0 t 63.
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	4835      	ldr	r0, [pc, #212]	@ (8002f8c <oled_init+0x150>)
 8002eb8:	f7ff ff8c 	bl	8002dd4 <oled_WriteCommand>

	oled_SetContrast(0xFF);
 8002ebc:	20ff      	movs	r0, #255	@ 0xff
 8002ebe:	f000 f891 	bl	8002fe4 <oled_SetContrast>

	command_bytes[0] = 0xA1; //command for setting segment re-map
 8002ec2:	4b32      	ldr	r3, [pc, #200]	@ (8002f8c <oled_init+0x150>)
 8002ec4:	22a1      	movs	r2, #161	@ 0xa1
 8002ec6:	701a      	strb	r2, [r3, #0]
	oled_WriteCommand(command_bytes, 1); //No horizontal mirroring, 0XA1 = no horizontal mirroring, col 0 to col 127
 8002ec8:	2101      	movs	r1, #1
 8002eca:	4830      	ldr	r0, [pc, #192]	@ (8002f8c <oled_init+0x150>)
 8002ecc:	f7ff ff82 	bl	8002dd4 <oled_WriteCommand>
	//0xA0 = horizontal mirroring, col 127 to col 0

	command_bytes[0] = 0xA6; //command for setting display mode;
 8002ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8002f8c <oled_init+0x150>)
 8002ed2:	22a6      	movs	r2, #166	@ 0xa6
 8002ed4:	701a      	strb	r2, [r3, #0]
	oled_WriteCommand(command_bytes, 1); //Set normal color, 0xA6 = normal color, 0xA7 = inverted color display
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	482c      	ldr	r0, [pc, #176]	@ (8002f8c <oled_init+0x150>)
 8002eda:	f7ff ff7b 	bl	8002dd4 <oled_WriteCommand>

	//Set multiplex ratio A.K.A number of rows to display on screen
	command_bytes[0] = 0xA8; //command for setting multiplex ratio
 8002ede:	4b2b      	ldr	r3, [pc, #172]	@ (8002f8c <oled_init+0x150>)
 8002ee0:	22a8      	movs	r2, #168	@ 0xa8
 8002ee2:	701a      	strb	r2, [r3, #0]
	command_bytes[1] = 0x3F; //0x3F = 63 dec, meaning rows 0 to rows 63 are displayed on the screen
 8002ee4:	4b29      	ldr	r3, [pc, #164]	@ (8002f8c <oled_init+0x150>)
 8002ee6:	223f      	movs	r2, #63	@ 0x3f
 8002ee8:	705a      	strb	r2, [r3, #1]
	oled_WriteCommand(command_bytes, 2); //Set multiplex ratio
 8002eea:	2102      	movs	r1, #2
 8002eec:	4827      	ldr	r0, [pc, #156]	@ (8002f8c <oled_init+0x150>)
 8002eee:	f7ff ff71 	bl	8002dd4 <oled_WriteCommand>

	command_bytes[0] = 0XA4;
 8002ef2:	4b26      	ldr	r3, [pc, #152]	@ (8002f8c <oled_init+0x150>)
 8002ef4:	22a4      	movs	r2, #164	@ 0xa4
 8002ef6:	701a      	strb	r2, [r3, #0]
	oled_WriteCommand(command_bytes, 1); //Normal operation, 0xA4 = output follow RAM content
 8002ef8:	2101      	movs	r1, #1
 8002efa:	4824      	ldr	r0, [pc, #144]	@ (8002f8c <oled_init+0x150>)
 8002efc:	f7ff ff6a 	bl	8002dd4 <oled_WriteCommand>
	//0xA5 = output does not follow RAM content. Turns ON all pixels irregardless of RAM content

	//Set display offset
	command_bytes[0] = 0XD3; //command for setting display offset
 8002f00:	4b22      	ldr	r3, [pc, #136]	@ (8002f8c <oled_init+0x150>)
 8002f02:	22d3      	movs	r2, #211	@ 0xd3
 8002f04:	701a      	strb	r2, [r3, #0]
	command_bytes[1] = 0X00; //0x00 = 0, means no vertical display offset; 0x3F = 63 max value vertical display offset
 8002f06:	4b21      	ldr	r3, [pc, #132]	@ (8002f8c <oled_init+0x150>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	705a      	strb	r2, [r3, #1]
	oled_WriteCommand(command_bytes, 2); //If there is vertical offset, the display is shifted up by n rows according to programmed offset value.
 8002f0c:	2102      	movs	r1, #2
 8002f0e:	481f      	ldr	r0, [pc, #124]	@ (8002f8c <oled_init+0x150>)
 8002f10:	f7ff ff60 	bl	8002dd4 <oled_WriteCommand>

	//Sets oscillator freq & display clock divide ratio
	command_bytes[0] = 0xD5; //command for setting the display clock divide ratio/oscillator freq
 8002f14:	4b1d      	ldr	r3, [pc, #116]	@ (8002f8c <oled_init+0x150>)
 8002f16:	22d5      	movs	r2, #213	@ 0xd5
 8002f18:	701a      	strb	r2, [r3, #0]
	command_bytes[1] = 0XF0; //0xF0 means F = 1111b(15dec), highest nibble which sets the oscillator frequency in Hz
 8002f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8002f8c <oled_init+0x150>)
 8002f1c:	22f0      	movs	r2, #240	@ 0xf0
 8002f1e:	705a      	strb	r2, [r3, #1]
	oled_WriteCommand(command_bytes, 2); //0xF0 mean 0 = divide ratio values 0 to 15, both setting determine the Frame Freq (Hz)= Fosc / (D + 1) / 128
 8002f20:	2102      	movs	r1, #2
 8002f22:	481a      	ldr	r0, [pc, #104]	@ (8002f8c <oled_init+0x150>)
 8002f24:	f7ff ff56 	bl	8002dd4 <oled_WriteCommand>

	command_bytes[0] = 0xD9; //command for setting the pre-charge period
 8002f28:	4b18      	ldr	r3, [pc, #96]	@ (8002f8c <oled_init+0x150>)
 8002f2a:	22d9      	movs	r2, #217	@ 0xd9
 8002f2c:	701a      	strb	r2, [r3, #0]
	command_bytes[1] = 0x22; //each nibble corresponds to phase 2 Most Sig Nibble & phase 1 Least Sig Nibble. Duration is in DCLK cycles
 8002f2e:	4b17      	ldr	r3, [pc, #92]	@ (8002f8c <oled_init+0x150>)
 8002f30:	2222      	movs	r2, #34	@ 0x22
 8002f32:	705a      	strb	r2, [r3, #1]
	oled_WriteCommand(command_bytes, 2); //command for setting the pre-charge period
 8002f34:	2102      	movs	r1, #2
 8002f36:	4815      	ldr	r0, [pc, #84]	@ (8002f8c <oled_init+0x150>)
 8002f38:	f7ff ff4c 	bl	8002dd4 <oled_WriteCommand>
	//default setting is 2 DCLK cycles or 0x22.

	command_bytes[0] = 0xDA; //command for setting COM pins hardware configuration;
 8002f3c:	4b13      	ldr	r3, [pc, #76]	@ (8002f8c <oled_init+0x150>)
 8002f3e:	22da      	movs	r2, #218	@ 0xda
 8002f40:	701a      	strb	r2, [r3, #0]
	command_bytes[1] = 0x12; //0x12 = 0001 0010, Bit 5 = 0, Sequential COM pin config; Bit 4 = 1, COM pin left/right remap ; Bit 1 = 1 (reset value 0x2)
 8002f42:	4b12      	ldr	r3, [pc, #72]	@ (8002f8c <oled_init+0x150>)
 8002f44:	2212      	movs	r2, #18
 8002f46:	705a      	strb	r2, [r3, #1]
	oled_WriteCommand(command_bytes, 2); //COM pins hardware config, NOTE: in datasheet Bit 4 should be Bit 5 and Bit 5 should be bit 4. Baliktad in data sheet. PISTE!
 8002f48:	2102      	movs	r1, #2
 8002f4a:	4810      	ldr	r0, [pc, #64]	@ (8002f8c <oled_init+0x150>)
 8002f4c:	f7ff ff42 	bl	8002dd4 <oled_WriteCommand>


	command_bytes[0] = 0XDB; //command for setting VCOMH deselect level
 8002f50:	4b0e      	ldr	r3, [pc, #56]	@ (8002f8c <oled_init+0x150>)
 8002f52:	22db      	movs	r2, #219	@ 0xdb
 8002f54:	701a      	strb	r2, [r3, #0]
	command_bytes[1] = 0x20; //0x20, 0.77xVcc, at Vcc 3.3V estimate OLED voltage drop is only at 0.759V
 8002f56:	4b0d      	ldr	r3, [pc, #52]	@ (8002f8c <oled_init+0x150>)
 8002f58:	2220      	movs	r2, #32
 8002f5a:	705a      	strb	r2, [r3, #1]
	oled_WriteCommand(command_bytes, 2); //set VCOMH voltage level, VCOMH is the COM pin voltage level when its idle state (not pulled to GND)
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	480b      	ldr	r0, [pc, #44]	@ (8002f8c <oled_init+0x150>)
 8002f60:	f7ff ff38 	bl	8002dd4 <oled_WriteCommand>
	//0x20, 0.77xVcc, at Vcc 3.3V estimate OLED voltage drop is only at 0.759V which is lower than OLED threshold voltage of ~1.3V

	command_bytes[0] = 0X8D; //command for setting charge pump
 8002f64:	4b09      	ldr	r3, [pc, #36]	@ (8002f8c <oled_init+0x150>)
 8002f66:	228d      	movs	r2, #141	@ 0x8d
 8002f68:	701a      	strb	r2, [r3, #0]
	command_bytes[1] = 0X14; //0x14, enables the charge pump during display ON
 8002f6a:	4b08      	ldr	r3, [pc, #32]	@ (8002f8c <oled_init+0x150>)
 8002f6c:	2214      	movs	r2, #20
 8002f6e:	705a      	strb	r2, [r3, #1]
	oled_WriteCommand(command_bytes, 2);
 8002f70:	2102      	movs	r1, #2
 8002f72:	4806      	ldr	r0, [pc, #24]	@ (8002f8c <oled_init+0x150>)
 8002f74:	f7ff ff2e 	bl	8002dd4 <oled_WriteCommand>

	oled_UpdateScreen(); //update oled with the splashscreen
 8002f78:	f000 f80a 	bl	8002f90 <oled_UpdateScreen>

	oled_SetDisplayOn(ON); 	 //turn on OLED panel
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f000 f813 	bl	8002fa8 <oled_SetDisplayOn>
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	2000074c 	.word	0x2000074c

08002f90 <oled_UpdateScreen>:

/*
 * @breif: Dumps the OLED screen buffer to the OLED GDDRAM through I2C peripheral
 *
 */
void oled_UpdateScreen(void) {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0

	//dump all screen buffer data into GDDRAM
	oled_WriteData(OLED_ScreenBuffer,OLED_BUFFER_SIZE);
 8002f94:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f98:	4802      	ldr	r0, [pc, #8]	@ (8002fa4 <oled_UpdateScreen+0x14>)
 8002f9a:	f7ff ff35 	bl	8002e08 <oled_WriteData>
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	2000000c 	.word	0x2000000c

08002fa8 <oled_SetDisplayOn>:
/*
 * @breif: Turns the OLED display ON or OFF
 *
 * @param: ONorOff - ON_OFF ENUM to turn the display ON or OFF
 */
void oled_SetDisplayOn(ON_OFF ONorOff) {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71fb      	strb	r3, [r7, #7]

	if(ONorOff == ON){
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d107      	bne.n	8002fc8 <oled_SetDisplayOn+0x20>
		command_bytes[0] = 0xAF;
 8002fb8:	4b09      	ldr	r3, [pc, #36]	@ (8002fe0 <oled_SetDisplayOn+0x38>)
 8002fba:	22af      	movs	r2, #175	@ 0xaf
 8002fbc:	701a      	strb	r2, [r3, #0]
		oled_WriteCommand(command_bytes, 1);	//OLED ON command
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	4807      	ldr	r0, [pc, #28]	@ (8002fe0 <oled_SetDisplayOn+0x38>)
 8002fc2:	f7ff ff07 	bl	8002dd4 <oled_WriteCommand>
	}
	else{
		command_bytes[0] = 0xAE;
		oled_WriteCommand(command_bytes, 1);	//OLED OFF command
	}
}
 8002fc6:	e006      	b.n	8002fd6 <oled_SetDisplayOn+0x2e>
		command_bytes[0] = 0xAE;
 8002fc8:	4b05      	ldr	r3, [pc, #20]	@ (8002fe0 <oled_SetDisplayOn+0x38>)
 8002fca:	22ae      	movs	r2, #174	@ 0xae
 8002fcc:	701a      	strb	r2, [r3, #0]
		oled_WriteCommand(command_bytes, 1);	//OLED OFF command
 8002fce:	2101      	movs	r1, #1
 8002fd0:	4803      	ldr	r0, [pc, #12]	@ (8002fe0 <oled_SetDisplayOn+0x38>)
 8002fd2:	f7ff feff 	bl	8002dd4 <oled_WriteCommand>
}
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	2000074c 	.word	0x2000074c

08002fe4 <oled_SetContrast>:
/*
 * @breif: Sets the contrast level of the OLED display
 *
 * @param: contrast - Contrast value from 0x00 to 0xFF
 */
void oled_SetContrast(uint8_t contrast)	{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	71fb      	strb	r3, [r7, #7]

	command_bytes[0] = 0x81; //command for setting contrast
 8002fee:	4b07      	ldr	r3, [pc, #28]	@ (800300c <oled_SetContrast+0x28>)
 8002ff0:	2281      	movs	r2, #129	@ 0x81
 8002ff2:	701a      	strb	r2, [r3, #0]
	command_bytes[1] = contrast; //contrast value 0x00 to 0xFF
 8002ff4:	4a05      	ldr	r2, [pc, #20]	@ (800300c <oled_SetContrast+0x28>)
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	7053      	strb	r3, [r2, #1]

	oled_WriteCommand(command_bytes, 2);
 8002ffa:	2102      	movs	r1, #2
 8002ffc:	4803      	ldr	r0, [pc, #12]	@ (800300c <oled_SetContrast+0x28>)
 8002ffe:	f7ff fee9 	bl	8002dd4 <oled_WriteCommand>

}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	2000074c 	.word	0x2000074c

08003010 <oled_drawBMP>:
 * @note: x_start & y_start uses zero based counting. The top left corner of the screen is (0,0).
 * @note: The glyph's top left corner is the x_start & y_start coordinate.
 *
 *******************************************************************************************************************/
void oled_drawBMP(uint8_t x_start, uint8_t y_start, const uint8_t *glyph, uint8_t glyph_width, uint8_t glyph_height, GlyphRederMode_t mode)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af00      	add	r7, sp, #0
 8003016:	603a      	str	r2, [r7, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	4603      	mov	r3, r0
 800301c:	71fb      	strb	r3, [r7, #7]
 800301e:	460b      	mov	r3, r1
 8003020:	71bb      	strb	r3, [r7, #6]
 8003022:	4613      	mov	r3, r2
 8003024:	717b      	strb	r3, [r7, #5]
	//this flag is used to check if the glyph region has been cleared
	uint8_t glyph_region_cleared = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	77fb      	strb	r3, [r7, #31]

	uint8_t y_end = (y_start + glyph_height) - 1; //y end coordinate
 800302a:	79ba      	ldrb	r2, [r7, #6]
 800302c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003030:	4413      	add	r3, r2
 8003032:	b2db      	uxtb	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	773b      	strb	r3, [r7, #28]
	uint8_t x_end = (x_start + glyph_width) - 1; //x end coordinate
 8003038:	79fa      	ldrb	r2, [r7, #7]
 800303a:	797b      	ldrb	r3, [r7, #5]
 800303c:	4413      	add	r3, r2
 800303e:	b2db      	uxtb	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	76fb      	strb	r3, [r7, #27]

	/*
	 * calculate bit offset if y coordinate is not page aligned (meaning not divisible by 8)
	 * if y is paged aligned bit_offset should be equal to 0
	 */
	uint8_t bit_offset = (y_start % 8);
 8003044:	79bb      	ldrb	r3, [r7, #6]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	76bb      	strb	r3, [r7, #26]
	 *
	 * Ex. glyph_height = 17, so you have 1 bit that spilled to the next page in total of 3 pages needed, 8(page1) + 8(page2) + 1(page3)
	 * 		If you divide 17/8 = 2.125, you only get 2, so you add +7 to numerator to round up the division
	 * 		17 + 7 = 24, 24/8 = 3, which is the correct number of pages needed to render the glyph
	 */
	uint8_t pages_needed = (glyph_height + 7) / 8;
 800304c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003050:	3307      	adds	r3, #7
 8003052:	2b00      	cmp	r3, #0
 8003054:	da00      	bge.n	8003058 <oled_drawBMP+0x48>
 8003056:	3307      	adds	r3, #7
 8003058:	10db      	asrs	r3, r3, #3
 800305a:	767b      	strb	r3, [r7, #25]

	uint8_t start_page = y_start / 8; 	//starting page location
 800305c:	79bb      	ldrb	r3, [r7, #6]
 800305e:	08db      	lsrs	r3, r3, #3
 8003060:	763b      	strb	r3, [r7, #24]
	uint8_t end_page = start_page + pages_needed;	//end page location
 8003062:	7e3a      	ldrb	r2, [r7, #24]
 8003064:	7e7b      	ldrb	r3, [r7, #25]
 8003066:	4413      	add	r3, r2
 8003068:	75fb      	strb	r3, [r7, #23]

	//boundary check
	if(x_start < 0 || x_start >= WIDTH || y_start < 0 || y_start >= HEIGHT || x_end >= WIDTH || y_end >= HEIGHT) {
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	2b00      	cmp	r3, #0
 8003070:	f2c0 80fb 	blt.w	800326a <oled_drawBMP+0x25a>
 8003074:	79bb      	ldrb	r3, [r7, #6]
 8003076:	2b3f      	cmp	r3, #63	@ 0x3f
 8003078:	f200 80f7 	bhi.w	800326a <oled_drawBMP+0x25a>
 800307c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003080:	2b00      	cmp	r3, #0
 8003082:	f2c0 80f2 	blt.w	800326a <oled_drawBMP+0x25a>
 8003086:	7f3b      	ldrb	r3, [r7, #28]
 8003088:	2b3f      	cmp	r3, #63	@ 0x3f
 800308a:	f200 80ee 	bhi.w	800326a <oled_drawBMP+0x25a>
		return;
	}

	//loops from start_page to (end_page -1) of the glyph
	//skips the last page since it will be handled by the carry_glyph_byte
	for (uint8_t page_counter = start_page; page_counter < end_page; page_counter++) {
 800308e:	7e3b      	ldrb	r3, [r7, #24]
 8003090:	77bb      	strb	r3, [r7, #30]
 8003092:	e0e4      	b.n	800325e <oled_drawBMP+0x24e>

		//pre-calculate glyph page offset to optimize the inner loop
		uint8_t glyph_page_offset = (page_counter - start_page) * glyph_width;
 8003094:	7fba      	ldrb	r2, [r7, #30]
 8003096:	7e3b      	ldrb	r3, [r7, #24]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	b2db      	uxtb	r3, r3
 800309c:	797a      	ldrb	r2, [r7, #5]
 800309e:	fb12 f303 	smulbb	r3, r2, r3
 80030a2:	75bb      	strb	r3, [r7, #22]

		for (uint8_t x_counter = x_start; x_counter <= x_end; x_counter++) {
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	777b      	strb	r3, [r7, #29]
 80030a8:	e0d1      	b.n	800324e <oled_drawBMP+0x23e>
			/*
			 * x_counter: current column of the glyph to render, moves through the glyph array horizontally bound by glyph_width
			 * x_start: starting x coordinate of the glyph, used to offset the glyph array index to start from 0
			 * glyph_page_offset: used to offset the glyph array index to jump to the next page of the glyph
			 */
			uint8_t glyph_byte = glyph[ (x_counter - x_start) + glyph_page_offset];
 80030aa:	7f7a      	ldrb	r2, [r7, #29]
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	1ad2      	subs	r2, r2, r3
 80030b0:	7dbb      	ldrb	r3, [r7, #22]
 80030b2:	4413      	add	r3, r2
 80030b4:	461a      	mov	r2, r3
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	4413      	add	r3, r2
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	757b      	strb	r3, [r7, #21]

			//main glyph byte value with applied offset if y is not page aligned (meaning not divisible by 8)
			uint8_t main_glyph_byte = glyph_byte << bit_offset;
 80030be:	7d7a      	ldrb	r2, [r7, #21]
 80030c0:	7ebb      	ldrb	r3, [r7, #26]
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	753b      	strb	r3, [r7, #20]
			 *
			 * Ex. byte = 10011101, y = 9,so bit_offset = 9 % 8 = 1,
			 * so you'd shift the MSB to the next page, to get the bit displayed to the next page, right shift by 8 - bit_offset.
			 * so, carry = 10011101 >> (8 - 1) = 1, this bit (pixel) will then be written to next page of OLED GDDRAM
			 */
			uint8_t carry_glyph_byte = glyph_byte >> (8 - bit_offset);
 80030c8:	7d7a      	ldrb	r2, [r7, #21]
 80030ca:	7ebb      	ldrb	r3, [r7, #26]
 80030cc:	f1c3 0308 	rsb	r3, r3, #8
 80030d0:	fa42 f303 	asr.w	r3, r2, r3
 80030d4:	74fb      	strb	r3, [r7, #19]
			 * upon adding the two, you get the actual index in OLED_buffer
			 *
			 * Ex. x_start = 10, page_counter = 1
			 * index = (10) + (1 * 128) = 138, so the glyph byte will be stored in OLED_buffer[138]
			 */
			uint16_t index = (x_counter) + (page_counter * WIDTH);
 80030d6:	7f7b      	ldrb	r3, [r7, #29]
 80030d8:	b29a      	uxth	r2, r3
 80030da:	7fbb      	ldrb	r3, [r7, #30]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	01db      	lsls	r3, r3, #7
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	823b      	strh	r3, [r7, #16]

			switch (mode) {
 80030e6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d856      	bhi.n	800319c <oled_drawBMP+0x18c>
 80030ee:	a201      	add	r2, pc, #4	@ (adr r2, 80030f4 <oled_drawBMP+0xe4>)
 80030f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f4:	08003109 	.word	0x08003109
 80030f8:	08003135 	.word	0x08003135
 80030fc:	0800315d 	.word	0x0800315d
 8003100:	08003149 	.word	0x08003149
 8003104:	0800318d 	.word	0x0800318d

				/*
				 * Clears the whole region where the glyph will render (x + glyph_width) * (y + glyph_height)
				 * To ensure no ghosting effect if glyph is being rendered multiple times
				 */
				if (glyph_region_cleared == 0) {
 8003108:	7ffb      	ldrb	r3, [r7, #31]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d108      	bne.n	8003120 <oled_drawBMP+0x110>
					oled_clearGlyphRegion(x_start, y_start, glyph_width, glyph_height);
 800310e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003112:	797a      	ldrb	r2, [r7, #5]
 8003114:	79b9      	ldrb	r1, [r7, #6]
 8003116:	79f8      	ldrb	r0, [r7, #7]
 8003118:	f000 f8ae 	bl	8003278 <oled_clearGlyphRegion>
					glyph_region_cleared = 1; //set flag to prevent clearing the page again
 800311c:	2301      	movs	r3, #1
 800311e:	77fb      	strb	r3, [r7, #31]
				}

				OLED_ScreenBuffer[index] |= main_glyph_byte;
 8003120:	8a3b      	ldrh	r3, [r7, #16]
 8003122:	4a54      	ldr	r2, [pc, #336]	@ (8003274 <oled_drawBMP+0x264>)
 8003124:	5cd1      	ldrb	r1, [r2, r3]
 8003126:	8a3b      	ldrh	r3, [r7, #16]
 8003128:	7d3a      	ldrb	r2, [r7, #20]
 800312a:	430a      	orrs	r2, r1
 800312c:	b2d1      	uxtb	r1, r2
 800312e:	4a51      	ldr	r2, [pc, #324]	@ (8003274 <oled_drawBMP+0x264>)
 8003130:	54d1      	strb	r1, [r2, r3]
				break;
 8003132:	e033      	b.n	800319c <oled_drawBMP+0x18c>
			case GLYPH_MODE_SET:
				OLED_ScreenBuffer[index] |= main_glyph_byte;
 8003134:	8a3b      	ldrh	r3, [r7, #16]
 8003136:	4a4f      	ldr	r2, [pc, #316]	@ (8003274 <oled_drawBMP+0x264>)
 8003138:	5cd1      	ldrb	r1, [r2, r3]
 800313a:	8a3b      	ldrh	r3, [r7, #16]
 800313c:	7d3a      	ldrb	r2, [r7, #20]
 800313e:	430a      	orrs	r2, r1
 8003140:	b2d1      	uxtb	r1, r2
 8003142:	4a4c      	ldr	r2, [pc, #304]	@ (8003274 <oled_drawBMP+0x264>)
 8003144:	54d1      	strb	r1, [r2, r3]
				break;
 8003146:	e029      	b.n	800319c <oled_drawBMP+0x18c>
			case GLYPH_MODE_TOGGLE:
				OLED_ScreenBuffer[index] ^= main_glyph_byte;
 8003148:	8a3b      	ldrh	r3, [r7, #16]
 800314a:	4a4a      	ldr	r2, [pc, #296]	@ (8003274 <oled_drawBMP+0x264>)
 800314c:	5cd1      	ldrb	r1, [r2, r3]
 800314e:	8a3b      	ldrh	r3, [r7, #16]
 8003150:	7d3a      	ldrb	r2, [r7, #20]
 8003152:	404a      	eors	r2, r1
 8003154:	b2d1      	uxtb	r1, r2
 8003156:	4a47      	ldr	r2, [pc, #284]	@ (8003274 <oled_drawBMP+0x264>)
 8003158:	54d1      	strb	r1, [r2, r3]
				break;
 800315a:	e01f      	b.n	800319c <oled_drawBMP+0x18c>
			case GLYPH_MODE_AND_MASK:
				OLED_ScreenBuffer[index] &= ~(main_glyph_byte);
 800315c:	8a3b      	ldrh	r3, [r7, #16]
 800315e:	4a45      	ldr	r2, [pc, #276]	@ (8003274 <oled_drawBMP+0x264>)
 8003160:	5cd3      	ldrb	r3, [r2, r3]
 8003162:	b25a      	sxtb	r2, r3
 8003164:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003168:	43db      	mvns	r3, r3
 800316a:	b25b      	sxtb	r3, r3
 800316c:	4013      	ands	r3, r2
 800316e:	b25a      	sxtb	r2, r3
 8003170:	8a3b      	ldrh	r3, [r7, #16]
 8003172:	b2d1      	uxtb	r1, r2
 8003174:	4a3f      	ldr	r2, [pc, #252]	@ (8003274 <oled_drawBMP+0x264>)
 8003176:	54d1      	strb	r1, [r2, r3]
				OLED_ScreenBuffer[index] |= main_glyph_byte;
 8003178:	8a3b      	ldrh	r3, [r7, #16]
 800317a:	4a3e      	ldr	r2, [pc, #248]	@ (8003274 <oled_drawBMP+0x264>)
 800317c:	5cd1      	ldrb	r1, [r2, r3]
 800317e:	8a3b      	ldrh	r3, [r7, #16]
 8003180:	7d3a      	ldrb	r2, [r7, #20]
 8003182:	430a      	orrs	r2, r1
 8003184:	b2d1      	uxtb	r1, r2
 8003186:	4a3b      	ldr	r2, [pc, #236]	@ (8003274 <oled_drawBMP+0x264>)
 8003188:	54d1      	strb	r1, [r2, r3]
				break;
 800318a:	e007      	b.n	800319c <oled_drawBMP+0x18c>
			case GLYPH_MODE_CLEAR:
				oled_clearGlyphRegion(x_start, y_start, glyph_width, glyph_height);
 800318c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003190:	797a      	ldrb	r2, [r7, #5]
 8003192:	79b9      	ldrb	r1, [r7, #6]
 8003194:	79f8      	ldrb	r0, [r7, #7]
 8003196:	f000 f86f 	bl	8003278 <oled_clearGlyphRegion>
				break;
 800319a:	bf00      	nop
			 * If carry_glpyh_byte = 0, meaning no pixels spilled on to next page and y coordinate is page aligned (divisible by 8)
			 * If carry_glpyh_byte != 0, meaning there are pixels that spilled to next page and needs to be rendered
			 *
			 * added condition (page_counter + 1) < 8 to prevent writing outside the OLED_ScreenBuffer & OLED GDDRAM boundaries
			 */
			if (carry_glyph_byte != 0 && (page_counter + 1) < 8) {
 800319c:	7cfb      	ldrb	r3, [r7, #19]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d052      	beq.n	8003248 <oled_drawBMP+0x238>
 80031a2:	7fbb      	ldrb	r3, [r7, #30]
 80031a4:	2b06      	cmp	r3, #6
 80031a6:	d84f      	bhi.n	8003248 <oled_drawBMP+0x238>

				/*
				 * similar to previous calculation of index but this time +1 to the page number
				 * to jump to the next page index
				 */
				uint16_t next_index = (x_counter) + ((page_counter + 1) * WIDTH);
 80031a8:	7f7b      	ldrb	r3, [r7, #29]
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	7fbb      	ldrb	r3, [r7, #30]
 80031ae:	3301      	adds	r3, #1
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	01db      	lsls	r3, r3, #7
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	81fb      	strh	r3, [r7, #14]

				switch (mode) {
 80031ba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d842      	bhi.n	8003248 <oled_drawBMP+0x238>
 80031c2:	a201      	add	r2, pc, #4	@ (adr r2, 80031c8 <oled_drawBMP+0x1b8>)
 80031c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c8:	080031dd 	.word	0x080031dd
 80031cc:	080031f1 	.word	0x080031f1
 80031d0:	08003219 	.word	0x08003219
 80031d4:	08003205 	.word	0x08003205
 80031d8:	08003249 	.word	0x08003249
				case GLYPH_MODE_OVERWRITE:
					OLED_ScreenBuffer[next_index] |= carry_glyph_byte;
 80031dc:	89fb      	ldrh	r3, [r7, #14]
 80031de:	4a25      	ldr	r2, [pc, #148]	@ (8003274 <oled_drawBMP+0x264>)
 80031e0:	5cd1      	ldrb	r1, [r2, r3]
 80031e2:	89fb      	ldrh	r3, [r7, #14]
 80031e4:	7cfa      	ldrb	r2, [r7, #19]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	b2d1      	uxtb	r1, r2
 80031ea:	4a22      	ldr	r2, [pc, #136]	@ (8003274 <oled_drawBMP+0x264>)
 80031ec:	54d1      	strb	r1, [r2, r3]
					break;
 80031ee:	e02b      	b.n	8003248 <oled_drawBMP+0x238>
				case GLYPH_MODE_SET:
					OLED_ScreenBuffer[next_index] |= carry_glyph_byte;
 80031f0:	89fb      	ldrh	r3, [r7, #14]
 80031f2:	4a20      	ldr	r2, [pc, #128]	@ (8003274 <oled_drawBMP+0x264>)
 80031f4:	5cd1      	ldrb	r1, [r2, r3]
 80031f6:	89fb      	ldrh	r3, [r7, #14]
 80031f8:	7cfa      	ldrb	r2, [r7, #19]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	b2d1      	uxtb	r1, r2
 80031fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003274 <oled_drawBMP+0x264>)
 8003200:	54d1      	strb	r1, [r2, r3]
					break;
 8003202:	e021      	b.n	8003248 <oled_drawBMP+0x238>
				case GLYPH_MODE_TOGGLE:
					OLED_ScreenBuffer[next_index] ^= carry_glyph_byte;
 8003204:	89fb      	ldrh	r3, [r7, #14]
 8003206:	4a1b      	ldr	r2, [pc, #108]	@ (8003274 <oled_drawBMP+0x264>)
 8003208:	5cd1      	ldrb	r1, [r2, r3]
 800320a:	89fb      	ldrh	r3, [r7, #14]
 800320c:	7cfa      	ldrb	r2, [r7, #19]
 800320e:	404a      	eors	r2, r1
 8003210:	b2d1      	uxtb	r1, r2
 8003212:	4a18      	ldr	r2, [pc, #96]	@ (8003274 <oled_drawBMP+0x264>)
 8003214:	54d1      	strb	r1, [r2, r3]
					break;
 8003216:	e017      	b.n	8003248 <oled_drawBMP+0x238>
				case GLYPH_MODE_AND_MASK:
					OLED_ScreenBuffer[next_index] &= ~(carry_glyph_byte);
 8003218:	89fb      	ldrh	r3, [r7, #14]
 800321a:	4a16      	ldr	r2, [pc, #88]	@ (8003274 <oled_drawBMP+0x264>)
 800321c:	5cd3      	ldrb	r3, [r2, r3]
 800321e:	b25a      	sxtb	r2, r3
 8003220:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003224:	43db      	mvns	r3, r3
 8003226:	b25b      	sxtb	r3, r3
 8003228:	4013      	ands	r3, r2
 800322a:	b25a      	sxtb	r2, r3
 800322c:	89fb      	ldrh	r3, [r7, #14]
 800322e:	b2d1      	uxtb	r1, r2
 8003230:	4a10      	ldr	r2, [pc, #64]	@ (8003274 <oled_drawBMP+0x264>)
 8003232:	54d1      	strb	r1, [r2, r3]
					OLED_ScreenBuffer[next_index] |= carry_glyph_byte;
 8003234:	89fb      	ldrh	r3, [r7, #14]
 8003236:	4a0f      	ldr	r2, [pc, #60]	@ (8003274 <oled_drawBMP+0x264>)
 8003238:	5cd1      	ldrb	r1, [r2, r3]
 800323a:	89fb      	ldrh	r3, [r7, #14]
 800323c:	7cfa      	ldrb	r2, [r7, #19]
 800323e:	430a      	orrs	r2, r1
 8003240:	b2d1      	uxtb	r1, r2
 8003242:	4a0c      	ldr	r2, [pc, #48]	@ (8003274 <oled_drawBMP+0x264>)
 8003244:	54d1      	strb	r1, [r2, r3]
					break;
 8003246:	bf00      	nop
		for (uint8_t x_counter = x_start; x_counter <= x_end; x_counter++) {
 8003248:	7f7b      	ldrb	r3, [r7, #29]
 800324a:	3301      	adds	r3, #1
 800324c:	777b      	strb	r3, [r7, #29]
 800324e:	7f7a      	ldrb	r2, [r7, #29]
 8003250:	7efb      	ldrb	r3, [r7, #27]
 8003252:	429a      	cmp	r2, r3
 8003254:	f67f af29 	bls.w	80030aa <oled_drawBMP+0x9a>
	for (uint8_t page_counter = start_page; page_counter < end_page; page_counter++) {
 8003258:	7fbb      	ldrb	r3, [r7, #30]
 800325a:	3301      	adds	r3, #1
 800325c:	77bb      	strb	r3, [r7, #30]
 800325e:	7fba      	ldrb	r2, [r7, #30]
 8003260:	7dfb      	ldrb	r3, [r7, #23]
 8003262:	429a      	cmp	r2, r3
 8003264:	f4ff af16 	bcc.w	8003094 <oled_drawBMP+0x84>
 8003268:	e000      	b.n	800326c <oled_drawBMP+0x25c>
		return;
 800326a:	bf00      	nop
		}

	}

	//oled_UpdateScreen();
}
 800326c:	3720      	adds	r7, #32
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	2000000c 	.word	0x2000000c

08003278 <oled_clearGlyphRegion>:
 * @param: glyph_height - height of the glyph in pixels, 1 to 64
 *
 * @note: x_start & y_start uses zero based counting.
 *
 *******************************************************************************************************************/
void oled_clearGlyphRegion(uint8_t x_start, uint8_t y_start, uint8_t glyph_width, uint8_t glyph_height)	{
 8003278:	b490      	push	{r4, r7}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	4604      	mov	r4, r0
 8003280:	4608      	mov	r0, r1
 8003282:	4611      	mov	r1, r2
 8003284:	461a      	mov	r2, r3
 8003286:	4623      	mov	r3, r4
 8003288:	71fb      	strb	r3, [r7, #7]
 800328a:	4603      	mov	r3, r0
 800328c:	71bb      	strb	r3, [r7, #6]
 800328e:	460b      	mov	r3, r1
 8003290:	717b      	strb	r3, [r7, #5]
 8003292:	4613      	mov	r3, r2
 8003294:	713b      	strb	r3, [r7, #4]


	uint8_t y_end = (y_start + glyph_height) - 1; //y end coordinate
 8003296:	79ba      	ldrb	r2, [r7, #6]
 8003298:	793b      	ldrb	r3, [r7, #4]
 800329a:	4413      	add	r3, r2
 800329c:	b2db      	uxtb	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	753b      	strb	r3, [r7, #20]
	uint8_t x_end = (x_start + glyph_width) - 1; //x end coordinate
 80032a2:	79fa      	ldrb	r2, [r7, #7]
 80032a4:	797b      	ldrb	r3, [r7, #5]
 80032a6:	4413      	add	r3, r2
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	74fb      	strb	r3, [r7, #19]

	uint8_t page_start = y_start / 8; 	//starting page location
 80032ae:	79bb      	ldrb	r3, [r7, #6]
 80032b0:	08db      	lsrs	r3, r3, #3
 80032b2:	74bb      	strb	r3, [r7, #18]
	uint8_t page_end = y_end / 8; 	//ending page location
 80032b4:	7d3b      	ldrb	r3, [r7, #20]
 80032b6:	08db      	lsrs	r3, r3, #3
 80032b8:	747b      	strb	r3, [r7, #17]

	uint8_t mask;
	uint8_t start_mask = 0xFF << (y_start % 8); //pre-calculate mask for the starting page
 80032ba:	79bb      	ldrb	r3, [r7, #6]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	22ff      	movs	r2, #255	@ 0xff
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	743b      	strb	r3, [r7, #16]
	uint8_t end_mask = 0xFF >> (8 - ((y_end % 8) + 1) ); //pre-calculate mask for the ending page
 80032c8:	7d3b      	ldrb	r3, [r7, #20]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	22ff      	movs	r2, #255	@ 0xff
 80032d2:	fa42 f303 	asr.w	r3, r2, r3
 80032d6:	73fb      	strb	r3, [r7, #15]

	//boundary check
	if(x_start < 0 || x_start >= WIDTH || y_start < 0 || y_start >= HEIGHT ||  x_end >= WIDTH || y_end >= HEIGHT) {
 80032d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	db5a      	blt.n	8003396 <oled_clearGlyphRegion+0x11e>
 80032e0:	79bb      	ldrb	r3, [r7, #6]
 80032e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80032e4:	d857      	bhi.n	8003396 <oled_clearGlyphRegion+0x11e>
 80032e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	db53      	blt.n	8003396 <oled_clearGlyphRegion+0x11e>
 80032ee:	7d3b      	ldrb	r3, [r7, #20]
 80032f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80032f2:	d850      	bhi.n	8003396 <oled_clearGlyphRegion+0x11e>
		// Don't write outside the buffer
		return;
	}

	//loop from start page to end page of region
	for (uint8_t page_counter = page_start; page_counter <= page_end; page_counter++) {
 80032f4:	7cbb      	ldrb	r3, [r7, #18]
 80032f6:	75bb      	strb	r3, [r7, #22]
 80032f8:	e048      	b.n	800338c <oled_clearGlyphRegion+0x114>

		//determine the mask to use for clearing the pixels in the glyph region

		//if glyph fits within a single page
		if(page_start == page_end && page_counter == page_end) {
 80032fa:	7cba      	ldrb	r2, [r7, #18]
 80032fc:	7c7b      	ldrb	r3, [r7, #17]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d108      	bne.n	8003314 <oled_clearGlyphRegion+0x9c>
 8003302:	7dba      	ldrb	r2, [r7, #22]
 8003304:	7c7b      	ldrb	r3, [r7, #17]
 8003306:	429a      	cmp	r2, r3
 8003308:	d104      	bne.n	8003314 <oled_clearGlyphRegion+0x9c>
			mask = start_mask & end_mask;
 800330a:	7c3a      	ldrb	r2, [r7, #16]
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	4013      	ands	r3, r2
 8003310:	75fb      	strb	r3, [r7, #23]
 8003312:	e017      	b.n	8003344 <oled_clearGlyphRegion+0xcc>
		 * at 1st page, if glyph is not page aligned, mask only the bits (pixels) from y_start to page y_end
		 * Ex. if y_start = 18, so bit_offset = 18 % 8 = 2, so mask = 11111111 << 2 = 11111100
		 * this will only clear the pixels from bit 2 to bit 7 (y = 18 to y = 23) of page 2
		 * leaving bit 0 and bit 1 (y = 16 & 17, of page 2) untouched
		 */
		else if (page_counter == page_start) {
 8003314:	7dba      	ldrb	r2, [r7, #22]
 8003316:	7cbb      	ldrb	r3, [r7, #18]
 8003318:	429a      	cmp	r2, r3
 800331a:	d102      	bne.n	8003322 <oled_clearGlyphRegion+0xaa>
			mask = start_mask;
 800331c:	7c3b      	ldrb	r3, [r7, #16]
 800331e:	75fb      	strb	r3, [r7, #23]
 8003320:	e010      	b.n	8003344 <oled_clearGlyphRegion+0xcc>

		/*
		 * if in the middle pages, meaning the whole page is occupied by the glyph region,
		 * clear the whole 8 bits (pixels) of the page (page aligned clearing),
		 */
		else if(page_counter > page_start && page_counter < page_end) {
 8003322:	7dba      	ldrb	r2, [r7, #22]
 8003324:	7cbb      	ldrb	r3, [r7, #18]
 8003326:	429a      	cmp	r2, r3
 8003328:	d906      	bls.n	8003338 <oled_clearGlyphRegion+0xc0>
 800332a:	7dba      	ldrb	r2, [r7, #22]
 800332c:	7c7b      	ldrb	r3, [r7, #17]
 800332e:	429a      	cmp	r2, r3
 8003330:	d202      	bcs.n	8003338 <oled_clearGlyphRegion+0xc0>
			mask = 0xFF;
 8003332:	23ff      	movs	r3, #255	@ 0xff
 8003334:	75fb      	strb	r3, [r7, #23]
 8003336:	e005      	b.n	8003344 <oled_clearGlyphRegion+0xcc>
		 * if in the last page, mask only the bits (pixels) from page y_start to glyph y_end
		 * Ex. if y_page_start = 40 & page_y_end = 41, so mask = 11111111 >> (8 - ((41 - 40) + 1) ) = 00000011
		 *     this will only clear the pixels from bit 0 to bit 1 (y = 40 to y = 41) of page 5
		 *     leaving bit 2 to bit 7 (y = 42 to y = 47, of page 5) untouched
		 */
		else if(page_counter == page_end) {
 8003338:	7dba      	ldrb	r2, [r7, #22]
 800333a:	7c7b      	ldrb	r3, [r7, #17]
 800333c:	429a      	cmp	r2, r3
 800333e:	d101      	bne.n	8003344 <oled_clearGlyphRegion+0xcc>

			mask = end_mask;
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	75fb      	strb	r3, [r7, #23]
		}



		//use pointer arithmetic to not have to recalculate the index in every iteration of the inner loop. Optimize performance.
		uint8_t *OLED_bufferptr = &OLED_ScreenBuffer[x_start + (page_counter * WIDTH)];
 8003344:	79fa      	ldrb	r2, [r7, #7]
 8003346:	7dbb      	ldrb	r3, [r7, #22]
 8003348:	01db      	lsls	r3, r3, #7
 800334a:	4413      	add	r3, r2
 800334c:	4a14      	ldr	r2, [pc, #80]	@ (80033a0 <oled_clearGlyphRegion+0x128>)
 800334e:	4413      	add	r3, r2
 8003350:	60bb      	str	r3, [r7, #8]

		//loop from 0 to glyph_width to clear the pixels in the glyph region
		for (uint8_t x_counter = 0; x_counter < glyph_width; x_counter++) {
 8003352:	2300      	movs	r3, #0
 8003354:	757b      	strb	r3, [r7, #21]
 8003356:	e012      	b.n	800337e <oled_clearGlyphRegion+0x106>

			OLED_bufferptr[x_counter] &= ~(mask); //inverse the mask to only clear the related pixels
 8003358:	7d7b      	ldrb	r3, [r7, #21]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	4413      	add	r3, r2
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	b25a      	sxtb	r2, r3
 8003362:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003366:	43db      	mvns	r3, r3
 8003368:	b25b      	sxtb	r3, r3
 800336a:	4013      	ands	r3, r2
 800336c:	b259      	sxtb	r1, r3
 800336e:	7d7b      	ldrb	r3, [r7, #21]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	4413      	add	r3, r2
 8003374:	b2ca      	uxtb	r2, r1
 8003376:	701a      	strb	r2, [r3, #0]
		for (uint8_t x_counter = 0; x_counter < glyph_width; x_counter++) {
 8003378:	7d7b      	ldrb	r3, [r7, #21]
 800337a:	3301      	adds	r3, #1
 800337c:	757b      	strb	r3, [r7, #21]
 800337e:	7d7a      	ldrb	r2, [r7, #21]
 8003380:	797b      	ldrb	r3, [r7, #5]
 8003382:	429a      	cmp	r2, r3
 8003384:	d3e8      	bcc.n	8003358 <oled_clearGlyphRegion+0xe0>
	for (uint8_t page_counter = page_start; page_counter <= page_end; page_counter++) {
 8003386:	7dbb      	ldrb	r3, [r7, #22]
 8003388:	3301      	adds	r3, #1
 800338a:	75bb      	strb	r3, [r7, #22]
 800338c:	7dba      	ldrb	r2, [r7, #22]
 800338e:	7c7b      	ldrb	r3, [r7, #17]
 8003390:	429a      	cmp	r2, r3
 8003392:	d9b2      	bls.n	80032fa <oled_clearGlyphRegion+0x82>
 8003394:	e000      	b.n	8003398 <oled_clearGlyphRegion+0x120>
		return;
 8003396:	bf00      	nop
		}
	}
}
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bc90      	pop	{r4, r7}
 800339e:	4770      	bx	lr
 80033a0:	2000000c 	.word	0x2000000c

080033a4 <oled_RenderGlyph>:
 *							GLYPH_MODE_TOGGLE  		- 	Toggles the pixels of the glyph
 *							GLYPH_MODE_CLEAR   		- 	Clears the pixels of the glyph region to OFF state
 * @param: GlyphIndex	-	Index of the glyph in the glyph bitmap array to render, this selects which glyph to render if the bitmap array has multiple glyphs stored inside
 * 							If glyph bitmap array only contains one glyph, set this parameter to 0.
 *******************************************************************************/
void oled_RenderGlyph(const Glyph_Metadata_t *glyph_meta, GlyphArray_Index_t GlyphIndex,GlyphRederMode_t mode) {
 80033a4:	b5b0      	push	{r4, r5, r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	70fb      	strb	r3, [r7, #3]
 80033b0:	4613      	mov	r3, r2
 80033b2:	70bb      	strb	r3, [r7, #2]

	//Check if glyph bitmao array has multiple glyphs stored inside
	if(glyph_meta->elements_per_glpyh > 0 && glyph_meta->glyph_index_limit > 0){
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	7a1b      	ldrb	r3, [r3, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d021      	beq.n	8003400 <oled_RenderGlyph+0x5c>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	7a5b      	ldrb	r3, [r3, #9]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01d      	beq.n	8003400 <oled_RenderGlyph+0x5c>

		//boundary check for glyph index
		if (GlyphIndex > glyph_meta->glyph_index_limit) {
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	7a5b      	ldrb	r3, [r3, #9]
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d82a      	bhi.n	8003424 <oled_RenderGlyph+0x80>
			//invalid glyph index, out of bounds, return
			return;
		}
		//if within range, render the glyph.
		oled_drawBMP(glyph_meta->x_coordinate, glyph_meta->y_coordinate,&(glyph_meta->bitmap[GlyphIndex * (glyph_meta->elements_per_glpyh)]), glyph_meta->width, glyph_meta->height, mode);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	7998      	ldrb	r0, [r3, #6]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	79dc      	ldrb	r4, [r3, #7]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	7a09      	ldrb	r1, [r1, #8]
 80033e0:	fb01 f202 	mul.w	r2, r1, r2
 80033e4:	1899      	adds	r1, r3, r2
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	791d      	ldrb	r5, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	795b      	ldrb	r3, [r3, #5]
 80033ee:	78ba      	ldrb	r2, [r7, #2]
 80033f0:	9201      	str	r2, [sp, #4]
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	462b      	mov	r3, r5
 80033f6:	460a      	mov	r2, r1
 80033f8:	4621      	mov	r1, r4
 80033fa:	f7ff fe09 	bl	8003010 <oled_drawBMP>
 80033fe:	e012      	b.n	8003426 <oled_RenderGlyph+0x82>
	}else {
		//if only one glyph is stored in the bitmap array
		oled_drawBMP(glyph_meta->x_coordinate, glyph_meta->y_coordinate, glyph_meta->bitmap, glyph_meta->width, glyph_meta->height, mode);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	7998      	ldrb	r0, [r3, #6]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	79d9      	ldrb	r1, [r3, #7]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681c      	ldr	r4, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	791d      	ldrb	r5, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	795b      	ldrb	r3, [r3, #5]
 8003414:	78ba      	ldrb	r2, [r7, #2]
 8003416:	9201      	str	r2, [sp, #4]
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	462b      	mov	r3, r5
 800341c:	4622      	mov	r2, r4
 800341e:	f7ff fdf7 	bl	8003010 <oled_drawBMP>
 8003422:	e000      	b.n	8003426 <oled_RenderGlyph+0x82>
			return;
 8003424:	bf00      	nop
	}
}
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bdb0      	pop	{r4, r5, r7, pc}

0800342c <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003430:	4b05      	ldr	r3, [pc, #20]	@ (8003448 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	4a04      	ldr	r2, [pc, #16]	@ (8003448 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	6053      	str	r3, [r2, #4]
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	e0042000 	.word	0xe0042000

0800344c <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003450:	4b05      	ldr	r3, [pc, #20]	@ (8003468 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	4a04      	ldr	r2, [pc, #16]	@ (8003468 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003456:	f043 0302 	orr.w	r3, r3, #2
 800345a:	6053      	str	r3, [r2, #4]
}
 800345c:	bf00      	nop
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	e0042000 	.word	0xe0042000

0800346c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003476:	4b0c      	ldr	r3, [pc, #48]	@ (80034a8 <HAL_Init+0x3c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a0b      	ldr	r2, [pc, #44]	@ (80034a8 <HAL_Init+0x3c>)
 800347c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003480:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003482:	2003      	movs	r0, #3
 8003484:	f001 f85e 	bl	8004544 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003488:	200f      	movs	r0, #15
 800348a:	f000 f80f 	bl	80034ac <HAL_InitTick>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	71fb      	strb	r3, [r7, #7]
 8003498:	e001      	b.n	800349e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800349a:	f7ff f9d2 	bl	8002842 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800349e:	79fb      	ldrb	r3, [r7, #7]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	58004000 	.word	0x58004000

080034ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80034b8:	4b17      	ldr	r3, [pc, #92]	@ (8003518 <HAL_InitTick+0x6c>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d024      	beq.n	800350a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80034c0:	f003 f9ce 	bl	8006860 <HAL_RCC_GetHCLKFreq>
 80034c4:	4602      	mov	r2, r0
 80034c6:	4b14      	ldr	r3, [pc, #80]	@ (8003518 <HAL_InitTick+0x6c>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	4619      	mov	r1, r3
 80034cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80034d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d8:	4618      	mov	r0, r3
 80034da:	f001 f874 	bl	80045c6 <HAL_SYSTICK_Config>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10f      	bne.n	8003504 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b0f      	cmp	r3, #15
 80034e8:	d809      	bhi.n	80034fe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034ea:	2200      	movs	r2, #0
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	f04f 30ff 	mov.w	r0, #4294967295
 80034f2:	f001 f832 	bl	800455a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034f6:	4a09      	ldr	r2, [pc, #36]	@ (800351c <HAL_InitTick+0x70>)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	e007      	b.n	800350e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	73fb      	strb	r3, [r7, #15]
 8003502:	e004      	b.n	800350e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
 8003508:	e001      	b.n	800350e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800350e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000410 	.word	0x20000410
 800351c:	2000040c 	.word	0x2000040c

08003520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003524:	4b06      	ldr	r3, [pc, #24]	@ (8003540 <HAL_IncTick+0x20>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	4b06      	ldr	r3, [pc, #24]	@ (8003544 <HAL_IncTick+0x24>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4413      	add	r3, r2
 8003530:	4a04      	ldr	r2, [pc, #16]	@ (8003544 <HAL_IncTick+0x24>)
 8003532:	6013      	str	r3, [r2, #0]
}
 8003534:	bf00      	nop
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20000410 	.word	0x20000410
 8003544:	20000750 	.word	0x20000750

08003548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return uwTick;
 800354c:	4b03      	ldr	r3, [pc, #12]	@ (800355c <HAL_GetTick+0x14>)
 800354e:	681b      	ldr	r3, [r3, #0]
}
 8003550:	4618      	mov	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	20000750 	.word	0x20000750

08003560 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003564:	4b03      	ldr	r3, [pc, #12]	@ (8003574 <HAL_GetTickPrio+0x14>)
 8003566:	681b      	ldr	r3, [r3, #0]
}
 8003568:	4618      	mov	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	2000040c 	.word	0x2000040c

08003578 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800357c:	4b03      	ldr	r3, [pc, #12]	@ (800358c <HAL_GetTickFreq+0x14>)
 800357e:	781b      	ldrb	r3, [r3, #0]
}
 8003580:	4618      	mov	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	20000410 	.word	0x20000410

08003590 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003594:	f7ff ff4a 	bl	800342c <LL_DBGMCU_EnableDBGSleepMode>
}
 8003598:	bf00      	nop
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80035a0:	f7ff ff54 	bl	800344c <LL_DBGMCU_EnableDBGStopMode>
}
 80035a4:	bf00      	nop
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	609a      	str	r2, [r3, #8]
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003604:	4618      	mov	r0, r3
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3360      	adds	r3, #96	@ 0x60
 8003622:	461a      	mov	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	4b08      	ldr	r3, [pc, #32]	@ (8003654 <LL_ADC_SetOffset+0x44>)
 8003632:	4013      	ands	r3, r2
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	4313      	orrs	r3, r2
 8003640:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003648:	bf00      	nop
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	03fff000 	.word	0x03fff000

08003658 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3360      	adds	r3, #96	@ 0x60
 8003666:	461a      	mov	r2, r3
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	3360      	adds	r3, #96	@ 0x60
 8003694:	461a      	mov	r2, r3
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	431a      	orrs	r2, r3
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80036ae:	bf00      	nop
 80036b0:	371c      	adds	r7, #28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b087      	sub	sp, #28
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3330      	adds	r3, #48	@ 0x30
 80036ca:	461a      	mov	r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	0a1b      	lsrs	r3, r3, #8
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	4413      	add	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	211f      	movs	r1, #31
 80036e6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ea:	43db      	mvns	r3, r3
 80036ec:	401a      	ands	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	0e9b      	lsrs	r3, r3, #26
 80036f2:	f003 011f 	and.w	r1, r3, #31
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f003 031f 	and.w	r3, r3, #31
 80036fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003700:	431a      	orrs	r2, r3
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8003706:	bf00      	nop
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003712:	b480      	push	{r7}
 8003714:	b087      	sub	sp, #28
 8003716:	af00      	add	r7, sp, #0
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3314      	adds	r3, #20
 8003722:	461a      	mov	r2, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	0e5b      	lsrs	r3, r3, #25
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	4413      	add	r3, r2
 8003730:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	0d1b      	lsrs	r3, r3, #20
 800373a:	f003 031f 	and.w	r3, r3, #31
 800373e:	2107      	movs	r1, #7
 8003740:	fa01 f303 	lsl.w	r3, r1, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	401a      	ands	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	0d1b      	lsrs	r3, r3, #20
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	fa01 f303 	lsl.w	r3, r1, r3
 8003756:	431a      	orrs	r2, r3
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800375c:	bf00      	nop
 800375e:	371c      	adds	r7, #28
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003780:	43db      	mvns	r3, r3
 8003782:	401a      	ands	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f003 0318 	and.w	r3, r3, #24
 800378a:	4908      	ldr	r1, [pc, #32]	@ (80037ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800378c:	40d9      	lsrs	r1, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	400b      	ands	r3, r1
 8003792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003796:	431a      	orrs	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800379e:	bf00      	nop
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	0007ffff 	.word	0x0007ffff

080037b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80037c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6093      	str	r3, [r2, #8]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037e8:	d101      	bne.n	80037ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800380c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003810:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003834:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003838:	d101      	bne.n	800383e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <LL_ADC_IsEnabled+0x18>
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <LL_ADC_IsEnabled+0x1a>
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b04      	cmp	r3, #4
 8003884:	d101      	bne.n	800388a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d101      	bne.n	80038b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b088      	sub	sp, #32
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e12e      	b.n	8003b3c <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d109      	bne.n	8003900 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7fe ffb9 	bl	8002864 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff ff65 	bl	80037d4 <LL_ADC_IsDeepPowerDownEnabled>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d004      	beq.n	800391a <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff ff4b 	bl	80037b0 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff ff80 	bl	8003824 <LL_ADC_IsInternalRegulatorEnabled>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d115      	bne.n	8003956 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff ff64 	bl	80037fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003934:	4b83      	ldr	r3, [pc, #524]	@ (8003b44 <HAL_ADC_Init+0x284>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	099b      	lsrs	r3, r3, #6
 800393a:	4a83      	ldr	r2, [pc, #524]	@ (8003b48 <HAL_ADC_Init+0x288>)
 800393c:	fba2 2303 	umull	r2, r3, r2, r3
 8003940:	099b      	lsrs	r3, r3, #6
 8003942:	3301      	adds	r3, #1
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003948:	e002      	b.n	8003950 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	3b01      	subs	r3, #1
 800394e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f9      	bne.n	800394a <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff ff62 	bl	8003824 <LL_ADC_IsInternalRegulatorEnabled>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10d      	bne.n	8003982 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396a:	f043 0210 	orr.w	r2, r3, #16
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003976:	f043 0201 	orr.w	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff ff73 	bl	8003872 <LL_ADC_REG_IsConversionOngoing>
 800398c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003992:	f003 0310 	and.w	r3, r3, #16
 8003996:	2b00      	cmp	r3, #0
 8003998:	f040 80c7 	bne.w	8003b2a <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f040 80c3 	bne.w	8003b2a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80039ac:	f043 0202 	orr.w	r2, r3, #2
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff ff47 	bl	800384c <LL_ADC_IsEnabled>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10b      	bne.n	80039dc <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039c4:	4861      	ldr	r0, [pc, #388]	@ (8003b4c <HAL_ADC_Init+0x28c>)
 80039c6:	f7ff ff41 	bl	800384c <LL_ADC_IsEnabled>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d105      	bne.n	80039dc <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	4619      	mov	r1, r3
 80039d6:	485e      	ldr	r0, [pc, #376]	@ (8003b50 <HAL_ADC_Init+0x290>)
 80039d8:	f7ff fde6 	bl	80035a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	7e5b      	ldrb	r3, [r3, #25]
 80039e0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039e6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80039ec:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80039f2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039fa:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80039fc:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d106      	bne.n	8003a1c <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a12:	3b01      	subs	r3, #1
 8003a14:	045b      	lsls	r3, r3, #17
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d009      	beq.n	8003a38 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a28:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a30:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	4b45      	ldr	r3, [pc, #276]	@ (8003b54 <HAL_ADC_Init+0x294>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6812      	ldr	r2, [r2, #0]
 8003a46:	69b9      	ldr	r1, [r7, #24]
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff ff0e 	bl	8003872 <LL_ADC_REG_IsConversionOngoing>
 8003a56:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff ff1b 	bl	8003898 <LL_ADC_INJ_IsConversionOngoing>
 8003a62:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d13d      	bne.n	8003ae6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d13a      	bne.n	8003ae6 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a74:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a7c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a8c:	f023 0302 	bic.w	r3, r3, #2
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	69b9      	ldr	r1, [r7, #24]
 8003a96:	430b      	orrs	r3, r1
 8003a98:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d118      	bne.n	8003ad6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003aae:	f023 0304 	bic.w	r3, r3, #4
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003aba:	4311      	orrs	r1, r2
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003ac0:	4311      	orrs	r1, r2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	611a      	str	r2, [r3, #16]
 8003ad4:	e007      	b.n	8003ae6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0201 	bic.w	r2, r2, #1
 8003ae4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d10c      	bne.n	8003b08 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af4:	f023 010f 	bic.w	r1, r3, #15
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	1e5a      	subs	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b06:	e007      	b.n	8003b18 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 020f 	bic.w	r2, r2, #15
 8003b16:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1c:	f023 0303 	bic.w	r3, r3, #3
 8003b20:	f043 0201 	orr.w	r2, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	655a      	str	r2, [r3, #84]	@ 0x54
 8003b28:	e007      	b.n	8003b3a <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b2e:	f043 0210 	orr.w	r2, r3, #16
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3720      	adds	r7, #32
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	20000008 	.word	0x20000008
 8003b48:	053e2d63 	.word	0x053e2d63
 8003b4c:	50040000 	.word	0x50040000
 8003b50:	50040300 	.word	0x50040300
 8003b54:	fff0c007 	.word	0xfff0c007

08003b58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b0b6      	sub	sp, #216	@ 0xd8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <HAL_ADC_ConfigChannel+0x22>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e39f      	b.n	80042ba <HAL_ADC_ConfigChannel+0x762>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff fe73 	bl	8003872 <LL_ADC_REG_IsConversionOngoing>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f040 8384 	bne.w	800429c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6818      	ldr	r0, [r3, #0]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	f7ff fd8a 	bl	80036ba <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff fe61 	bl	8003872 <LL_ADC_REG_IsConversionOngoing>
 8003bb0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fe6d 	bl	8003898 <LL_ADC_INJ_IsConversionOngoing>
 8003bbe:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bc2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f040 81a6 	bne.w	8003f18 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003bcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f040 81a1 	bne.w	8003f18 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	6819      	ldr	r1, [r3, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	461a      	mov	r2, r3
 8003be4:	f7ff fd95 	bl	8003712 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	695a      	ldr	r2, [r3, #20]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	08db      	lsrs	r3, r3, #3
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d00a      	beq.n	8003c20 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	6919      	ldr	r1, [r3, #16]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003c1a:	f7ff fcf9 	bl	8003610 <LL_ADC_SetOffset>
 8003c1e:	e17b      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2100      	movs	r1, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff fd16 	bl	8003658 <LL_ADC_GetOffsetChannel>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10a      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0xf4>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff fd0b 	bl	8003658 <LL_ADC_GetOffsetChannel>
 8003c42:	4603      	mov	r3, r0
 8003c44:	0e9b      	lsrs	r3, r3, #26
 8003c46:	f003 021f 	and.w	r2, r3, #31
 8003c4a:	e01e      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x132>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2100      	movs	r1, #0
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff fd00 	bl	8003658 <LL_ADC_GetOffsetChannel>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 8003c6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  if (value == 0U)
 8003c72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8003c7a:	2320      	movs	r3, #32
 8003c7c:	e004      	b.n	8003c88 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8003c7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c82:	fab3 f383 	clz	r3, r3
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d105      	bne.n	8003ca2 <HAL_ADC_ConfigChannel+0x14a>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	0e9b      	lsrs	r3, r3, #26
 8003c9c:	f003 031f 	and.w	r3, r3, #31
 8003ca0:	e018      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0x17c>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003caa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003cae:	fa93 f3a3 	rbit	r3, r3
 8003cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003cbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8003cc6:	2320      	movs	r3, #32
 8003cc8:	e004      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8003cca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003cce:	fab3 f383 	clz	r3, r3
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d106      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff fccf 	bl	8003684 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2101      	movs	r1, #1
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff fcb3 	bl	8003658 <LL_ADC_GetOffsetChannel>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10a      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x1ba>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2101      	movs	r1, #1
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff fca8 	bl	8003658 <LL_ADC_GetOffsetChannel>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	0e9b      	lsrs	r3, r3, #26
 8003d0c:	f003 021f 	and.w	r2, r3, #31
 8003d10:	e01e      	b.n	8003d50 <HAL_ADC_ConfigChannel+0x1f8>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2101      	movs	r1, #1
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff fc9d 	bl	8003658 <LL_ADC_GetOffsetChannel>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d28:	fa93 f3a3 	rbit	r3, r3
 8003d2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003d30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003d38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8003d40:	2320      	movs	r3, #32
 8003d42:	e004      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8003d44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d48:	fab3 f383 	clz	r3, r3
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	461a      	mov	r2, r3
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d105      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x210>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	0e9b      	lsrs	r3, r3, #26
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	e018      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x242>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d74:	fa93 f3a3 	rbit	r3, r3
 8003d78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003d7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003d84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8003d8c:	2320      	movs	r3, #32
 8003d8e:	e004      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8003d90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d94:	fab3 f383 	clz	r3, r3
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d106      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2200      	movs	r2, #0
 8003da4:	2101      	movs	r1, #1
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff fc6c 	bl	8003684 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2102      	movs	r1, #2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fc50 	bl	8003658 <LL_ADC_GetOffsetChannel>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10a      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x280>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff fc45 	bl	8003658 <LL_ADC_GetOffsetChannel>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	0e9b      	lsrs	r3, r3, #26
 8003dd2:	f003 021f 	and.w	r2, r3, #31
 8003dd6:	e01e      	b.n	8003e16 <HAL_ADC_ConfigChannel+0x2be>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2102      	movs	r1, #2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff fc3a 	bl	8003658 <LL_ADC_GetOffsetChannel>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dee:	fa93 f3a3 	rbit	r3, r3
 8003df2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003df6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003dfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003dfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8003e06:	2320      	movs	r3, #32
 8003e08:	e004      	b.n	8003e14 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003e0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e0e:	fab3 f383 	clz	r3, r3
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d105      	bne.n	8003e2e <HAL_ADC_ConfigChannel+0x2d6>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	0e9b      	lsrs	r3, r3, #26
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	e016      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x304>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e3a:	fa93 f3a3 	rbit	r3, r3
 8003e3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003e40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003e46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003e4e:	2320      	movs	r3, #32
 8003e50:	e004      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8003e52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e56:	fab3 f383 	clz	r3, r3
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d106      	bne.n	8003e6e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2200      	movs	r2, #0
 8003e66:	2102      	movs	r1, #2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fc0b 	bl	8003684 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2103      	movs	r1, #3
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff fbef 	bl	8003658 <LL_ADC_GetOffsetChannel>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10a      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x342>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2103      	movs	r1, #3
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff fbe4 	bl	8003658 <LL_ADC_GetOffsetChannel>
 8003e90:	4603      	mov	r3, r0
 8003e92:	0e9b      	lsrs	r3, r3, #26
 8003e94:	f003 021f 	and.w	r2, r3, #31
 8003e98:	e017      	b.n	8003eca <HAL_ADC_ConfigChannel+0x372>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2103      	movs	r1, #3
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff fbd9 	bl	8003658 <LL_ADC_GetOffsetChannel>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003eac:	fa93 f3a3 	rbit	r3, r3
 8003eb0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003eb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003eb4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003eb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8003ebc:	2320      	movs	r3, #32
 8003ebe:	e003      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8003ec0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ec2:	fab3 f383 	clz	r3, r3
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d105      	bne.n	8003ee2 <HAL_ADC_ConfigChannel+0x38a>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	0e9b      	lsrs	r3, r3, #26
 8003edc:	f003 031f 	and.w	r3, r3, #31
 8003ee0:	e011      	b.n	8003f06 <HAL_ADC_ConfigChannel+0x3ae>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003eea:	fa93 f3a3 	rbit	r3, r3
 8003eee:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003ef0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ef2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003ef4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8003efa:	2320      	movs	r3, #32
 8003efc:	e003      	b.n	8003f06 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8003efe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f00:	fab3 f383 	clz	r3, r3
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d106      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	2103      	movs	r1, #3
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fbb6 	bl	8003684 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff fc95 	bl	800384c <LL_ADC_IsEnabled>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f040 81c2 	bne.w	80042ae <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	6819      	ldr	r1, [r3, #0]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	461a      	mov	r2, r3
 8003f38:	f7ff fc16 	bl	8003768 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	4a8e      	ldr	r2, [pc, #568]	@ (800417c <HAL_ADC_ConfigChannel+0x624>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	f040 8130 	bne.w	80041a8 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10b      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x418>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	0e9b      	lsrs	r3, r3, #26
 8003f5e:	3301      	adds	r3, #1
 8003f60:	f003 031f 	and.w	r3, r3, #31
 8003f64:	2b09      	cmp	r3, #9
 8003f66:	bf94      	ite	ls
 8003f68:	2301      	movls	r3, #1
 8003f6a:	2300      	movhi	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	e019      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x44c>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f78:	fa93 f3a3 	rbit	r3, r3
 8003f7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003f7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f80:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003f82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003f88:	2320      	movs	r3, #32
 8003f8a:	e003      	b.n	8003f94 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8003f8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f8e:	fab3 f383 	clz	r3, r3
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	3301      	adds	r3, #1
 8003f96:	f003 031f 	and.w	r3, r3, #31
 8003f9a:	2b09      	cmp	r3, #9
 8003f9c:	bf94      	ite	ls
 8003f9e:	2301      	movls	r3, #1
 8003fa0:	2300      	movhi	r3, #0
 8003fa2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d079      	beq.n	800409c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d107      	bne.n	8003fc4 <HAL_ADC_ConfigChannel+0x46c>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	0e9b      	lsrs	r3, r3, #26
 8003fba:	3301      	adds	r3, #1
 8003fbc:	069b      	lsls	r3, r3, #26
 8003fbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fc2:	e015      	b.n	8003ff0 <HAL_ADC_ConfigChannel+0x498>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fcc:	fa93 f3a3 	rbit	r3, r3
 8003fd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003fd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fd4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003fd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003fdc:	2320      	movs	r3, #32
 8003fde:	e003      	b.n	8003fe8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe2:	fab3 f383 	clz	r3, r3
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	3301      	adds	r3, #1
 8003fea:	069b      	lsls	r3, r3, #26
 8003fec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d109      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x4b8>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	0e9b      	lsrs	r3, r3, #26
 8004002:	3301      	adds	r3, #1
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	2101      	movs	r1, #1
 800400a:	fa01 f303 	lsl.w	r3, r1, r3
 800400e:	e017      	b.n	8004040 <HAL_ADC_ConfigChannel+0x4e8>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004016:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004018:	fa93 f3a3 	rbit	r3, r3
 800401c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800401e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004020:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004022:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8004028:	2320      	movs	r3, #32
 800402a:	e003      	b.n	8004034 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 800402c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800402e:	fab3 f383 	clz	r3, r3
 8004032:	b2db      	uxtb	r3, r3
 8004034:	3301      	adds	r3, #1
 8004036:	f003 031f 	and.w	r3, r3, #31
 800403a:	2101      	movs	r1, #1
 800403c:	fa01 f303 	lsl.w	r3, r1, r3
 8004040:	ea42 0103 	orr.w	r1, r2, r3
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10a      	bne.n	8004066 <HAL_ADC_ConfigChannel+0x50e>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	0e9b      	lsrs	r3, r3, #26
 8004056:	3301      	adds	r3, #1
 8004058:	f003 021f 	and.w	r2, r3, #31
 800405c:	4613      	mov	r3, r2
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	4413      	add	r3, r2
 8004062:	051b      	lsls	r3, r3, #20
 8004064:	e018      	b.n	8004098 <HAL_ADC_ConfigChannel+0x540>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800406e:	fa93 f3a3 	rbit	r3, r3
 8004072:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004076:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800407e:	2320      	movs	r3, #32
 8004080:	e003      	b.n	800408a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004084:	fab3 f383 	clz	r3, r3
 8004088:	b2db      	uxtb	r3, r3
 800408a:	3301      	adds	r3, #1
 800408c:	f003 021f 	and.w	r2, r3, #31
 8004090:	4613      	mov	r3, r2
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	4413      	add	r3, r2
 8004096:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004098:	430b      	orrs	r3, r1
 800409a:	e080      	b.n	800419e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d107      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x560>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	0e9b      	lsrs	r3, r3, #26
 80040ae:	3301      	adds	r3, #1
 80040b0:	069b      	lsls	r3, r3, #26
 80040b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040b6:	e015      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x58c>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040c0:	fa93 f3a3 	rbit	r3, r3
 80040c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80040c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80040ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80040d0:	2320      	movs	r3, #32
 80040d2:	e003      	b.n	80040dc <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80040d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d6:	fab3 f383 	clz	r3, r3
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	3301      	adds	r3, #1
 80040de:	069b      	lsls	r3, r3, #26
 80040e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d109      	bne.n	8004104 <HAL_ADC_ConfigChannel+0x5ac>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	0e9b      	lsrs	r3, r3, #26
 80040f6:	3301      	adds	r3, #1
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	2101      	movs	r1, #1
 80040fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004102:	e017      	b.n	8004134 <HAL_ADC_ConfigChannel+0x5dc>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	fa93 f3a3 	rbit	r3, r3
 8004110:	61fb      	str	r3, [r7, #28]
  return result;
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 800411c:	2320      	movs	r3, #32
 800411e:	e003      	b.n	8004128 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8004120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004122:	fab3 f383 	clz	r3, r3
 8004126:	b2db      	uxtb	r3, r3
 8004128:	3301      	adds	r3, #1
 800412a:	f003 031f 	and.w	r3, r3, #31
 800412e:	2101      	movs	r1, #1
 8004130:	fa01 f303 	lsl.w	r3, r1, r3
 8004134:	ea42 0103 	orr.w	r1, r2, r3
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10d      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x608>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	0e9b      	lsrs	r3, r3, #26
 800414a:	3301      	adds	r3, #1
 800414c:	f003 021f 	and.w	r2, r3, #31
 8004150:	4613      	mov	r3, r2
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	4413      	add	r3, r2
 8004156:	3b1e      	subs	r3, #30
 8004158:	051b      	lsls	r3, r3, #20
 800415a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800415e:	e01d      	b.n	800419c <HAL_ADC_ConfigChannel+0x644>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	fa93 f3a3 	rbit	r3, r3
 800416c:	613b      	str	r3, [r7, #16]
  return result;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d103      	bne.n	8004180 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8004178:	2320      	movs	r3, #32
 800417a:	e005      	b.n	8004188 <HAL_ADC_ConfigChannel+0x630>
 800417c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	fab3 f383 	clz	r3, r3
 8004186:	b2db      	uxtb	r3, r3
 8004188:	3301      	adds	r3, #1
 800418a:	f003 021f 	and.w	r2, r3, #31
 800418e:	4613      	mov	r3, r2
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	4413      	add	r3, r2
 8004194:	3b1e      	subs	r3, #30
 8004196:	051b      	lsls	r3, r3, #20
 8004198:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800419c:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041a2:	4619      	mov	r1, r3
 80041a4:	f7ff fab5 	bl	8003712 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4b45      	ldr	r3, [pc, #276]	@ (80042c4 <HAL_ADC_ConfigChannel+0x76c>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d07c      	beq.n	80042ae <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041b4:	4844      	ldr	r0, [pc, #272]	@ (80042c8 <HAL_ADC_ConfigChannel+0x770>)
 80041b6:	f7ff fa1d 	bl	80035f4 <LL_ADC_GetCommonPathInternalCh>
 80041ba:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041be:	4843      	ldr	r0, [pc, #268]	@ (80042cc <HAL_ADC_ConfigChannel+0x774>)
 80041c0:	f7ff fb44 	bl	800384c <LL_ADC_IsEnabled>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d15e      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a40      	ldr	r2, [pc, #256]	@ (80042d0 <HAL_ADC_ConfigChannel+0x778>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d127      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x6cc>
 80041d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d121      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a39      	ldr	r2, [pc, #228]	@ (80042cc <HAL_ADC_ConfigChannel+0x774>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d161      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80041ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041f2:	4619      	mov	r1, r3
 80041f4:	4834      	ldr	r0, [pc, #208]	@ (80042c8 <HAL_ADC_ConfigChannel+0x770>)
 80041f6:	f7ff f9ea 	bl	80035ce <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041fa:	4b36      	ldr	r3, [pc, #216]	@ (80042d4 <HAL_ADC_ConfigChannel+0x77c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	099b      	lsrs	r3, r3, #6
 8004200:	4a35      	ldr	r2, [pc, #212]	@ (80042d8 <HAL_ADC_ConfigChannel+0x780>)
 8004202:	fba2 2303 	umull	r2, r3, r2, r3
 8004206:	099b      	lsrs	r3, r3, #6
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	4613      	mov	r3, r2
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	4413      	add	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004214:	e002      	b.n	800421c <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3b01      	subs	r3, #1
 800421a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f9      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004222:	e044      	b.n	80042ae <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a2c      	ldr	r2, [pc, #176]	@ (80042dc <HAL_ADC_ConfigChannel+0x784>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d113      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x6fe>
 800422e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004232:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10d      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a23      	ldr	r2, [pc, #140]	@ (80042cc <HAL_ADC_ConfigChannel+0x774>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d134      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004244:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004248:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800424c:	4619      	mov	r1, r3
 800424e:	481e      	ldr	r0, [pc, #120]	@ (80042c8 <HAL_ADC_ConfigChannel+0x770>)
 8004250:	f7ff f9bd 	bl	80035ce <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004254:	e02b      	b.n	80042ae <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a21      	ldr	r2, [pc, #132]	@ (80042e0 <HAL_ADC_ConfigChannel+0x788>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d126      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x756>
 8004260:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004264:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d120      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a16      	ldr	r2, [pc, #88]	@ (80042cc <HAL_ADC_ConfigChannel+0x774>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d11b      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004276:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800427a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800427e:	4619      	mov	r1, r3
 8004280:	4811      	ldr	r0, [pc, #68]	@ (80042c8 <HAL_ADC_ConfigChannel+0x770>)
 8004282:	f7ff f9a4 	bl	80035ce <LL_ADC_SetCommonPathInternalCh>
 8004286:	e012      	b.n	80042ae <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800428c:	f043 0220 	orr.w	r2, r3, #32
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800429a:	e008      	b.n	80042ae <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a0:	f043 0220 	orr.w	r2, r3, #32
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80042b6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	37d8      	adds	r7, #216	@ 0xd8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	80080000 	.word	0x80080000
 80042c8:	50040300 	.word	0x50040300
 80042cc:	50040000 	.word	0x50040000
 80042d0:	c7520000 	.word	0xc7520000
 80042d4:	20000008 	.word	0x20000008
 80042d8:	053e2d63 	.word	0x053e2d63
 80042dc:	cb840000 	.word	0xcb840000
 80042e0:	80000001 	.word	0x80000001

080042e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004328 <__NVIC_SetPriorityGrouping+0x44>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004300:	4013      	ands	r3, r2
 8004302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800430c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004316:	4a04      	ldr	r2, [pc, #16]	@ (8004328 <__NVIC_SetPriorityGrouping+0x44>)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	60d3      	str	r3, [r2, #12]
}
 800431c:	bf00      	nop
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	e000ed00 	.word	0xe000ed00

0800432c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004330:	4b04      	ldr	r3, [pc, #16]	@ (8004344 <__NVIC_GetPriorityGrouping+0x18>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	0a1b      	lsrs	r3, r3, #8
 8004336:	f003 0307 	and.w	r3, r3, #7
}
 800433a:	4618      	mov	r0, r3
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	e000ed00 	.word	0xe000ed00

08004348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	4603      	mov	r3, r0
 8004350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004356:	2b00      	cmp	r3, #0
 8004358:	db0b      	blt.n	8004372 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800435a:	79fb      	ldrb	r3, [r7, #7]
 800435c:	f003 021f 	and.w	r2, r3, #31
 8004360:	4907      	ldr	r1, [pc, #28]	@ (8004380 <__NVIC_EnableIRQ+0x38>)
 8004362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	2001      	movs	r0, #1
 800436a:	fa00 f202 	lsl.w	r2, r0, r2
 800436e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	e000e100 	.word	0xe000e100

08004384 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	4603      	mov	r3, r0
 800438c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800438e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004392:	2b00      	cmp	r3, #0
 8004394:	db12      	blt.n	80043bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	f003 021f 	and.w	r2, r3, #31
 800439c:	490a      	ldr	r1, [pc, #40]	@ (80043c8 <__NVIC_DisableIRQ+0x44>)
 800439e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	2001      	movs	r0, #1
 80043a6:	fa00 f202 	lsl.w	r2, r0, r2
 80043aa:	3320      	adds	r3, #32
 80043ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80043b0:	f3bf 8f4f 	dsb	sy
}
 80043b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80043b6:	f3bf 8f6f 	isb	sy
}
 80043ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	e000e100 	.word	0xe000e100

080043cc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4603      	mov	r3, r0
 80043d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	db0c      	blt.n	80043f8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	f003 021f 	and.w	r2, r3, #31
 80043e4:	4907      	ldr	r1, [pc, #28]	@ (8004404 <__NVIC_SetPendingIRQ+0x38>)
 80043e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	2001      	movs	r0, #1
 80043ee:	fa00 f202 	lsl.w	r2, r0, r2
 80043f2:	3340      	adds	r3, #64	@ 0x40
 80043f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	e000e100 	.word	0xe000e100

08004408 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	4603      	mov	r3, r0
 8004410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004416:	2b00      	cmp	r3, #0
 8004418:	db0c      	blt.n	8004434 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800441a:	79fb      	ldrb	r3, [r7, #7]
 800441c:	f003 021f 	and.w	r2, r3, #31
 8004420:	4907      	ldr	r1, [pc, #28]	@ (8004440 <__NVIC_ClearPendingIRQ+0x38>)
 8004422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	2001      	movs	r0, #1
 800442a:	fa00 f202 	lsl.w	r2, r0, r2
 800442e:	3360      	adds	r3, #96	@ 0x60
 8004430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	e000e100 	.word	0xe000e100

08004444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	4603      	mov	r3, r0
 800444c:	6039      	str	r1, [r7, #0]
 800444e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004454:	2b00      	cmp	r3, #0
 8004456:	db0a      	blt.n	800446e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	b2da      	uxtb	r2, r3
 800445c:	490c      	ldr	r1, [pc, #48]	@ (8004490 <__NVIC_SetPriority+0x4c>)
 800445e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004462:	0112      	lsls	r2, r2, #4
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	440b      	add	r3, r1
 8004468:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800446c:	e00a      	b.n	8004484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	b2da      	uxtb	r2, r3
 8004472:	4908      	ldr	r1, [pc, #32]	@ (8004494 <__NVIC_SetPriority+0x50>)
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	3b04      	subs	r3, #4
 800447c:	0112      	lsls	r2, r2, #4
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	440b      	add	r3, r1
 8004482:	761a      	strb	r2, [r3, #24]
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	e000e100 	.word	0xe000e100
 8004494:	e000ed00 	.word	0xe000ed00

08004498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004498:	b480      	push	{r7}
 800449a:	b089      	sub	sp, #36	@ 0x24
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f1c3 0307 	rsb	r3, r3, #7
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	bf28      	it	cs
 80044b6:	2304      	movcs	r3, #4
 80044b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	3304      	adds	r3, #4
 80044be:	2b06      	cmp	r3, #6
 80044c0:	d902      	bls.n	80044c8 <NVIC_EncodePriority+0x30>
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	3b03      	subs	r3, #3
 80044c6:	e000      	b.n	80044ca <NVIC_EncodePriority+0x32>
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044cc:	f04f 32ff 	mov.w	r2, #4294967295
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	43da      	mvns	r2, r3
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	401a      	ands	r2, r3
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044e0:	f04f 31ff 	mov.w	r1, #4294967295
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ea:	43d9      	mvns	r1, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f0:	4313      	orrs	r3, r2
         );
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3724      	adds	r7, #36	@ 0x24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
	...

08004500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3b01      	subs	r3, #1
 800450c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004510:	d301      	bcc.n	8004516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004512:	2301      	movs	r3, #1
 8004514:	e00f      	b.n	8004536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004516:	4a0a      	ldr	r2, [pc, #40]	@ (8004540 <SysTick_Config+0x40>)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3b01      	subs	r3, #1
 800451c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800451e:	210f      	movs	r1, #15
 8004520:	f04f 30ff 	mov.w	r0, #4294967295
 8004524:	f7ff ff8e 	bl	8004444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004528:	4b05      	ldr	r3, [pc, #20]	@ (8004540 <SysTick_Config+0x40>)
 800452a:	2200      	movs	r2, #0
 800452c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800452e:	4b04      	ldr	r3, [pc, #16]	@ (8004540 <SysTick_Config+0x40>)
 8004530:	2207      	movs	r2, #7
 8004532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	e000e010 	.word	0xe000e010

08004544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7ff fec9 	bl	80042e4 <__NVIC_SetPriorityGrouping>
}
 8004552:	bf00      	nop
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b086      	sub	sp, #24
 800455e:	af00      	add	r7, sp, #0
 8004560:	4603      	mov	r3, r0
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	607a      	str	r2, [r7, #4]
 8004566:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004568:	f7ff fee0 	bl	800432c <__NVIC_GetPriorityGrouping>
 800456c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	68b9      	ldr	r1, [r7, #8]
 8004572:	6978      	ldr	r0, [r7, #20]
 8004574:	f7ff ff90 	bl	8004498 <NVIC_EncodePriority>
 8004578:	4602      	mov	r2, r0
 800457a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800457e:	4611      	mov	r1, r2
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff ff5f 	bl	8004444 <__NVIC_SetPriority>
}
 8004586:	bf00      	nop
 8004588:	3718      	adds	r7, #24
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b082      	sub	sp, #8
 8004592:	af00      	add	r7, sp, #0
 8004594:	4603      	mov	r3, r0
 8004596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff fed3 	bl	8004348 <__NVIC_EnableIRQ>
}
 80045a2:	bf00      	nop
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b082      	sub	sp, #8
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	4603      	mov	r3, r0
 80045b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80045b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff fee3 	bl	8004384 <__NVIC_DisableIRQ>
}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7ff ff96 	bl	8004500 <SysTick_Config>
 80045d4:	4603      	mov	r3, r0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	4603      	mov	r3, r0
 80045e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80045e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff feed 	bl	80043cc <__NVIC_SetPendingIRQ>
}
 80045f2:	bf00      	nop
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b082      	sub	sp, #8
 80045fe:	af00      	add	r7, sp, #0
 8004600:	4603      	mov	r3, r0
 8004602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff fefd 	bl	8004408 <__NVIC_ClearPendingIRQ>
}
 800460e:	bf00      	nop
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b086      	sub	sp, #24
 800461a:	af00      	add	r7, sp, #0
 800461c:	60f8      	str	r0, [r7, #12]
 800461e:	60b9      	str	r1, [r7, #8]
 8004620:	607a      	str	r2, [r7, #4]
 8004622:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004624:	2300      	movs	r3, #0
 8004626:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <HAL_DMA_Start_IT+0x20>
 8004632:	2302      	movs	r3, #2
 8004634:	e066      	b.n	8004704 <HAL_DMA_Start_IT+0xee>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b01      	cmp	r3, #1
 8004648:	d155      	bne.n	80046f6 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2202      	movs	r2, #2
 800464e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0201 	bic.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	68b9      	ldr	r1, [r7, #8]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f90a 	bl	8004888 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 020e 	orr.w	r2, r2, #14
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	e00f      	b.n	80046ae <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0204 	bic.w	r2, r2, #4
 800469c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f042 020a 	orr.w	r2, r2, #10
 80046ac:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d007      	beq.n	80046cc <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046ca:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d007      	beq.n	80046e4 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046e2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0201 	orr.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	e005      	b.n	8004702 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80046fe:	2302      	movs	r3, #2
 8004700:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004702:	7dfb      	ldrb	r3, [r7, #23]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e04f      	b.n	80047be <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d008      	beq.n	800473c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2204      	movs	r2, #4
 800472e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e040      	b.n	80047be <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 020e 	bic.w	r2, r2, #14
 800474a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004756:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800475a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0201 	bic.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004770:	f003 021c 	and.w	r2, r3, #28
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004778:	2101      	movs	r1, #1
 800477a:	fa01 f202 	lsl.w	r2, r1, r2
 800477e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004788:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00c      	beq.n	80047ac <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800479c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80047aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d005      	beq.n	80047ee <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2204      	movs	r2, #4
 80047e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
 80047ec:	e047      	b.n	800487e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 020e 	bic.w	r2, r2, #14
 80047fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0201 	bic.w	r2, r2, #1
 800480c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004818:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800481c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004822:	f003 021c 	and.w	r2, r3, #28
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482a:	2101      	movs	r1, #1
 800482c:	fa01 f202 	lsl.w	r2, r1, r2
 8004830:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800483a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00c      	beq.n	800485e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004852:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800485c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	4798      	blx	r3
    }
  }
  return status;
 800487e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800489e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d004      	beq.n	80048b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80048b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b6:	f003 021c 	and.w	r2, r3, #28
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048be:	2101      	movs	r1, #1
 80048c0:	fa01 f202 	lsl.w	r2, r1, r2
 80048c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	2b10      	cmp	r3, #16
 80048d4:	d108      	bne.n	80048e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80048e6:	e007      	b.n	80048f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	60da      	str	r2, [r3, #12]
}
 80048f8:	bf00      	nop
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004912:	e14c      	b.n	8004bae <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	2101      	movs	r1, #1
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	fa01 f303 	lsl.w	r3, r1, r3
 8004920:	4013      	ands	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 813e 	beq.w	8004ba8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 0303 	and.w	r3, r3, #3
 8004934:	2b01      	cmp	r3, #1
 8004936:	d005      	beq.n	8004944 <HAL_GPIO_Init+0x40>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d130      	bne.n	80049a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	2203      	movs	r2, #3
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	43db      	mvns	r3, r3
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4013      	ands	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800497a:	2201      	movs	r2, #1
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	43db      	mvns	r3, r3
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	4013      	ands	r3, r2
 8004988:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	091b      	lsrs	r3, r3, #4
 8004990:	f003 0201 	and.w	r2, r3, #1
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d017      	beq.n	80049e2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	2203      	movs	r2, #3
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	43db      	mvns	r3, r3
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4013      	ands	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d123      	bne.n	8004a36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	08da      	lsrs	r2, r3, #3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3208      	adds	r2, #8
 80049f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	220f      	movs	r2, #15
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	08da      	lsrs	r2, r3, #3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3208      	adds	r2, #8
 8004a30:	6939      	ldr	r1, [r7, #16]
 8004a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	2203      	movs	r2, #3
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	43db      	mvns	r3, r3
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f003 0203 	and.w	r2, r3, #3
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 8098 	beq.w	8004ba8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004a78:	4a54      	ldr	r2, [pc, #336]	@ (8004bcc <HAL_GPIO_Init+0x2c8>)
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	089b      	lsrs	r3, r3, #2
 8004a7e:	3302      	adds	r3, #2
 8004a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f003 0303 	and.w	r3, r3, #3
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	220f      	movs	r2, #15
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	43db      	mvns	r3, r3
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004aa2:	d019      	beq.n	8004ad8 <HAL_GPIO_Init+0x1d4>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a4a      	ldr	r2, [pc, #296]	@ (8004bd0 <HAL_GPIO_Init+0x2cc>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d013      	beq.n	8004ad4 <HAL_GPIO_Init+0x1d0>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a49      	ldr	r2, [pc, #292]	@ (8004bd4 <HAL_GPIO_Init+0x2d0>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00d      	beq.n	8004ad0 <HAL_GPIO_Init+0x1cc>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a48      	ldr	r2, [pc, #288]	@ (8004bd8 <HAL_GPIO_Init+0x2d4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d007      	beq.n	8004acc <HAL_GPIO_Init+0x1c8>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a47      	ldr	r2, [pc, #284]	@ (8004bdc <HAL_GPIO_Init+0x2d8>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d101      	bne.n	8004ac8 <HAL_GPIO_Init+0x1c4>
 8004ac4:	2304      	movs	r3, #4
 8004ac6:	e008      	b.n	8004ada <HAL_GPIO_Init+0x1d6>
 8004ac8:	2307      	movs	r3, #7
 8004aca:	e006      	b.n	8004ada <HAL_GPIO_Init+0x1d6>
 8004acc:	2303      	movs	r3, #3
 8004ace:	e004      	b.n	8004ada <HAL_GPIO_Init+0x1d6>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e002      	b.n	8004ada <HAL_GPIO_Init+0x1d6>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e000      	b.n	8004ada <HAL_GPIO_Init+0x1d6>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	f002 0203 	and.w	r2, r2, #3
 8004ae0:	0092      	lsls	r2, r2, #2
 8004ae2:	4093      	lsls	r3, r2
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004aea:	4938      	ldr	r1, [pc, #224]	@ (8004bcc <HAL_GPIO_Init+0x2c8>)
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	089b      	lsrs	r3, r3, #2
 8004af0:	3302      	adds	r3, #2
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004af8:	4b39      	ldr	r3, [pc, #228]	@ (8004be0 <HAL_GPIO_Init+0x2dc>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	43db      	mvns	r3, r3
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	4013      	ands	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b1c:	4a30      	ldr	r2, [pc, #192]	@ (8004be0 <HAL_GPIO_Init+0x2dc>)
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b22:	4b2f      	ldr	r3, [pc, #188]	@ (8004be0 <HAL_GPIO_Init+0x2dc>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	43db      	mvns	r3, r3
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b46:	4a26      	ldr	r2, [pc, #152]	@ (8004be0 <HAL_GPIO_Init+0x2dc>)
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b4c:	4b24      	ldr	r3, [pc, #144]	@ (8004be0 <HAL_GPIO_Init+0x2dc>)
 8004b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	43db      	mvns	r3, r3
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b72:	4a1b      	ldr	r2, [pc, #108]	@ (8004be0 <HAL_GPIO_Init+0x2dc>)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8004b7a:	4b19      	ldr	r3, [pc, #100]	@ (8004be0 <HAL_GPIO_Init+0x2dc>)
 8004b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	43db      	mvns	r3, r3
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ba0:	4a0f      	ldr	r2, [pc, #60]	@ (8004be0 <HAL_GPIO_Init+0x2dc>)
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	3301      	adds	r3, #1
 8004bac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f47f aeab 	bne.w	8004914 <HAL_GPIO_Init+0x10>
  }
}
 8004bbe:	bf00      	nop
 8004bc0:	bf00      	nop
 8004bc2:	371c      	adds	r7, #28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	40010000 	.word	0x40010000
 8004bd0:	48000400 	.word	0x48000400
 8004bd4:	48000800 	.word	0x48000800
 8004bd8:	48000c00 	.word	0x48000c00
 8004bdc:	48001000 	.word	0x48001000
 8004be0:	58000800 	.word	0x58000800

08004be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	807b      	strh	r3, [r7, #2]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bf4:	787b      	ldrb	r3, [r7, #1]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bfa:	887a      	ldrh	r2, [r7, #2]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c00:	e002      	b.n	8004c08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c02:	887a      	ldrh	r2, [r7, #2]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c44 <HAL_HSEM_IRQHandler+0x30>)
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004c20:	4b08      	ldr	r3, [pc, #32]	@ (8004c44 <HAL_HSEM_IRQHandler+0x30>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	43db      	mvns	r3, r3
 8004c28:	4906      	ldr	r1, [pc, #24]	@ (8004c44 <HAL_HSEM_IRQHandler+0x30>)
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004c2e:	4a05      	ldr	r2, [pc, #20]	@ (8004c44 <HAL_HSEM_IRQHandler+0x30>)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f807 	bl	8004c48 <HAL_HSEM_FreeCallback>
}
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	58001500 	.word	0x58001500

08004c48 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e08d      	b.n	8004d8a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fd fe3e 	bl	8002904 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2224      	movs	r2, #36	@ 0x24
 8004c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0201 	bic.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004cac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004cbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d107      	bne.n	8004cd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cd2:	609a      	str	r2, [r3, #8]
 8004cd4:	e006      	b.n	8004ce4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004ce2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d108      	bne.n	8004cfe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cfa:	605a      	str	r2, [r3, #4]
 8004cfc:	e007      	b.n	8004d0e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6812      	ldr	r2, [r2, #0]
 8004d18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69d9      	ldr	r1, [r3, #28]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1a      	ldr	r2, [r3, #32]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
	...

08004d94 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b088      	sub	sp, #32
 8004d98:	af02      	add	r7, sp, #8
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	4608      	mov	r0, r1
 8004d9e:	4611      	mov	r1, r2
 8004da0:	461a      	mov	r2, r3
 8004da2:	4603      	mov	r3, r0
 8004da4:	817b      	strh	r3, [r7, #10]
 8004da6:	460b      	mov	r3, r1
 8004da8:	813b      	strh	r3, [r7, #8]
 8004daa:	4613      	mov	r3, r2
 8004dac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b20      	cmp	r3, #32
 8004db8:	f040 80f9 	bne.w	8004fae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <HAL_I2C_Mem_Write+0x34>
 8004dc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d105      	bne.n	8004dd4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e0ed      	b.n	8004fb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_I2C_Mem_Write+0x4e>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e0e6      	b.n	8004fb0 <HAL_I2C_Mem_Write+0x21c>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004dea:	f7fe fbad 	bl	8003548 <HAL_GetTick>
 8004dee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	2319      	movs	r3, #25
 8004df6:	2201      	movs	r2, #1
 8004df8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f955 	bl	80050ac <I2C_WaitOnFlagUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e0d1      	b.n	8004fb0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2221      	movs	r2, #33	@ 0x21
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2240      	movs	r2, #64	@ 0x40
 8004e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a3a      	ldr	r2, [r7, #32]
 8004e26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e34:	88f8      	ldrh	r0, [r7, #6]
 8004e36:	893a      	ldrh	r2, [r7, #8]
 8004e38:	8979      	ldrh	r1, [r7, #10]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	9301      	str	r3, [sp, #4]
 8004e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	4603      	mov	r3, r0
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f000 f8b9 	bl	8004fbc <I2C_RequestMemoryWrite>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d005      	beq.n	8004e5c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0a9      	b.n	8004fb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2bff      	cmp	r3, #255	@ 0xff
 8004e64:	d90e      	bls.n	8004e84 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	22ff      	movs	r2, #255	@ 0xff
 8004e6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	8979      	ldrh	r1, [r7, #10]
 8004e74:	2300      	movs	r3, #0
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 fad9 	bl	8005434 <I2C_TransferConfig>
 8004e82:	e00f      	b.n	8004ea4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	8979      	ldrh	r1, [r7, #10]
 8004e96:	2300      	movs	r3, #0
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 fac8 	bl	8005434 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 f958 	bl	800515e <I2C_WaitOnTXISFlagUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e07b      	b.n	8004fb0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ebc:	781a      	ldrb	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d034      	beq.n	8004f5c <HAL_I2C_Mem_Write+0x1c8>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d130      	bne.n	8004f5c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f00:	2200      	movs	r2, #0
 8004f02:	2180      	movs	r1, #128	@ 0x80
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 f8d1 	bl	80050ac <I2C_WaitOnFlagUntilTimeout>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e04d      	b.n	8004fb0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2bff      	cmp	r3, #255	@ 0xff
 8004f1c:	d90e      	bls.n	8004f3c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	22ff      	movs	r2, #255	@ 0xff
 8004f22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	8979      	ldrh	r1, [r7, #10]
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 fa7d 	bl	8005434 <I2C_TransferConfig>
 8004f3a:	e00f      	b.n	8004f5c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	8979      	ldrh	r1, [r7, #10]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 fa6c 	bl	8005434 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d19e      	bne.n	8004ea4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f000 f93e 	bl	80051ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e01a      	b.n	8004fb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6859      	ldr	r1, [r3, #4]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb8 <HAL_I2C_Mem_Write+0x224>)
 8004f8e:	400b      	ands	r3, r1
 8004f90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2220      	movs	r2, #32
 8004f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	e000      	b.n	8004fb0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004fae:	2302      	movs	r3, #2
  }
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3718      	adds	r7, #24
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	fe00e800 	.word	0xfe00e800

08004fbc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af02      	add	r7, sp, #8
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	4608      	mov	r0, r1
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4603      	mov	r3, r0
 8004fcc:	817b      	strh	r3, [r7, #10]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	813b      	strh	r3, [r7, #8]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004fd6:	88fb      	ldrh	r3, [r7, #6]
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	8979      	ldrh	r1, [r7, #10]
 8004fdc:	4b20      	ldr	r3, [pc, #128]	@ (8005060 <I2C_RequestMemoryWrite+0xa4>)
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 fa25 	bl	8005434 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fea:	69fa      	ldr	r2, [r7, #28]
 8004fec:	69b9      	ldr	r1, [r7, #24]
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 f8b5 	bl	800515e <I2C_WaitOnTXISFlagUntilTimeout>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e02c      	b.n	8005058 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ffe:	88fb      	ldrh	r3, [r7, #6]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d105      	bne.n	8005010 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005004:	893b      	ldrh	r3, [r7, #8]
 8005006:	b2da      	uxtb	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	629a      	str	r2, [r3, #40]	@ 0x28
 800500e:	e015      	b.n	800503c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005010:	893b      	ldrh	r3, [r7, #8]
 8005012:	0a1b      	lsrs	r3, r3, #8
 8005014:	b29b      	uxth	r3, r3
 8005016:	b2da      	uxtb	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800501e:	69fa      	ldr	r2, [r7, #28]
 8005020:	69b9      	ldr	r1, [r7, #24]
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 f89b 	bl	800515e <I2C_WaitOnTXISFlagUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e012      	b.n	8005058 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005032:	893b      	ldrh	r3, [r7, #8]
 8005034:	b2da      	uxtb	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	2200      	movs	r2, #0
 8005044:	2180      	movs	r1, #128	@ 0x80
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 f830 	bl	80050ac <I2C_WaitOnFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	80002000 	.word	0x80002000

08005064 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b02      	cmp	r3, #2
 8005078:	d103      	bne.n	8005082 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2200      	movs	r2, #0
 8005080:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b01      	cmp	r3, #1
 800508e:	d007      	beq.n	80050a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699a      	ldr	r2, [r3, #24]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	619a      	str	r2, [r3, #24]
  }
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	603b      	str	r3, [r7, #0]
 80050b8:	4613      	mov	r3, r2
 80050ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050bc:	e03b      	b.n	8005136 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	6839      	ldr	r1, [r7, #0]
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 f8d6 	bl	8005274 <I2C_IsErrorOccurred>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e041      	b.n	8005156 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d8:	d02d      	beq.n	8005136 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050da:	f7fe fa35 	bl	8003548 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d302      	bcc.n	80050f0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d122      	bne.n	8005136 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699a      	ldr	r2, [r3, #24]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	4013      	ands	r3, r2
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	bf0c      	ite	eq
 8005100:	2301      	moveq	r3, #1
 8005102:	2300      	movne	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	461a      	mov	r2, r3
 8005108:	79fb      	ldrb	r3, [r7, #7]
 800510a:	429a      	cmp	r2, r3
 800510c:	d113      	bne.n	8005136 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005112:	f043 0220 	orr.w	r2, r3, #32
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e00f      	b.n	8005156 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	699a      	ldr	r2, [r3, #24]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4013      	ands	r3, r2
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	429a      	cmp	r2, r3
 8005144:	bf0c      	ite	eq
 8005146:	2301      	moveq	r3, #1
 8005148:	2300      	movne	r3, #0
 800514a:	b2db      	uxtb	r3, r3
 800514c:	461a      	mov	r2, r3
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	429a      	cmp	r2, r3
 8005152:	d0b4      	beq.n	80050be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b084      	sub	sp, #16
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800516a:	e033      	b.n	80051d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	68b9      	ldr	r1, [r7, #8]
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 f87f 	bl	8005274 <I2C_IsErrorOccurred>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e031      	b.n	80051e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005186:	d025      	beq.n	80051d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005188:	f7fe f9de 	bl	8003548 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	429a      	cmp	r2, r3
 8005196:	d302      	bcc.n	800519e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d11a      	bne.n	80051d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d013      	beq.n	80051d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b0:	f043 0220 	orr.w	r2, r3, #32
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e007      	b.n	80051e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d1c4      	bne.n	800516c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051f8:	e02f      	b.n	800525a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	68b9      	ldr	r1, [r7, #8]
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 f838 	bl	8005274 <I2C_IsErrorOccurred>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e02d      	b.n	800526a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800520e:	f7fe f99b 	bl	8003548 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	429a      	cmp	r2, r3
 800521c:	d302      	bcc.n	8005224 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d11a      	bne.n	800525a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b20      	cmp	r3, #32
 8005230:	d013      	beq.n	800525a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005236:	f043 0220 	orr.w	r2, r3, #32
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2220      	movs	r2, #32
 8005242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e007      	b.n	800526a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	f003 0320 	and.w	r3, r3, #32
 8005264:	2b20      	cmp	r3, #32
 8005266:	d1c8      	bne.n	80051fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08a      	sub	sp, #40	@ 0x28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005280:	2300      	movs	r3, #0
 8005282:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800528e:	2300      	movs	r3, #0
 8005290:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	f003 0310 	and.w	r3, r3, #16
 800529c:	2b00      	cmp	r3, #0
 800529e:	d068      	beq.n	8005372 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2210      	movs	r2, #16
 80052a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80052a8:	e049      	b.n	800533e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b0:	d045      	beq.n	800533e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80052b2:	f7fe f949 	bl	8003548 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d302      	bcc.n	80052c8 <I2C_IsErrorOccurred+0x54>
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d13a      	bne.n	800533e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052ea:	d121      	bne.n	8005330 <I2C_IsErrorOccurred+0xbc>
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052f2:	d01d      	beq.n	8005330 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80052f4:	7cfb      	ldrb	r3, [r7, #19]
 80052f6:	2b20      	cmp	r3, #32
 80052f8:	d01a      	beq.n	8005330 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005308:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800530a:	f7fe f91d 	bl	8003548 <HAL_GetTick>
 800530e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005310:	e00e      	b.n	8005330 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005312:	f7fe f919 	bl	8003548 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b19      	cmp	r3, #25
 800531e:	d907      	bls.n	8005330 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	f043 0320 	orr.w	r3, r3, #32
 8005326:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800532e:	e006      	b.n	800533e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	f003 0320 	and.w	r3, r3, #32
 800533a:	2b20      	cmp	r3, #32
 800533c:	d1e9      	bne.n	8005312 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b20      	cmp	r3, #32
 800534a:	d003      	beq.n	8005354 <I2C_IsErrorOccurred+0xe0>
 800534c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0aa      	beq.n	80052aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005354:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005358:	2b00      	cmp	r3, #0
 800535a:	d103      	bne.n	8005364 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2220      	movs	r2, #32
 8005362:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	f043 0304 	orr.w	r3, r3, #4
 800536a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00b      	beq.n	800539c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	f043 0301 	orr.w	r3, r3, #1
 800538a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005394:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00b      	beq.n	80053be <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	f043 0308 	orr.w	r3, r3, #8
 80053ac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80053b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00b      	beq.n	80053e0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	f043 0302 	orr.w	r3, r3, #2
 80053ce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80053e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d01c      	beq.n	8005422 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f7ff fe3b 	bl	8005064 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6859      	ldr	r1, [r3, #4]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005430 <I2C_IsErrorOccurred+0x1bc>)
 80053fa:	400b      	ands	r3, r1
 80053fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	431a      	orrs	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005422:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005426:	4618      	mov	r0, r3
 8005428:	3728      	adds	r7, #40	@ 0x28
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	fe00e800 	.word	0xfe00e800

08005434 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	607b      	str	r3, [r7, #4]
 800543e:	460b      	mov	r3, r1
 8005440:	817b      	strh	r3, [r7, #10]
 8005442:	4613      	mov	r3, r2
 8005444:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005446:	897b      	ldrh	r3, [r7, #10]
 8005448:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800544c:	7a7b      	ldrb	r3, [r7, #9]
 800544e:	041b      	lsls	r3, r3, #16
 8005450:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005454:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	4313      	orrs	r3, r2
 800545e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005462:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	0d5b      	lsrs	r3, r3, #21
 800546e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005472:	4b08      	ldr	r3, [pc, #32]	@ (8005494 <I2C_TransferConfig+0x60>)
 8005474:	430b      	orrs	r3, r1
 8005476:	43db      	mvns	r3, r3
 8005478:	ea02 0103 	and.w	r1, r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	430a      	orrs	r2, r1
 8005484:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005486:	bf00      	nop
 8005488:	371c      	adds	r7, #28
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	03ff63ff 	.word	0x03ff63ff

08005498 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b20      	cmp	r3, #32
 80054ac:	d138      	bne.n	8005520 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e032      	b.n	8005522 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2224      	movs	r2, #36	@ 0x24
 80054c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0201 	bic.w	r2, r2, #1
 80054da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80054ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6819      	ldr	r1, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0201 	orr.w	r2, r2, #1
 800550a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800551c:	2300      	movs	r3, #0
 800551e:	e000      	b.n	8005522 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005520:	2302      	movs	r3, #2
  }
}
 8005522:	4618      	mov	r0, r3
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800552e:	b480      	push	{r7}
 8005530:	b085      	sub	sp, #20
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b20      	cmp	r3, #32
 8005542:	d139      	bne.n	80055b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800554a:	2b01      	cmp	r3, #1
 800554c:	d101      	bne.n	8005552 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800554e:	2302      	movs	r3, #2
 8005550:	e033      	b.n	80055ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2224      	movs	r2, #36	@ 0x24
 800555e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0201 	bic.w	r2, r2, #1
 8005570:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005580:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	021b      	lsls	r3, r3, #8
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4313      	orrs	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0201 	orr.w	r2, r2, #1
 80055a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2220      	movs	r2, #32
 80055a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	e000      	b.n	80055ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80055b8:	2302      	movs	r3, #2
  }
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
	...

080055c8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80055d0:	4b05      	ldr	r3, [pc, #20]	@ (80055e8 <HAL_I2CEx_EnableFastModePlus+0x20>)
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	4904      	ldr	r1, [pc, #16]	@ (80055e8 <HAL_I2CEx_EnableFastModePlus+0x20>)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4313      	orrs	r3, r2
 80055da:	604b      	str	r3, [r1, #4]
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	40010000 	.word	0x40010000

080055ec <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80055f4:	2300      	movs	r3, #0
 80055f6:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d01e      	beq.n	800563c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80055fe:	4b13      	ldr	r3, [pc, #76]	@ (800564c <HAL_IPCC_Init+0x60>)
 8005600:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d102      	bne.n	8005614 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7fd f9d4 	bl	80029bc <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005614:	68b8      	ldr	r0, [r7, #8]
 8005616:	f000 f85b 	bl	80056d0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f82c 	bl	8005684 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800563a:	e001      	b.n	8005640 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005640:	7bfb      	ldrb	r3, [r7, #15]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	58000c00 	.word	0x58000c00

08005650 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	4613      	mov	r3, r2
 800565c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800565e:	bf00      	nop
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800566a:	b480      	push	{r7}
 800566c:	b085      	sub	sp, #20
 800566e:	af00      	add	r7, sp, #0
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	4613      	mov	r3, r2
 8005676:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005678:	bf00      	nop
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800568c:	2300      	movs	r3, #0
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	e00f      	b.n	80056b2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	4a0b      	ldr	r2, [pc, #44]	@ (80056c8 <IPCC_SetDefaultCallbacks+0x44>)
 800569c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	3306      	adds	r3, #6
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	4a08      	ldr	r2, [pc, #32]	@ (80056cc <IPCC_SetDefaultCallbacks+0x48>)
 80056aa:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	3301      	adds	r3, #1
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b05      	cmp	r3, #5
 80056b6:	d9ec      	bls.n	8005692 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80056b8:	bf00      	nop
 80056ba:	bf00      	nop
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	08005651 	.word	0x08005651
 80056cc:	0800566b 	.word	0x0800566b

080056d0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 80056e4:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	223f      	movs	r2, #63	@ 0x3f
 80056ea:	609a      	str	r2, [r3, #8]
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056fc:	4b05      	ldr	r3, [pc, #20]	@ (8005714 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a04      	ldr	r2, [pc, #16]	@ (8005714 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005702:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005706:	6013      	str	r3, [r2, #0]
}
 8005708:	bf00      	nop
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	58000400 	.word	0x58000400

08005718 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800571c:	4b04      	ldr	r3, [pc, #16]	@ (8005730 <HAL_PWREx_GetVoltageRange+0x18>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8005724:	4618      	mov	r0, r3
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	58000400 	.word	0x58000400

08005734 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005738:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005742:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005746:	d101      	bne.n	800574c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005748:	2301      	movs	r3, #1
 800574a:	e000      	b.n	800574e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <LL_RCC_HSE_Enable>:
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800575c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800576a:	6013      	str	r3, [r2, #0]
}
 800576c:	bf00      	nop
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <LL_RCC_HSE_Disable>:
{
 8005776:	b480      	push	{r7}
 8005778:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800577a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005784:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005788:	6013      	str	r3, [r2, #0]
}
 800578a:	bf00      	nop
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <LL_RCC_HSE_IsReady>:
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057a6:	d101      	bne.n	80057ac <LL_RCC_HSE_IsReady+0x18>
 80057a8:	2301      	movs	r3, #1
 80057aa:	e000      	b.n	80057ae <LL_RCC_HSE_IsReady+0x1a>
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <LL_RCC_HSI_Enable>:
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80057bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057ca:	6013      	str	r3, [r2, #0]
}
 80057cc:	bf00      	nop
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <LL_RCC_HSI_Disable>:
{
 80057d6:	b480      	push	{r7}
 80057d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80057da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057e8:	6013      	str	r3, [r2, #0]
}
 80057ea:	bf00      	nop
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <LL_RCC_HSI_IsReady>:
{
 80057f4:	b480      	push	{r7}
 80057f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80057f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005802:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005806:	d101      	bne.n	800580c <LL_RCC_HSI_IsReady+0x18>
 8005808:	2301      	movs	r3, #1
 800580a:	e000      	b.n	800580e <LL_RCC_HSI_IsReady+0x1a>
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	061b      	lsls	r3, r3, #24
 800582e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005832:	4313      	orrs	r3, r2
 8005834:	604b      	str	r3, [r1, #4]
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <LL_RCC_HSI48_Enable>:
{
 8005842:	b480      	push	{r7}
 8005844:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800584a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800584e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005852:	f043 0301 	orr.w	r3, r3, #1
 8005856:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800585a:	bf00      	nop
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <LL_RCC_HSI48_Disable>:
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800586c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005870:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005874:	f023 0301 	bic.w	r3, r3, #1
 8005878:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800587c:	bf00      	nop
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <LL_RCC_HSI48_IsReady>:
{
 8005886:	b480      	push	{r7}
 8005888:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800588a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800588e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b02      	cmp	r3, #2
 8005898:	d101      	bne.n	800589e <LL_RCC_HSI48_IsReady+0x18>
 800589a:	2301      	movs	r3, #1
 800589c:	e000      	b.n	80058a0 <LL_RCC_HSI48_IsReady+0x1a>
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <LL_RCC_LSE_Enable>:
{
 80058aa:	b480      	push	{r7}
 80058ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80058ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058ba:	f043 0301 	orr.w	r3, r3, #1
 80058be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80058c2:	bf00      	nop
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <LL_RCC_LSE_Disable>:
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80058d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058dc:	f023 0301 	bic.w	r3, r3, #1
 80058e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80058e4:	bf00      	nop
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <LL_RCC_LSE_EnableBypass>:
{
 80058ee:	b480      	push	{r7}
 80058f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80058f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058fe:	f043 0304 	orr.w	r3, r3, #4
 8005902:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005906:	bf00      	nop
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <LL_RCC_LSE_DisableBypass>:
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800591c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005920:	f023 0304 	bic.w	r3, r3, #4
 8005924:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005928:	bf00      	nop
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <LL_RCC_LSE_IsReady>:
{
 8005932:	b480      	push	{r7}
 8005934:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005936:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800593a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b02      	cmp	r3, #2
 8005944:	d101      	bne.n	800594a <LL_RCC_LSE_IsReady+0x18>
 8005946:	2301      	movs	r3, #1
 8005948:	e000      	b.n	800594c <LL_RCC_LSE_IsReady+0x1a>
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <LL_RCC_LSI1_Enable>:
{
 8005956:	b480      	push	{r7}
 8005958:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800595a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800595e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005962:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005966:	f043 0301 	orr.w	r3, r3, #1
 800596a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800596e:	bf00      	nop
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <LL_RCC_LSI1_Disable>:
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800597c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005980:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005984:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005988:	f023 0301 	bic.w	r3, r3, #1
 800598c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005990:	bf00      	nop
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <LL_RCC_LSI1_IsReady>:
{
 800599a:	b480      	push	{r7}
 800599c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800599e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d101      	bne.n	80059b2 <LL_RCC_LSI1_IsReady+0x18>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <LL_RCC_LSI1_IsReady+0x1a>
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <LL_RCC_LSI2_Enable>:
{
 80059be:	b480      	push	{r7}
 80059c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80059c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059ce:	f043 0304 	orr.w	r3, r3, #4
 80059d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80059d6:	bf00      	nop
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <LL_RCC_LSI2_Disable>:
{
 80059e0:	b480      	push	{r7}
 80059e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80059e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059f0:	f023 0304 	bic.w	r3, r3, #4
 80059f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80059f8:	bf00      	nop
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <LL_RCC_LSI2_IsReady>:
{
 8005a02:	b480      	push	{r7}
 8005a04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005a06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a0e:	f003 0308 	and.w	r3, r3, #8
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d101      	bne.n	8005a1a <LL_RCC_LSI2_IsReady+0x18>
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <LL_RCC_LSI2_IsReady+0x1a>
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <LL_RCC_LSI2_SetTrimming>:
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a36:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	021b      	lsls	r3, r3, #8
 8005a3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <LL_RCC_MSI_Enable>:
{
 8005a54:	b480      	push	{r7}
 8005a56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a62:	f043 0301 	orr.w	r3, r3, #1
 8005a66:	6013      	str	r3, [r2, #0]
}
 8005a68:	bf00      	nop
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <LL_RCC_MSI_Disable>:
{
 8005a72:	b480      	push	{r7}
 8005a74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005a76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a80:	f023 0301 	bic.w	r3, r3, #1
 8005a84:	6013      	str	r3, [r2, #0]
}
 8005a86:	bf00      	nop
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <LL_RCC_MSI_IsReady>:
{
 8005a90:	b480      	push	{r7}
 8005a92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005a94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d101      	bne.n	8005aa6 <LL_RCC_MSI_IsReady+0x16>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <LL_RCC_MSI_IsReady+0x18>
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <LL_RCC_MSI_SetRange>:
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005aba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ac4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	600b      	str	r3, [r1, #0]
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <LL_RCC_MSI_GetRange>:
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005ae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005aea:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2bb0      	cmp	r3, #176	@ 0xb0
 8005af0:	d901      	bls.n	8005af6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005af2:	23b0      	movs	r3, #176	@ 0xb0
 8005af4:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005af6:	687b      	ldr	r3, [r7, #4]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005b0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	021b      	lsls	r3, r3, #8
 8005b1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	604b      	str	r3, [r1, #4]
}
 8005b22:	bf00      	nop
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <LL_RCC_SetSysClkSource>:
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005b36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f023 0203 	bic.w	r2, r3, #3
 8005b40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	608b      	str	r3, [r1, #8]
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <LL_RCC_GetSysClkSource>:
{
 8005b56:	b480      	push	{r7}
 8005b58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005b5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f003 030c 	and.w	r3, r3, #12
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <LL_RCC_SetAHBPrescaler>:
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005b76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	608b      	str	r3, [r1, #8]
}
 8005b8a:	bf00      	nop
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ba2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005ba6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005baa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <LL_RCC_SetAHB4Prescaler>:
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005bca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bce:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005bd2:	f023 020f 	bic.w	r2, r3, #15
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	091b      	lsrs	r3, r3, #4
 8005bda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005bde:	4313      	orrs	r3, r2
 8005be0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <LL_RCC_SetAPB1Prescaler>:
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005bf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	608b      	str	r3, [r1, #8]
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <LL_RCC_SetAPB2Prescaler>:
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005c20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	608b      	str	r3, [r1, #8]
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <LL_RCC_GetAHBPrescaler>:
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <LL_RCC_GetAHB4Prescaler>:
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005c5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c60:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <LL_RCC_GetAPB1Prescaler>:
{
 8005c74:	b480      	push	{r7}
 8005c76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <LL_RCC_GetAPB2Prescaler>:
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005c90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cb6:	6013      	str	r3, [r2, #0]
}
 8005cb8:	bf00      	nop
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005cc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cd0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cd4:	6013      	str	r3, [r2, #0]
}
 8005cd6:	bf00      	nop
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005ce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cf2:	d101      	bne.n	8005cf8 <LL_RCC_PLL_IsReady+0x18>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e000      	b.n	8005cfa <LL_RCC_PLL_IsReady+0x1a>
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	0a1b      	lsrs	r3, r3, #8
 8005d10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005d22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005d36:	b480      	push	{r7}
 8005d38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005d3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005d52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0303 	and.w	r3, r3, #3
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005d66:	b480      	push	{r7}
 8005d68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d78:	d101      	bne.n	8005d7e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e000      	b.n	8005d80 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005d8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d92:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d9e:	d101      	bne.n	8005da4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005da0:	2301      	movs	r3, #1
 8005da2:	e000      	b.n	8005da6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005db4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005db8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005dbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dc4:	d101      	bne.n	8005dca <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e000      	b.n	8005dcc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005dda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005de4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005de8:	d101      	bne.n	8005dee <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005dfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e0c:	d101      	bne.n	8005e12 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
	...

08005e20 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e20:	b590      	push	{r4, r7, lr}
 8005e22:	b08d      	sub	sp, #52	@ 0x34
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e363      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0320 	and.w	r3, r3, #32
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 808d 	beq.w	8005f5a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e40:	f7ff fe89 	bl	8005b56 <LL_RCC_GetSysClkSource>
 8005e44:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e46:	f7ff ff82 	bl	8005d4e <LL_RCC_PLL_GetMainSource>
 8005e4a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d005      	beq.n	8005e5e <HAL_RCC_OscConfig+0x3e>
 8005e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e54:	2b0c      	cmp	r3, #12
 8005e56:	d147      	bne.n	8005ee8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d144      	bne.n	8005ee8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e347      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005e6e:	f7ff fe34 	bl	8005ada <LL_RCC_MSI_GetRange>
 8005e72:	4603      	mov	r3, r0
 8005e74:	429c      	cmp	r4, r3
 8005e76:	d914      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fd2f 	bl	80068e0 <RCC_SetFlashLatencyFromMSIRange>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e336      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff fe0e 	bl	8005ab2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7ff fe32 	bl	8005b04 <LL_RCC_MSI_SetCalibTrimming>
 8005ea0:	e013      	b.n	8005eca <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff fe03 	bl	8005ab2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7ff fe27 	bl	8005b04 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 fd10 	bl	80068e0 <RCC_SetFlashLatencyFromMSIRange>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e317      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005eca:	f000 fcc9 	bl	8006860 <HAL_RCC_GetHCLKFreq>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	4aa4      	ldr	r2, [pc, #656]	@ (8006164 <HAL_RCC_OscConfig+0x344>)
 8005ed2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005ed4:	4ba4      	ldr	r3, [pc, #656]	@ (8006168 <HAL_RCC_OscConfig+0x348>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fd fae7 	bl	80034ac <HAL_InitTick>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d039      	beq.n	8005f58 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e308      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01e      	beq.n	8005f2e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005ef0:	f7ff fdb0 	bl	8005a54 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ef4:	f7fd fb28 	bl	8003548 <HAL_GetTick>
 8005ef8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005efc:	f7fd fb24 	bl	8003548 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e2f5      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005f0e:	f7ff fdbf 	bl	8005a90 <LL_RCC_MSI_IsReady>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d0f1      	beq.n	8005efc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7ff fdc8 	bl	8005ab2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7ff fdec 	bl	8005b04 <LL_RCC_MSI_SetCalibTrimming>
 8005f2c:	e015      	b.n	8005f5a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005f2e:	f7ff fda0 	bl	8005a72 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f32:	f7fd fb09 	bl	8003548 <HAL_GetTick>
 8005f36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005f38:	e008      	b.n	8005f4c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f3a:	f7fd fb05 	bl	8003548 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e2d6      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005f4c:	f7ff fda0 	bl	8005a90 <LL_RCC_MSI_IsReady>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1f1      	bne.n	8005f3a <HAL_RCC_OscConfig+0x11a>
 8005f56:	e000      	b.n	8005f5a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005f58:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d047      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f66:	f7ff fdf6 	bl	8005b56 <LL_RCC_GetSysClkSource>
 8005f6a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f6c:	f7ff feef 	bl	8005d4e <LL_RCC_PLL_GetMainSource>
 8005f70:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	d005      	beq.n	8005f84 <HAL_RCC_OscConfig+0x164>
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	2b0c      	cmp	r3, #12
 8005f7c:	d108      	bne.n	8005f90 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	2b03      	cmp	r3, #3
 8005f82:	d105      	bne.n	8005f90 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d134      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e2b4      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f98:	d102      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x180>
 8005f9a:	f7ff fbdd 	bl	8005758 <LL_RCC_HSE_Enable>
 8005f9e:	e001      	b.n	8005fa4 <HAL_RCC_OscConfig+0x184>
 8005fa0:	f7ff fbe9 	bl	8005776 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d012      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fac:	f7fd facc 	bl	8003548 <HAL_GetTick>
 8005fb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fb4:	f7fd fac8 	bl	8003548 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b64      	cmp	r3, #100	@ 0x64
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e299      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005fc6:	f7ff fbe5 	bl	8005794 <LL_RCC_HSE_IsReady>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d0f1      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x194>
 8005fd0:	e011      	b.n	8005ff6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd2:	f7fd fab9 	bl	8003548 <HAL_GetTick>
 8005fd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005fd8:	e008      	b.n	8005fec <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fda:	f7fd fab5 	bl	8003548 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b64      	cmp	r3, #100	@ 0x64
 8005fe6:	d901      	bls.n	8005fec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e286      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005fec:	f7ff fbd2 	bl	8005794 <LL_RCC_HSE_IsReady>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1f1      	bne.n	8005fda <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d04c      	beq.n	800609c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006002:	f7ff fda8 	bl	8005b56 <LL_RCC_GetSysClkSource>
 8006006:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006008:	f7ff fea1 	bl	8005d4e <LL_RCC_PLL_GetMainSource>
 800600c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	2b04      	cmp	r3, #4
 8006012:	d005      	beq.n	8006020 <HAL_RCC_OscConfig+0x200>
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	2b0c      	cmp	r3, #12
 8006018:	d10e      	bne.n	8006038 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2b02      	cmp	r3, #2
 800601e:	d10b      	bne.n	8006038 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e266      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	4618      	mov	r0, r3
 8006032:	f7ff fbf1 	bl	8005818 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006036:	e031      	b.n	800609c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d019      	beq.n	8006074 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006040:	f7ff fbba 	bl	80057b8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006044:	f7fd fa80 	bl	8003548 <HAL_GetTick>
 8006048:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800604a:	e008      	b.n	800605e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800604c:	f7fd fa7c 	bl	8003548 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e24d      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800605e:	f7ff fbc9 	bl	80057f4 <LL_RCC_HSI_IsReady>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d0f1      	beq.n	800604c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff fbd3 	bl	8005818 <LL_RCC_HSI_SetCalibTrimming>
 8006072:	e013      	b.n	800609c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006074:	f7ff fbaf 	bl	80057d6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006078:	f7fd fa66 	bl	8003548 <HAL_GetTick>
 800607c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800607e:	e008      	b.n	8006092 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006080:	f7fd fa62 	bl	8003548 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e233      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006092:	f7ff fbaf 	bl	80057f4 <LL_RCC_HSI_IsReady>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1f1      	bne.n	8006080 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0308 	and.w	r3, r3, #8
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d106      	bne.n	80060b6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 80a3 	beq.w	80061fc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d076      	beq.n	80061ac <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0310 	and.w	r3, r3, #16
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d046      	beq.n	8006158 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80060ca:	f7ff fc66 	bl	800599a <LL_RCC_LSI1_IsReady>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d113      	bne.n	80060fc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80060d4:	f7ff fc3f 	bl	8005956 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060d8:	f7fd fa36 	bl	8003548 <HAL_GetTick>
 80060dc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80060de:	e008      	b.n	80060f2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80060e0:	f7fd fa32 	bl	8003548 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e203      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80060f2:	f7ff fc52 	bl	800599a <LL_RCC_LSI1_IsReady>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0f1      	beq.n	80060e0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80060fc:	f7ff fc5f 	bl	80059be <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006100:	f7fd fa22 	bl	8003548 <HAL_GetTick>
 8006104:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006106:	e008      	b.n	800611a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006108:	f7fd fa1e 	bl	8003548 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b03      	cmp	r3, #3
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e1ef      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800611a:	f7ff fc72 	bl	8005a02 <LL_RCC_LSI2_IsReady>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d0f1      	beq.n	8006108 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff fc7c 	bl	8005a26 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800612e:	f7ff fc23 	bl	8005978 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006132:	f7fd fa09 	bl	8003548 <HAL_GetTick>
 8006136:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006138:	e008      	b.n	800614c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800613a:	f7fd fa05 	bl	8003548 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	2b02      	cmp	r3, #2
 8006146:	d901      	bls.n	800614c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e1d6      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800614c:	f7ff fc25 	bl	800599a <LL_RCC_LSI1_IsReady>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1f1      	bne.n	800613a <HAL_RCC_OscConfig+0x31a>
 8006156:	e051      	b.n	80061fc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006158:	f7ff fbfd 	bl	8005956 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615c:	f7fd f9f4 	bl	8003548 <HAL_GetTick>
 8006160:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006162:	e00c      	b.n	800617e <HAL_RCC_OscConfig+0x35e>
 8006164:	20000008 	.word	0x20000008
 8006168:	2000040c 	.word	0x2000040c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800616c:	f7fd f9ec 	bl	8003548 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d901      	bls.n	800617e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e1bd      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800617e:	f7ff fc0c 	bl	800599a <LL_RCC_LSI1_IsReady>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0f1      	beq.n	800616c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006188:	f7ff fc2a 	bl	80059e0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800618c:	e008      	b.n	80061a0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800618e:	f7fd f9db 	bl	8003548 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	2b03      	cmp	r3, #3
 800619a:	d901      	bls.n	80061a0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e1ac      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80061a0:	f7ff fc2f 	bl	8005a02 <LL_RCC_LSI2_IsReady>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1f1      	bne.n	800618e <HAL_RCC_OscConfig+0x36e>
 80061aa:	e027      	b.n	80061fc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80061ac:	f7ff fc18 	bl	80059e0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061b0:	f7fd f9ca 	bl	8003548 <HAL_GetTick>
 80061b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80061b6:	e008      	b.n	80061ca <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80061b8:	f7fd f9c6 	bl	8003548 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e197      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80061ca:	f7ff fc1a 	bl	8005a02 <LL_RCC_LSI2_IsReady>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1f1      	bne.n	80061b8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80061d4:	f7ff fbd0 	bl	8005978 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d8:	f7fd f9b6 	bl	8003548 <HAL_GetTick>
 80061dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80061de:	e008      	b.n	80061f2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80061e0:	f7fd f9b2 	bl	8003548 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d901      	bls.n	80061f2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e183      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80061f2:	f7ff fbd2 	bl	800599a <LL_RCC_LSI1_IsReady>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1f1      	bne.n	80061e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d05b      	beq.n	80062c0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006208:	4ba7      	ldr	r3, [pc, #668]	@ (80064a8 <HAL_RCC_OscConfig+0x688>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006210:	2b00      	cmp	r3, #0
 8006212:	d114      	bne.n	800623e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006214:	f7ff fa70 	bl	80056f8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006218:	f7fd f996 	bl	8003548 <HAL_GetTick>
 800621c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800621e:	e008      	b.n	8006232 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006220:	f7fd f992 	bl	8003548 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d901      	bls.n	8006232 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e163      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006232:	4b9d      	ldr	r3, [pc, #628]	@ (80064a8 <HAL_RCC_OscConfig+0x688>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800623a:	2b00      	cmp	r3, #0
 800623c:	d0f0      	beq.n	8006220 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d102      	bne.n	800624c <HAL_RCC_OscConfig+0x42c>
 8006246:	f7ff fb30 	bl	80058aa <LL_RCC_LSE_Enable>
 800624a:	e00c      	b.n	8006266 <HAL_RCC_OscConfig+0x446>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	2b05      	cmp	r3, #5
 8006252:	d104      	bne.n	800625e <HAL_RCC_OscConfig+0x43e>
 8006254:	f7ff fb4b 	bl	80058ee <LL_RCC_LSE_EnableBypass>
 8006258:	f7ff fb27 	bl	80058aa <LL_RCC_LSE_Enable>
 800625c:	e003      	b.n	8006266 <HAL_RCC_OscConfig+0x446>
 800625e:	f7ff fb35 	bl	80058cc <LL_RCC_LSE_Disable>
 8006262:	f7ff fb55 	bl	8005910 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d014      	beq.n	8006298 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800626e:	f7fd f96b 	bl	8003548 <HAL_GetTick>
 8006272:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006274:	e00a      	b.n	800628c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006276:	f7fd f967 	bl	8003548 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006284:	4293      	cmp	r3, r2
 8006286:	d901      	bls.n	800628c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e136      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800628c:	f7ff fb51 	bl	8005932 <LL_RCC_LSE_IsReady>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0ef      	beq.n	8006276 <HAL_RCC_OscConfig+0x456>
 8006296:	e013      	b.n	80062c0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006298:	f7fd f956 	bl	8003548 <HAL_GetTick>
 800629c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800629e:	e00a      	b.n	80062b6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062a0:	f7fd f952 	bl	8003548 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e121      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80062b6:	f7ff fb3c 	bl	8005932 <LL_RCC_LSE_IsReady>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1ef      	bne.n	80062a0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d02c      	beq.n	8006326 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d014      	beq.n	80062fe <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062d4:	f7ff fab5 	bl	8005842 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d8:	f7fd f936 	bl	8003548 <HAL_GetTick>
 80062dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80062de:	e008      	b.n	80062f2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062e0:	f7fd f932 	bl	8003548 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d901      	bls.n	80062f2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e103      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80062f2:	f7ff fac8 	bl	8005886 <LL_RCC_HSI48_IsReady>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d0f1      	beq.n	80062e0 <HAL_RCC_OscConfig+0x4c0>
 80062fc:	e013      	b.n	8006326 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80062fe:	f7ff fab1 	bl	8005864 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006302:	f7fd f921 	bl	8003548 <HAL_GetTick>
 8006306:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006308:	e008      	b.n	800631c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800630a:	f7fd f91d 	bl	8003548 <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	2b02      	cmp	r3, #2
 8006316:	d901      	bls.n	800631c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e0ee      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800631c:	f7ff fab3 	bl	8005886 <LL_RCC_HSI48_IsReady>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1f1      	bne.n	800630a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 80e4 	beq.w	80064f8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006330:	f7ff fc11 	bl	8005b56 <LL_RCC_GetSysClkSource>
 8006334:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006342:	2b02      	cmp	r3, #2
 8006344:	f040 80b4 	bne.w	80064b0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f003 0203 	and.w	r2, r3, #3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006352:	429a      	cmp	r2, r3
 8006354:	d123      	bne.n	800639e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006360:	429a      	cmp	r2, r3
 8006362:	d11c      	bne.n	800639e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	0a1b      	lsrs	r3, r3, #8
 8006368:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006370:	429a      	cmp	r2, r3
 8006372:	d114      	bne.n	800639e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800637e:	429a      	cmp	r2, r3
 8006380:	d10d      	bne.n	800639e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800638c:	429a      	cmp	r2, r3
 800638e:	d106      	bne.n	800639e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800639a:	429a      	cmp	r2, r3
 800639c:	d05d      	beq.n	800645a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	2b0c      	cmp	r3, #12
 80063a2:	d058      	beq.n	8006456 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80063a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e0a1      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80063b6:	f7ff fc84 	bl	8005cc2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80063ba:	f7fd f8c5 	bl	8003548 <HAL_GetTick>
 80063be:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063c0:	e008      	b.n	80063d4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063c2:	f7fd f8c1 	bl	8003548 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d901      	bls.n	80063d4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e092      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1ef      	bne.n	80063c2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063e6:	68da      	ldr	r2, [r3, #12]
 80063e8:	4b30      	ldr	r3, [pc, #192]	@ (80064ac <HAL_RCC_OscConfig+0x68c>)
 80063ea:	4013      	ands	r3, r2
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80063f4:	4311      	orrs	r1, r2
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80063fa:	0212      	lsls	r2, r2, #8
 80063fc:	4311      	orrs	r1, r2
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006402:	4311      	orrs	r1, r2
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006408:	4311      	orrs	r1, r2
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800640e:	430a      	orrs	r2, r1
 8006410:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006414:	4313      	orrs	r3, r2
 8006416:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006418:	f7ff fc44 	bl	8005ca4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800641c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800642a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800642c:	f7fd f88c 	bl	8003548 <HAL_GetTick>
 8006430:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006432:	e008      	b.n	8006446 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006434:	f7fd f888 	bl	8003548 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b02      	cmp	r3, #2
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e059      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006446:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0ef      	beq.n	8006434 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006454:	e050      	b.n	80064f8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e04f      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800645a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d147      	bne.n	80064f8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006468:	f7ff fc1c 	bl	8005ca4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800646c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800647a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800647c:	f7fd f864 	bl	8003548 <HAL_GetTick>
 8006480:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006482:	e008      	b.n	8006496 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006484:	f7fd f860 	bl	8003548 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e031      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0ef      	beq.n	8006484 <HAL_RCC_OscConfig+0x664>
 80064a4:	e028      	b.n	80064f8 <HAL_RCC_OscConfig+0x6d8>
 80064a6:	bf00      	nop
 80064a8:	58000400 	.word	0x58000400
 80064ac:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	2b0c      	cmp	r3, #12
 80064b4:	d01e      	beq.n	80064f4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064b6:	f7ff fc04 	bl	8005cc2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ba:	f7fd f845 	bl	8003548 <HAL_GetTick>
 80064be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064c0:	e008      	b.n	80064d4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064c2:	f7fd f841 	bl	8003548 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d901      	bls.n	80064d4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e012      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1ef      	bne.n	80064c2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80064e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064e6:	68da      	ldr	r2, [r3, #12]
 80064e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064ec:	4b05      	ldr	r3, [pc, #20]	@ (8006504 <HAL_RCC_OscConfig+0x6e4>)
 80064ee:	4013      	ands	r3, r2
 80064f0:	60cb      	str	r3, [r1, #12]
 80064f2:	e001      	b.n	80064f8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e000      	b.n	80064fa <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3734      	adds	r7, #52	@ 0x34
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd90      	pop	{r4, r7, pc}
 8006502:	bf00      	nop
 8006504:	eefefffc 	.word	0xeefefffc

08006508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e12d      	b.n	8006778 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800651c:	4b98      	ldr	r3, [pc, #608]	@ (8006780 <HAL_RCC_ClockConfig+0x278>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0307 	and.w	r3, r3, #7
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	429a      	cmp	r2, r3
 8006528:	d91b      	bls.n	8006562 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800652a:	4b95      	ldr	r3, [pc, #596]	@ (8006780 <HAL_RCC_ClockConfig+0x278>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f023 0207 	bic.w	r2, r3, #7
 8006532:	4993      	ldr	r1, [pc, #588]	@ (8006780 <HAL_RCC_ClockConfig+0x278>)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	4313      	orrs	r3, r2
 8006538:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800653a:	f7fd f805 	bl	8003548 <HAL_GetTick>
 800653e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006540:	e008      	b.n	8006554 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006542:	f7fd f801 	bl	8003548 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b02      	cmp	r3, #2
 800654e:	d901      	bls.n	8006554 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e111      	b.n	8006778 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006554:	4b8a      	ldr	r3, [pc, #552]	@ (8006780 <HAL_RCC_ClockConfig+0x278>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0307 	and.w	r3, r3, #7
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	d1ef      	bne.n	8006542 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d016      	beq.n	800659c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	4618      	mov	r0, r3
 8006574:	f7ff fafb 	bl	8005b6e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006578:	f7fc ffe6 	bl	8003548 <HAL_GetTick>
 800657c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800657e:	e008      	b.n	8006592 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006580:	f7fc ffe2 	bl	8003548 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e0f2      	b.n	8006778 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006592:	f7ff fbe8 	bl	8005d66 <LL_RCC_IsActiveFlag_HPRE>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0f1      	beq.n	8006580 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0320 	and.w	r3, r3, #32
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d016      	beq.n	80065d6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7ff faf2 	bl	8005b96 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80065b2:	f7fc ffc9 	bl	8003548 <HAL_GetTick>
 80065b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80065b8:	e008      	b.n	80065cc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80065ba:	f7fc ffc5 	bl	8003548 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d901      	bls.n	80065cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e0d5      	b.n	8006778 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80065cc:	f7ff fbdd 	bl	8005d8a <LL_RCC_IsActiveFlag_C2HPRE>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d0f1      	beq.n	80065ba <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d016      	beq.n	8006610 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7ff faeb 	bl	8005bc2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80065ec:	f7fc ffac 	bl	8003548 <HAL_GetTick>
 80065f0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80065f2:	e008      	b.n	8006606 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80065f4:	f7fc ffa8 	bl	8003548 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d901      	bls.n	8006606 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e0b8      	b.n	8006778 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006606:	f7ff fbd3 	bl	8005db0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0f1      	beq.n	80065f4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0304 	and.w	r3, r3, #4
 8006618:	2b00      	cmp	r3, #0
 800661a:	d016      	beq.n	800664a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	4618      	mov	r0, r3
 8006622:	f7ff fae5 	bl	8005bf0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006626:	f7fc ff8f 	bl	8003548 <HAL_GetTick>
 800662a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800662c:	e008      	b.n	8006640 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800662e:	f7fc ff8b 	bl	8003548 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d901      	bls.n	8006640 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e09b      	b.n	8006778 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006640:	f7ff fbc9 	bl	8005dd6 <LL_RCC_IsActiveFlag_PPRE1>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0f1      	beq.n	800662e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	2b00      	cmp	r3, #0
 8006654:	d017      	beq.n	8006686 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	00db      	lsls	r3, r3, #3
 800665c:	4618      	mov	r0, r3
 800665e:	f7ff fadb 	bl	8005c18 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006662:	f7fc ff71 	bl	8003548 <HAL_GetTick>
 8006666:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006668:	e008      	b.n	800667c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800666a:	f7fc ff6d 	bl	8003548 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d901      	bls.n	800667c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e07d      	b.n	8006778 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800667c:	f7ff fbbd 	bl	8005dfa <LL_RCC_IsActiveFlag_PPRE2>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0f1      	beq.n	800666a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d043      	beq.n	800671a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	2b02      	cmp	r3, #2
 8006698:	d106      	bne.n	80066a8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800669a:	f7ff f87b 	bl	8005794 <LL_RCC_HSE_IsReady>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d11e      	bne.n	80066e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e067      	b.n	8006778 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d106      	bne.n	80066be <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80066b0:	f7ff fb16 	bl	8005ce0 <LL_RCC_PLL_IsReady>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d113      	bne.n	80066e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e05c      	b.n	8006778 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d106      	bne.n	80066d4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80066c6:	f7ff f9e3 	bl	8005a90 <LL_RCC_MSI_IsReady>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d108      	bne.n	80066e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e051      	b.n	8006778 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80066d4:	f7ff f88e 	bl	80057f4 <LL_RCC_HSI_IsReady>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e04a      	b.n	8006778 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff fa21 	bl	8005b2e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066ec:	f7fc ff2c 	bl	8003548 <HAL_GetTick>
 80066f0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066f2:	e00a      	b.n	800670a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066f4:	f7fc ff28 	bl	8003548 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006702:	4293      	cmp	r3, r2
 8006704:	d901      	bls.n	800670a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e036      	b.n	8006778 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800670a:	f7ff fa24 	bl	8005b56 <LL_RCC_GetSysClkSource>
 800670e:	4602      	mov	r2, r0
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	429a      	cmp	r2, r3
 8006718:	d1ec      	bne.n	80066f4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800671a:	4b19      	ldr	r3, [pc, #100]	@ (8006780 <HAL_RCC_ClockConfig+0x278>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0307 	and.w	r3, r3, #7
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d21b      	bcs.n	8006760 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006728:	4b15      	ldr	r3, [pc, #84]	@ (8006780 <HAL_RCC_ClockConfig+0x278>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f023 0207 	bic.w	r2, r3, #7
 8006730:	4913      	ldr	r1, [pc, #76]	@ (8006780 <HAL_RCC_ClockConfig+0x278>)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	4313      	orrs	r3, r2
 8006736:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006738:	f7fc ff06 	bl	8003548 <HAL_GetTick>
 800673c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800673e:	e008      	b.n	8006752 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006740:	f7fc ff02 	bl	8003548 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b02      	cmp	r3, #2
 800674c:	d901      	bls.n	8006752 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e012      	b.n	8006778 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006752:	4b0b      	ldr	r3, [pc, #44]	@ (8006780 <HAL_RCC_ClockConfig+0x278>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	429a      	cmp	r2, r3
 800675e:	d1ef      	bne.n	8006740 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006760:	f000 f87e 	bl	8006860 <HAL_RCC_GetHCLKFreq>
 8006764:	4603      	mov	r3, r0
 8006766:	4a07      	ldr	r2, [pc, #28]	@ (8006784 <HAL_RCC_ClockConfig+0x27c>)
 8006768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800676a:	f7fc fef9 	bl	8003560 <HAL_GetTickPrio>
 800676e:	4603      	mov	r3, r0
 8006770:	4618      	mov	r0, r3
 8006772:	f7fc fe9b 	bl	80034ac <HAL_InitTick>
 8006776:	4603      	mov	r3, r0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	58004000 	.word	0x58004000
 8006784:	20000008 	.word	0x20000008

08006788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006788:	b590      	push	{r4, r7, lr}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800678e:	f7ff f9e2 	bl	8005b56 <LL_RCC_GetSysClkSource>
 8006792:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10a      	bne.n	80067b0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800679a:	f7ff f99e 	bl	8005ada <LL_RCC_MSI_GetRange>
 800679e:	4603      	mov	r3, r0
 80067a0:	091b      	lsrs	r3, r3, #4
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	4a2b      	ldr	r2, [pc, #172]	@ (8006854 <HAL_RCC_GetSysClockFreq+0xcc>)
 80067a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ac:	60fb      	str	r3, [r7, #12]
 80067ae:	e04b      	b.n	8006848 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b04      	cmp	r3, #4
 80067b4:	d102      	bne.n	80067bc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80067b6:	4b28      	ldr	r3, [pc, #160]	@ (8006858 <HAL_RCC_GetSysClockFreq+0xd0>)
 80067b8:	60fb      	str	r3, [r7, #12]
 80067ba:	e045      	b.n	8006848 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b08      	cmp	r3, #8
 80067c0:	d10a      	bne.n	80067d8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80067c2:	f7fe ffb7 	bl	8005734 <LL_RCC_HSE_IsEnabledDiv2>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d102      	bne.n	80067d2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80067cc:	4b22      	ldr	r3, [pc, #136]	@ (8006858 <HAL_RCC_GetSysClockFreq+0xd0>)
 80067ce:	60fb      	str	r3, [r7, #12]
 80067d0:	e03a      	b.n	8006848 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80067d2:	4b22      	ldr	r3, [pc, #136]	@ (800685c <HAL_RCC_GetSysClockFreq+0xd4>)
 80067d4:	60fb      	str	r3, [r7, #12]
 80067d6:	e037      	b.n	8006848 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80067d8:	f7ff fab9 	bl	8005d4e <LL_RCC_PLL_GetMainSource>
 80067dc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d003      	beq.n	80067ec <HAL_RCC_GetSysClockFreq+0x64>
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d003      	beq.n	80067f2 <HAL_RCC_GetSysClockFreq+0x6a>
 80067ea:	e00d      	b.n	8006808 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80067ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006858 <HAL_RCC_GetSysClockFreq+0xd0>)
 80067ee:	60bb      	str	r3, [r7, #8]
        break;
 80067f0:	e015      	b.n	800681e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80067f2:	f7fe ff9f 	bl	8005734 <LL_RCC_HSE_IsEnabledDiv2>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d102      	bne.n	8006802 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80067fc:	4b16      	ldr	r3, [pc, #88]	@ (8006858 <HAL_RCC_GetSysClockFreq+0xd0>)
 80067fe:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006800:	e00d      	b.n	800681e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006802:	4b16      	ldr	r3, [pc, #88]	@ (800685c <HAL_RCC_GetSysClockFreq+0xd4>)
 8006804:	60bb      	str	r3, [r7, #8]
        break;
 8006806:	e00a      	b.n	800681e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006808:	f7ff f967 	bl	8005ada <LL_RCC_MSI_GetRange>
 800680c:	4603      	mov	r3, r0
 800680e:	091b      	lsrs	r3, r3, #4
 8006810:	f003 030f 	and.w	r3, r3, #15
 8006814:	4a0f      	ldr	r2, [pc, #60]	@ (8006854 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800681a:	60bb      	str	r3, [r7, #8]
        break;
 800681c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800681e:	f7ff fa71 	bl	8005d04 <LL_RCC_PLL_GetN>
 8006822:	4602      	mov	r2, r0
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	fb03 f402 	mul.w	r4, r3, r2
 800682a:	f7ff fa84 	bl	8005d36 <LL_RCC_PLL_GetDivider>
 800682e:	4603      	mov	r3, r0
 8006830:	091b      	lsrs	r3, r3, #4
 8006832:	3301      	adds	r3, #1
 8006834:	fbb4 f4f3 	udiv	r4, r4, r3
 8006838:	f7ff fa71 	bl	8005d1e <LL_RCC_PLL_GetR>
 800683c:	4603      	mov	r3, r0
 800683e:	0f5b      	lsrs	r3, r3, #29
 8006840:	3301      	adds	r3, #1
 8006842:	fbb4 f3f3 	udiv	r3, r4, r3
 8006846:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006848:	68fb      	ldr	r3, [r7, #12]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	bd90      	pop	{r4, r7, pc}
 8006852:	bf00      	nop
 8006854:	0800f6bc 	.word	0x0800f6bc
 8006858:	00f42400 	.word	0x00f42400
 800685c:	01e84800 	.word	0x01e84800

08006860 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006860:	b598      	push	{r3, r4, r7, lr}
 8006862:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006864:	f7ff ff90 	bl	8006788 <HAL_RCC_GetSysClockFreq>
 8006868:	4604      	mov	r4, r0
 800686a:	f7ff f9e9 	bl	8005c40 <LL_RCC_GetAHBPrescaler>
 800686e:	4603      	mov	r3, r0
 8006870:	091b      	lsrs	r3, r3, #4
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	4a03      	ldr	r2, [pc, #12]	@ (8006884 <HAL_RCC_GetHCLKFreq+0x24>)
 8006878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800687c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006880:	4618      	mov	r0, r3
 8006882:	bd98      	pop	{r3, r4, r7, pc}
 8006884:	0800f65c 	.word	0x0800f65c

08006888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006888:	b598      	push	{r3, r4, r7, lr}
 800688a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800688c:	f7ff ffe8 	bl	8006860 <HAL_RCC_GetHCLKFreq>
 8006890:	4604      	mov	r4, r0
 8006892:	f7ff f9ef 	bl	8005c74 <LL_RCC_GetAPB1Prescaler>
 8006896:	4603      	mov	r3, r0
 8006898:	0a1b      	lsrs	r3, r3, #8
 800689a:	f003 0307 	and.w	r3, r3, #7
 800689e:	4a04      	ldr	r2, [pc, #16]	@ (80068b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80068a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068a4:	f003 031f 	and.w	r3, r3, #31
 80068a8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	bd98      	pop	{r3, r4, r7, pc}
 80068b0:	0800f69c 	.word	0x0800f69c

080068b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068b4:	b598      	push	{r3, r4, r7, lr}
 80068b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80068b8:	f7ff ffd2 	bl	8006860 <HAL_RCC_GetHCLKFreq>
 80068bc:	4604      	mov	r4, r0
 80068be:	f7ff f9e5 	bl	8005c8c <LL_RCC_GetAPB2Prescaler>
 80068c2:	4603      	mov	r3, r0
 80068c4:	0adb      	lsrs	r3, r3, #11
 80068c6:	f003 0307 	and.w	r3, r3, #7
 80068ca:	4a04      	ldr	r2, [pc, #16]	@ (80068dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80068cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068d0:	f003 031f 	and.w	r3, r3, #31
 80068d4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80068d8:	4618      	mov	r0, r3
 80068da:	bd98      	pop	{r3, r4, r7, pc}
 80068dc:	0800f69c 	.word	0x0800f69c

080068e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80068e0:	b590      	push	{r4, r7, lr}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2bb0      	cmp	r3, #176	@ 0xb0
 80068ec:	d903      	bls.n	80068f6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80068ee:	4b15      	ldr	r3, [pc, #84]	@ (8006944 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80068f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f2:	60fb      	str	r3, [r7, #12]
 80068f4:	e007      	b.n	8006906 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	091b      	lsrs	r3, r3, #4
 80068fa:	f003 030f 	and.w	r3, r3, #15
 80068fe:	4a11      	ldr	r2, [pc, #68]	@ (8006944 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006904:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006906:	f7ff f9a7 	bl	8005c58 <LL_RCC_GetAHB4Prescaler>
 800690a:	4603      	mov	r3, r0
 800690c:	091b      	lsrs	r3, r3, #4
 800690e:	f003 030f 	and.w	r3, r3, #15
 8006912:	4a0d      	ldr	r2, [pc, #52]	@ (8006948 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	fbb2 f3f3 	udiv	r3, r2, r3
 800691e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	4a0a      	ldr	r2, [pc, #40]	@ (800694c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006924:	fba2 2303 	umull	r2, r3, r2, r3
 8006928:	0c9c      	lsrs	r4, r3, #18
 800692a:	f7fe fef5 	bl	8005718 <HAL_PWREx_GetVoltageRange>
 800692e:	4603      	mov	r3, r0
 8006930:	4619      	mov	r1, r3
 8006932:	4620      	mov	r0, r4
 8006934:	f000 f80c 	bl	8006950 <RCC_SetFlashLatency>
 8006938:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	bd90      	pop	{r4, r7, pc}
 8006942:	bf00      	nop
 8006944:	0800f6bc 	.word	0x0800f6bc
 8006948:	0800f65c 	.word	0x0800f65c
 800694c:	431bde83 	.word	0x431bde83

08006950 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006950:	b590      	push	{r4, r7, lr}
 8006952:	b093      	sub	sp, #76	@ 0x4c
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800695a:	4b37      	ldr	r3, [pc, #220]	@ (8006a38 <RCC_SetFlashLatency+0xe8>)
 800695c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8006960:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006962:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006966:	4a35      	ldr	r2, [pc, #212]	@ (8006a3c <RCC_SetFlashLatency+0xec>)
 8006968:	f107 031c 	add.w	r3, r7, #28
 800696c:	ca07      	ldmia	r2, {r0, r1, r2}
 800696e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006972:	4b33      	ldr	r3, [pc, #204]	@ (8006a40 <RCC_SetFlashLatency+0xf0>)
 8006974:	f107 040c 	add.w	r4, r7, #12
 8006978:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800697a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800697e:	2300      	movs	r3, #0
 8006980:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006988:	d11a      	bne.n	80069c0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800698a:	2300      	movs	r3, #0
 800698c:	643b      	str	r3, [r7, #64]	@ 0x40
 800698e:	e013      	b.n	80069b8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006990:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	3348      	adds	r3, #72	@ 0x48
 8006996:	443b      	add	r3, r7
 8006998:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d807      	bhi.n	80069b2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80069a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	3348      	adds	r3, #72	@ 0x48
 80069a8:	443b      	add	r3, r7
 80069aa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80069ae:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80069b0:	e020      	b.n	80069f4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80069b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069b4:	3301      	adds	r3, #1
 80069b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80069b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069ba:	2b03      	cmp	r3, #3
 80069bc:	d9e8      	bls.n	8006990 <RCC_SetFlashLatency+0x40>
 80069be:	e019      	b.n	80069f4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80069c0:	2300      	movs	r3, #0
 80069c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069c4:	e013      	b.n	80069ee <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80069c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	3348      	adds	r3, #72	@ 0x48
 80069cc:	443b      	add	r3, r7
 80069ce:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d807      	bhi.n	80069e8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80069d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	3348      	adds	r3, #72	@ 0x48
 80069de:	443b      	add	r3, r7
 80069e0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80069e4:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80069e6:	e005      	b.n	80069f4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80069e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069ea:	3301      	adds	r3, #1
 80069ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d9e8      	bls.n	80069c6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80069f4:	4b13      	ldr	r3, [pc, #76]	@ (8006a44 <RCC_SetFlashLatency+0xf4>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f023 0207 	bic.w	r2, r3, #7
 80069fc:	4911      	ldr	r1, [pc, #68]	@ (8006a44 <RCC_SetFlashLatency+0xf4>)
 80069fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a00:	4313      	orrs	r3, r2
 8006a02:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006a04:	f7fc fda0 	bl	8003548 <HAL_GetTick>
 8006a08:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006a0a:	e008      	b.n	8006a1e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006a0c:	f7fc fd9c 	bl	8003548 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d901      	bls.n	8006a1e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e007      	b.n	8006a2e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006a1e:	4b09      	ldr	r3, [pc, #36]	@ (8006a44 <RCC_SetFlashLatency+0xf4>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0307 	and.w	r3, r3, #7
 8006a26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d1ef      	bne.n	8006a0c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	374c      	adds	r7, #76	@ 0x4c
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd90      	pop	{r4, r7, pc}
 8006a36:	bf00      	nop
 8006a38:	0800e424 	.word	0x0800e424
 8006a3c:	0800e434 	.word	0x0800e434
 8006a40:	0800e440 	.word	0x0800e440
 8006a44:	58004000 	.word	0x58004000

08006a48 <LL_RCC_LSE_IsEnabled>:
{
 8006a48:	b480      	push	{r7}
 8006a4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006a4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d101      	bne.n	8006a60 <LL_RCC_LSE_IsEnabled+0x18>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e000      	b.n	8006a62 <LL_RCC_LSE_IsEnabled+0x1a>
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <LL_RCC_LSE_IsReady>:
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006a70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d101      	bne.n	8006a84 <LL_RCC_LSE_IsReady+0x18>
 8006a80:	2301      	movs	r3, #1
 8006a82:	e000      	b.n	8006a86 <LL_RCC_LSE_IsReady+0x1a>
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <LL_RCC_SetRFWKPClockSource>:
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006aa0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006aa4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <LL_RCC_SetSMPSClockSource>:
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006ac4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aca:	f023 0203 	bic.w	r2, r3, #3
 8006ace:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <LL_RCC_SetSMPSPrescaler>:
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006aec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006af6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <LL_RCC_SetUSARTClockSource>:
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006b14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b1c:	f023 0203 	bic.w	r2, r3, #3
 8006b20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <LL_RCC_SetLPUARTClockSource>:
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006b40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b48:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006b4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <LL_RCC_SetI2CClockSource>:
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b70:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	091b      	lsrs	r3, r3, #4
 8006b78:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006b7c:	43db      	mvns	r3, r3
 8006b7e:	401a      	ands	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	011b      	lsls	r3, r3, #4
 8006b84:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006b88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006b92:	bf00      	nop
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <LL_RCC_SetLPTIMClockSource>:
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006ba6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006baa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	0c1b      	lsrs	r3, r3, #16
 8006bb2:	041b      	lsls	r3, r3, #16
 8006bb4:	43db      	mvns	r3, r3
 8006bb6:	401a      	ands	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	041b      	lsls	r3, r3, #16
 8006bbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006bc6:	bf00      	nop
 8006bc8:	370c      	adds	r7, #12
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <LL_RCC_SetSAIClockSource>:
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b083      	sub	sp, #12
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006bda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006be2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006be6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006bf2:	bf00      	nop
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <LL_RCC_SetRNGClockSource>:
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006c06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c0e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006c12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006c1e:	bf00      	nop
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <LL_RCC_SetCLK48ClockSource>:
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006c32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006c4a:	bf00      	nop
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <LL_RCC_SetUSBClockSource>:
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b082      	sub	sp, #8
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7ff ffe3 	bl	8006c2a <LL_RCC_SetCLK48ClockSource>
}
 8006c64:	bf00      	nop
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <LL_RCC_SetADCClockSource>:
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c7c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006c80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <LL_RCC_SetRTCClockSource>:
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ca8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006cac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <LL_RCC_GetRTCClockSource>:
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <LL_RCC_ForceBackupDomainReset>:
{
 8006cde:	b480      	push	{r7}
 8006ce0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006ce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006cf6:	bf00      	nop
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006d00:	b480      	push	{r7}
 8006d02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006d04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006d18:	bf00      	nop
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <LL_RCC_PLLSAI1_Enable>:
{
 8006d22:	b480      	push	{r7}
 8006d24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006d26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006d34:	6013      	str	r3, [r2, #0]
}
 8006d36:	bf00      	nop
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <LL_RCC_PLLSAI1_Disable>:
{
 8006d40:	b480      	push	{r7}
 8006d42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006d44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d52:	6013      	str	r3, [r2, #0]
}
 8006d54:	bf00      	nop
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <LL_RCC_PLLSAI1_IsReady>:
{
 8006d5e:	b480      	push	{r7}
 8006d60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d70:	d101      	bne.n	8006d76 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006d72:	2301      	movs	r3, #1
 8006d74:	e000      	b.n	8006d78 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b088      	sub	sp, #32
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006d8e:	2300      	movs	r3, #0
 8006d90:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d034      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006da6:	d021      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006da8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006dac:	d81b      	bhi.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006dae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006db2:	d01d      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006db4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006db8:	d815      	bhi.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00b      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006dbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006dc2:	d110      	bne.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006dc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006dce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dd2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006dd4:	e00d      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	3304      	adds	r3, #4
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 f947 	bl	800706e <RCCEx_PLLSAI1_ConfigNP>
 8006de0:	4603      	mov	r3, r0
 8006de2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006de4:	e005      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	77fb      	strb	r3, [r7, #31]
        break;
 8006dea:	e002      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006dec:	bf00      	nop
 8006dee:	e000      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006df0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006df2:	7ffb      	ldrb	r3, [r7, #31]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d105      	bne.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7ff fee8 	bl	8006bd2 <LL_RCC_SetSAIClockSource>
 8006e02:	e001      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e04:	7ffb      	ldrb	r3, [r7, #31]
 8006e06:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d046      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006e14:	f7ff ff56 	bl	8006cc4 <LL_RCC_GetRTCClockSource>
 8006e18:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d03c      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006e24:	f7fe fc68 	bl	80056f8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d105      	bne.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7ff ff30 	bl	8006c98 <LL_RCC_SetRTCClockSource>
 8006e38:	e02e      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e42:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006e44:	f7ff ff4b 	bl	8006cde <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006e48:	f7ff ff5a 	bl	8006d00 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e56:	4313      	orrs	r3, r2
 8006e58:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006e5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006e64:	f7ff fdf0 	bl	8006a48 <LL_RCC_LSE_IsEnabled>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d114      	bne.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006e6e:	f7fc fb6b 	bl	8003548 <HAL_GetTick>
 8006e72:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006e74:	e00b      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e76:	f7fc fb67 	bl	8003548 <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d902      	bls.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	77fb      	strb	r3, [r7, #31]
              break;
 8006e8c:	e004      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006e8e:	f7ff fded 	bl	8006a6c <LL_RCC_LSE_IsReady>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d1ee      	bne.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006e98:	7ffb      	ldrb	r3, [r7, #31]
 8006e9a:	77bb      	strb	r3, [r7, #30]
 8006e9c:	e001      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e9e:	7ffb      	ldrb	r3, [r7, #31]
 8006ea0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d004      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7ff fe2a 	bl	8006b0c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0302 	and.w	r3, r3, #2
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d004      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7ff fe35 	bl	8006b38 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0310 	and.w	r3, r3, #16
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d004      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7ff fe5d 	bl	8006b9e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0320 	and.w	r3, r3, #32
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d004      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7ff fe52 	bl	8006b9e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0304 	and.w	r3, r3, #4
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d004      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7ff fe2a 	bl	8006b64 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0308 	and.w	r3, r3, #8
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d004      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7ff fe1f 	bl	8006b64 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d022      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7ff fe8d 	bl	8006c56 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f44:	d107      	bne.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006f46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f54:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f5e:	d10b      	bne.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	3304      	adds	r3, #4
 8006f64:	4618      	mov	r0, r3
 8006f66:	f000 f8dd 	bl	8007124 <RCCEx_PLLSAI1_ConfigNQ>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006f6e:	7ffb      	ldrb	r3, [r7, #31]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d001      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006f74:	7ffb      	ldrb	r3, [r7, #31]
 8006f76:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d02b      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f8c:	d008      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f96:	d003      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d105      	bne.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7ff fe2a 	bl	8006bfe <LL_RCC_SetRNGClockSource>
 8006faa:	e00a      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fb4:	60fb      	str	r3, [r7, #12]
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	f7ff fe21 	bl	8006bfe <LL_RCC_SetRNGClockSource>
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f7ff fe34 	bl	8006c2a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006fca:	d107      	bne.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006fcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006fda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d022      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7ff fe3d 	bl	8006c6c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ff6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ffa:	d107      	bne.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007006:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800700a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007010:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007014:	d10b      	bne.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	3304      	adds	r3, #4
 800701a:	4618      	mov	r0, r3
 800701c:	f000 f8dd 	bl	80071da <RCCEx_PLLSAI1_ConfigNR>
 8007020:	4603      	mov	r3, r0
 8007022:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007024:	7ffb      	ldrb	r3, [r7, #31]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d001      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800702a:	7ffb      	ldrb	r3, [r7, #31]
 800702c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d004      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800703e:	4618      	mov	r0, r3
 8007040:	f7ff fd26 	bl	8006a90 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d009      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007054:	4618      	mov	r0, r3
 8007056:	f7ff fd45 	bl	8006ae4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800705e:	4618      	mov	r0, r3
 8007060:	f7ff fd2c 	bl	8006abc <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007064:	7fbb      	ldrb	r3, [r7, #30]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3720      	adds	r7, #32
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b084      	sub	sp, #16
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800707a:	f7ff fe61 	bl	8006d40 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800707e:	f7fc fa63 	bl	8003548 <HAL_GetTick>
 8007082:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007084:	e009      	b.n	800709a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007086:	f7fc fa5f 	bl	8003548 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	2b02      	cmp	r3, #2
 8007092:	d902      	bls.n	800709a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	73fb      	strb	r3, [r7, #15]
      break;
 8007098:	e004      	b.n	80070a4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800709a:	f7ff fe60 	bl	8006d5e <LL_RCC_PLLSAI1_IsReady>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1f0      	bne.n	8007086 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d137      	bne.n	800711a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80070aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	021b      	lsls	r3, r3, #8
 80070ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80070be:	4313      	orrs	r3, r2
 80070c0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80070c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80070d4:	4313      	orrs	r3, r2
 80070d6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80070d8:	f7ff fe23 	bl	8006d22 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070dc:	f7fc fa34 	bl	8003548 <HAL_GetTick>
 80070e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80070e2:	e009      	b.n	80070f8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80070e4:	f7fc fa30 	bl	8003548 <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d902      	bls.n	80070f8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	73fb      	strb	r3, [r7, #15]
        break;
 80070f6:	e004      	b.n	8007102 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80070f8:	f7ff fe31 	bl	8006d5e <LL_RCC_PLLSAI1_IsReady>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d1f0      	bne.n	80070e4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007102:	7bfb      	ldrb	r3, [r7, #15]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d108      	bne.n	800711a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007108:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800710c:	691a      	ldr	r2, [r3, #16]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007116:	4313      	orrs	r3, r2
 8007118:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800711a:	7bfb      	ldrb	r3, [r7, #15]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007130:	f7ff fe06 	bl	8006d40 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007134:	f7fc fa08 	bl	8003548 <HAL_GetTick>
 8007138:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800713a:	e009      	b.n	8007150 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800713c:	f7fc fa04 	bl	8003548 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b02      	cmp	r3, #2
 8007148:	d902      	bls.n	8007150 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	73fb      	strb	r3, [r7, #15]
      break;
 800714e:	e004      	b.n	800715a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007150:	f7ff fe05 	bl	8006d5e <LL_RCC_PLLSAI1_IsReady>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1f0      	bne.n	800713c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800715a:	7bfb      	ldrb	r3, [r7, #15]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d137      	bne.n	80071d0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	021b      	lsls	r3, r3, #8
 8007170:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007174:	4313      	orrs	r3, r2
 8007176:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800718a:	4313      	orrs	r3, r2
 800718c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800718e:	f7ff fdc8 	bl	8006d22 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007192:	f7fc f9d9 	bl	8003548 <HAL_GetTick>
 8007196:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007198:	e009      	b.n	80071ae <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800719a:	f7fc f9d5 	bl	8003548 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d902      	bls.n	80071ae <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	73fb      	strb	r3, [r7, #15]
        break;
 80071ac:	e004      	b.n	80071b8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80071ae:	f7ff fdd6 	bl	8006d5e <LL_RCC_PLLSAI1_IsReady>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d1f0      	bne.n	800719a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d108      	bne.n	80071d0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80071be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071c2:	691a      	ldr	r2, [r3, #16]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80071cc:	4313      	orrs	r3, r2
 80071ce:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80071e6:	f7ff fdab 	bl	8006d40 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071ea:	f7fc f9ad 	bl	8003548 <HAL_GetTick>
 80071ee:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80071f0:	e009      	b.n	8007206 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80071f2:	f7fc f9a9 	bl	8003548 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d902      	bls.n	8007206 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	73fb      	strb	r3, [r7, #15]
      break;
 8007204:	e004      	b.n	8007210 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007206:	f7ff fdaa 	bl	8006d5e <LL_RCC_PLLSAI1_IsReady>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1f0      	bne.n	80071f2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007210:	7bfb      	ldrb	r3, [r7, #15]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d137      	bne.n	8007286 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	021b      	lsls	r3, r3, #8
 8007226:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800722a:	4313      	orrs	r3, r2
 800722c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800722e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007240:	4313      	orrs	r3, r2
 8007242:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007244:	f7ff fd6d 	bl	8006d22 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007248:	f7fc f97e 	bl	8003548 <HAL_GetTick>
 800724c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800724e:	e009      	b.n	8007264 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007250:	f7fc f97a 	bl	8003548 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b02      	cmp	r3, #2
 800725c:	d902      	bls.n	8007264 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	73fb      	strb	r3, [r7, #15]
        break;
 8007262:	e004      	b.n	800726e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007264:	f7ff fd7b 	bl	8006d5e <LL_RCC_PLLSAI1_IsReady>
 8007268:	4603      	mov	r3, r0
 800726a:	2b01      	cmp	r3, #1
 800726c:	d1f0      	bne.n	8007250 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800726e:	7bfb      	ldrb	r3, [r7, #15]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d108      	bne.n	8007286 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007278:	691a      	ldr	r2, [r3, #16]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007282:	4313      	orrs	r3, r2
 8007284:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007286:	7bfb      	ldrb	r3, [r7, #15]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e07a      	b.n	8007398 <HAL_RTC_Init+0x108>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d106      	bne.n	80072bc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7fb fba4 	bl	8002a04 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2202      	movs	r2, #2
 80072c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	f003 0310 	and.w	r3, r3, #16
 80072ce:	2b10      	cmp	r3, #16
 80072d0:	d058      	beq.n	8007384 <HAL_RTC_Init+0xf4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	22ca      	movs	r2, #202	@ 0xca
 80072d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2253      	movs	r2, #83	@ 0x53
 80072e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f882 	bl	80073ec <RTC_EnterInitMode>
 80072e8:	4603      	mov	r3, r0
 80072ea:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d12c      	bne.n	800734c <HAL_RTC_Init+0xbc>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	6812      	ldr	r2, [r2, #0]
 80072fc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007300:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007304:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6899      	ldr	r1, [r3, #8]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	431a      	orrs	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	431a      	orrs	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	68d2      	ldr	r2, [r2, #12]
 800732c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6919      	ldr	r1, [r3, #16]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	041a      	lsls	r2, r3, #16
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f88a 	bl	800745c <RTC_ExitInitMode>
 8007348:	4603      	mov	r3, r0
 800734a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800734c:	7bfb      	ldrb	r3, [r7, #15]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d113      	bne.n	800737a <HAL_RTC_Init+0xea>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f022 0203 	bic.w	r2, r2, #3
 8007360:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	69da      	ldr	r2, [r3, #28]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	431a      	orrs	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	22ff      	movs	r2, #255	@ 0xff
 8007380:	625a      	str	r2, [r3, #36]	@ 0x24
 8007382:	e001      	b.n	8007388 <HAL_RTC_Init+0xf8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007384:	2300      	movs	r3, #0
 8007386:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d103      	bne.n	8007396 <HAL_RTC_Init+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8007396:	7bfb      	ldrb	r3, [r7, #15]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a0d      	ldr	r2, [pc, #52]	@ (80073e8 <HAL_RTC_WaitForSynchro+0x48>)
 80073b2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073b4:	f7fc f8c8 	bl	8003548 <HAL_GetTick>
 80073b8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80073ba:	e009      	b.n	80073d0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80073bc:	f7fc f8c4 	bl	8003548 <HAL_GetTick>
 80073c0:	4602      	mov	r2, r0
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80073ca:	d901      	bls.n	80073d0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e007      	b.n	80073e0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	f003 0320 	and.w	r3, r3, #32
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d0ee      	beq.n	80073bc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	0001ff5f 	.word	0x0001ff5f

080073ec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007406:	2b00      	cmp	r3, #0
 8007408:	d123      	bne.n	8007452 <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68da      	ldr	r2, [r3, #12]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007418:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800741a:	f7fc f895 	bl	8003548 <HAL_GetTick>
 800741e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007420:	e00d      	b.n	800743e <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007422:	f7fc f891 	bl	8003548 <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007430:	d905      	bls.n	800743e <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2204      	movs	r2, #4
 8007436:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007448:	2b00      	cmp	r3, #0
 800744a:	d102      	bne.n	8007452 <RTC_EnterInitMode+0x66>
 800744c:	7bfb      	ldrb	r3, [r7, #15]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d1e7      	bne.n	8007422 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007452:	7bfb      	ldrb	r3, [r7, #15]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007464:	2300      	movs	r3, #0
 8007466:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68da      	ldr	r2, [r3, #12]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007476:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f003 0320 	and.w	r3, r3, #32
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10b      	bne.n	800749e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7ff ff8a 	bl	80073a0 <HAL_RTC_WaitForSynchro>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d005      	beq.n	800749e <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2204      	movs	r2, #4
 8007496:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800749e:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80074b4:	4b5f      	ldr	r3, [pc, #380]	@ (8007634 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a5f      	ldr	r2, [pc, #380]	@ (8007638 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 80074ba:	fba2 2303 	umull	r2, r3, r2, r3
 80074be:	0adb      	lsrs	r3, r3, #11
 80074c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80074c4:	fb02 f303 	mul.w	r3, r2, r3
 80074c8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d101      	bne.n	80074d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
 80074d4:	2302      	movs	r3, #2
 80074d6:	e0a7      	b.n	8007628 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2202      	movs	r2, #2
 80074e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	22ca      	movs	r2, #202	@ 0xca
 80074ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2253      	movs	r2, #83	@ 0x53
 80074f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007502:	2b00      	cmp	r3, #0
 8007504:	d01a      	beq.n	800753c <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	3b01      	subs	r3, #1
 800750a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10d      	bne.n	800752e <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	22ff      	movs	r2, #255	@ 0xff
 8007518:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2203      	movs	r2, #3
 800751e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e07c      	b.n	8007628 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	f003 0304 	and.w	r3, r3, #4
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1e4      	bne.n	8007506 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689a      	ldr	r2, [r3, #8]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800754a:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	b2da      	uxtb	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800755c:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800755e:	4b35      	ldr	r3, [pc, #212]	@ (8007634 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a35      	ldr	r2, [pc, #212]	@ (8007638 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 8007564:	fba2 2303 	umull	r2, r3, r2, r3
 8007568:	0adb      	lsrs	r3, r3, #11
 800756a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800756e:	fb02 f303 	mul.w	r3, r2, r3
 8007572:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	3b01      	subs	r3, #1
 8007578:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10d      	bne.n	800759c <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	22ff      	movs	r2, #255	@ 0xff
 8007586:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2203      	movs	r2, #3
 800758c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e045      	b.n	8007628 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	f003 0304 	and.w	r3, r3, #4
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d0e4      	beq.n	8007574 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689a      	ldr	r2, [r3, #8]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 0207 	bic.w	r2, r2, #7
 80075b8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6899      	ldr	r1, [r3, #8]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80075d2:	4b1a      	ldr	r3, [pc, #104]	@ (800763c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 80075d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075d8:	4a18      	ldr	r2, [pc, #96]	@ (800763c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 80075da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80075de:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80075e2:	4b16      	ldr	r3, [pc, #88]	@ (800763c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a15      	ldr	r2, [pc, #84]	@ (800763c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 80075e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80075ec:	6013      	str	r3, [r2, #0]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	689a      	ldr	r2, [r3, #8]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075fc:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	689a      	ldr	r2, [r3, #8]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800760c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	22ff      	movs	r2, #255	@ 0xff
 8007614:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	371c      	adds	r7, #28
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	20000008 	.word	0x20000008
 8007638:	10624dd3 	.word	0x10624dd3
 800763c:	58000800 	.word	0x58000800

08007640 <LL_RCC_GetUSARTClockSource>:
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007648:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800764c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4013      	ands	r3, r2
}
 8007654:	4618      	mov	r0, r3
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <LL_RCC_GetLPUARTClockSource>:
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800766c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4013      	ands	r3, r2
}
 8007674:	4618      	mov	r0, r3
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e042      	b.n	8007718 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007698:	2b00      	cmp	r3, #0
 800769a:	d106      	bne.n	80076aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7fb f9e1 	bl	8002a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2224      	movs	r2, #36	@ 0x24
 80076ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f022 0201 	bic.w	r2, r2, #1
 80076c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fe32 	bl	8008334 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fc07 	bl	8007ee4 <UART_SetConfig>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d101      	bne.n	80076e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e01b      	b.n	8007718 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689a      	ldr	r2, [r3, #8]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f042 0201 	orr.w	r2, r2, #1
 800770e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 feb1 	bl	8008478 <UART_CheckIdleState>
 8007716:	4603      	mov	r3, r0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b08a      	sub	sp, #40	@ 0x28
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	4613      	mov	r3, r2
 800772c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007734:	2b20      	cmp	r3, #32
 8007736:	d167      	bne.n	8007808 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d002      	beq.n	8007744 <HAL_UART_Transmit_DMA+0x24>
 800773e:	88fb      	ldrh	r3, [r7, #6]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d101      	bne.n	8007748 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e060      	b.n	800780a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	88fa      	ldrh	r2, [r7, #6]
 8007752:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	88fa      	ldrh	r2, [r7, #6]
 800775a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2221      	movs	r2, #33	@ 0x21
 800776a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007772:	2b00      	cmp	r3, #0
 8007774:	d028      	beq.n	80077c8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800777a:	4a26      	ldr	r2, [pc, #152]	@ (8007814 <HAL_UART_Transmit_DMA+0xf4>)
 800777c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007782:	4a25      	ldr	r2, [pc, #148]	@ (8007818 <HAL_UART_Transmit_DMA+0xf8>)
 8007784:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800778a:	4a24      	ldr	r2, [pc, #144]	@ (800781c <HAL_UART_Transmit_DMA+0xfc>)
 800778c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007792:	2200      	movs	r2, #0
 8007794:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800779e:	4619      	mov	r1, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	3328      	adds	r3, #40	@ 0x28
 80077a6:	461a      	mov	r2, r3
 80077a8:	88fb      	ldrh	r3, [r7, #6]
 80077aa:	f7fc ff34 	bl	8004616 <HAL_DMA_Start_IT>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d009      	beq.n	80077c8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2210      	movs	r2, #16
 80077b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2220      	movs	r2, #32
 80077c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e020      	b.n	800780a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2240      	movs	r2, #64	@ 0x40
 80077ce:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3308      	adds	r3, #8
 80077d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	e853 3f00 	ldrex	r3, [r3]
 80077de:	613b      	str	r3, [r7, #16]
   return(result);
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	3308      	adds	r3, #8
 80077ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077f0:	623a      	str	r2, [r7, #32]
 80077f2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f4:	69f9      	ldr	r1, [r7, #28]
 80077f6:	6a3a      	ldr	r2, [r7, #32]
 80077f8:	e841 2300 	strex	r3, r2, [r1]
 80077fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1e5      	bne.n	80077d0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007804:	2300      	movs	r3, #0
 8007806:	e000      	b.n	800780a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007808:	2302      	movs	r3, #2
  }
}
 800780a:	4618      	mov	r0, r3
 800780c:	3728      	adds	r7, #40	@ 0x28
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	080087f5 	.word	0x080087f5
 8007818:	0800888f 	.word	0x0800888f
 800781c:	080088ab 	.word	0x080088ab

08007820 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b0ba      	sub	sp, #232	@ 0xe8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	69db      	ldr	r3, [r3, #28]
 800782e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007846:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800784a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800784e:	4013      	ands	r3, r2
 8007850:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007854:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007858:	2b00      	cmp	r3, #0
 800785a:	d11b      	bne.n	8007894 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800785c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007860:	f003 0320 	and.w	r3, r3, #32
 8007864:	2b00      	cmp	r3, #0
 8007866:	d015      	beq.n	8007894 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800786c:	f003 0320 	and.w	r3, r3, #32
 8007870:	2b00      	cmp	r3, #0
 8007872:	d105      	bne.n	8007880 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800787c:	2b00      	cmp	r3, #0
 800787e:	d009      	beq.n	8007894 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 8300 	beq.w	8007e8a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	4798      	blx	r3
      }
      return;
 8007892:	e2fa      	b.n	8007e8a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007894:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007898:	2b00      	cmp	r3, #0
 800789a:	f000 8123 	beq.w	8007ae4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800789e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80078a2:	4b8d      	ldr	r3, [pc, #564]	@ (8007ad8 <HAL_UART_IRQHandler+0x2b8>)
 80078a4:	4013      	ands	r3, r2
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d106      	bne.n	80078b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80078aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80078ae:	4b8b      	ldr	r3, [pc, #556]	@ (8007adc <HAL_UART_IRQHandler+0x2bc>)
 80078b0:	4013      	ands	r3, r2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f000 8116 	beq.w	8007ae4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d011      	beq.n	80078e8 <HAL_UART_IRQHandler+0xc8>
 80078c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00b      	beq.n	80078e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2201      	movs	r2, #1
 80078d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078de:	f043 0201 	orr.w	r2, r3, #1
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078ec:	f003 0302 	and.w	r3, r3, #2
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d011      	beq.n	8007918 <HAL_UART_IRQHandler+0xf8>
 80078f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00b      	beq.n	8007918 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2202      	movs	r2, #2
 8007906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800790e:	f043 0204 	orr.w	r2, r3, #4
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b00      	cmp	r3, #0
 8007922:	d011      	beq.n	8007948 <HAL_UART_IRQHandler+0x128>
 8007924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007928:	f003 0301 	and.w	r3, r3, #1
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00b      	beq.n	8007948 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2204      	movs	r2, #4
 8007936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800793e:	f043 0202 	orr.w	r2, r3, #2
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800794c:	f003 0308 	and.w	r3, r3, #8
 8007950:	2b00      	cmp	r3, #0
 8007952:	d017      	beq.n	8007984 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007958:	f003 0320 	and.w	r3, r3, #32
 800795c:	2b00      	cmp	r3, #0
 800795e:	d105      	bne.n	800796c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007960:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007964:	4b5c      	ldr	r3, [pc, #368]	@ (8007ad8 <HAL_UART_IRQHandler+0x2b8>)
 8007966:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00b      	beq.n	8007984 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2208      	movs	r2, #8
 8007972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800797a:	f043 0208 	orr.w	r2, r3, #8
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007988:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800798c:	2b00      	cmp	r3, #0
 800798e:	d012      	beq.n	80079b6 <HAL_UART_IRQHandler+0x196>
 8007990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007994:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00c      	beq.n	80079b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80079a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ac:	f043 0220 	orr.w	r2, r3, #32
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 8266 	beq.w	8007e8e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079c6:	f003 0320 	and.w	r3, r3, #32
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d013      	beq.n	80079f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079d2:	f003 0320 	and.w	r3, r3, #32
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d105      	bne.n	80079e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80079da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d007      	beq.n	80079f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d003      	beq.n	80079f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a0a:	2b40      	cmp	r3, #64	@ 0x40
 8007a0c:	d005      	beq.n	8007a1a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a12:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d054      	beq.n	8007ac4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fe84 	bl	8008728 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a2a:	2b40      	cmp	r3, #64	@ 0x40
 8007a2c:	d146      	bne.n	8007abc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3308      	adds	r3, #8
 8007a34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a3c:	e853 3f00 	ldrex	r3, [r3]
 8007a40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007a44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3308      	adds	r3, #8
 8007a56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007a5a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007a66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007a6a:	e841 2300 	strex	r3, r2, [r1]
 8007a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007a72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1d9      	bne.n	8007a2e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d017      	beq.n	8007ab4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a8a:	4a15      	ldr	r2, [pc, #84]	@ (8007ae0 <HAL_UART_IRQHandler+0x2c0>)
 8007a8c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fc fe98 	bl	80047ca <HAL_DMA_Abort_IT>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d019      	beq.n	8007ad4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007aae:	4610      	mov	r0, r2
 8007ab0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ab2:	e00f      	b.n	8007ad4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f9ff 	bl	8007eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aba:	e00b      	b.n	8007ad4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f9fb 	bl	8007eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ac2:	e007      	b.n	8007ad4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f9f7 	bl	8007eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007ad2:	e1dc      	b.n	8007e8e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ad4:	bf00      	nop
    return;
 8007ad6:	e1da      	b.n	8007e8e <HAL_UART_IRQHandler+0x66e>
 8007ad8:	10000001 	.word	0x10000001
 8007adc:	04000120 	.word	0x04000120
 8007ae0:	0800892b 	.word	0x0800892b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	f040 8170 	bne.w	8007dce <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007af2:	f003 0310 	and.w	r3, r3, #16
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f000 8169 	beq.w	8007dce <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b00:	f003 0310 	and.w	r3, r3, #16
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f000 8162 	beq.w	8007dce <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2210      	movs	r2, #16
 8007b10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b1c:	2b40      	cmp	r3, #64	@ 0x40
 8007b1e:	f040 80d8 	bne.w	8007cd2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 80af 	beq.w	8007c98 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b44:	429a      	cmp	r2, r3
 8007b46:	f080 80a7 	bcs.w	8007c98 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0320 	and.w	r3, r3, #32
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f040 8087 	bne.w	8007c76 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b74:	e853 3f00 	ldrex	r3, [r3]
 8007b78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007b7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007b92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b96:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007b9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007baa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1da      	bne.n	8007b68 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3308      	adds	r3, #8
 8007bb8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007bbc:	e853 3f00 	ldrex	r3, [r3]
 8007bc0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007bc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bc4:	f023 0301 	bic.w	r3, r3, #1
 8007bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007bd6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007bda:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bdc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007bde:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007be2:	e841 2300 	strex	r3, r2, [r1]
 8007be6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007be8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1e1      	bne.n	8007bb2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	3308      	adds	r3, #8
 8007bf4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007bf8:	e853 3f00 	ldrex	r3, [r3]
 8007bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007bfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007c12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007c18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c1a:	e841 2300 	strex	r3, r2, [r1]
 8007c1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007c20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1e3      	bne.n	8007bee <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c3c:	e853 3f00 	ldrex	r3, [r3]
 8007c40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c44:	f023 0310 	bic.w	r3, r3, #16
 8007c48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	461a      	mov	r2, r3
 8007c52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c58:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c5e:	e841 2300 	strex	r3, r2, [r1]
 8007c62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1e4      	bne.n	8007c34 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fc fd4b 	bl	800470c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2202      	movs	r2, #2
 8007c7a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f91b 	bl	8007ecc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007c96:	e0fc      	b.n	8007e92 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	f040 80f5 	bne.w	8007e92 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0320 	and.w	r3, r3, #32
 8007cb6:	2b20      	cmp	r3, #32
 8007cb8:	f040 80eb 	bne.w	8007e92 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f8fe 	bl	8007ecc <HAL_UARTEx_RxEventCallback>
      return;
 8007cd0:	e0df      	b.n	8007e92 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 80d1 	beq.w	8007e96 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007cf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 80cc 	beq.w	8007e96 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d06:	e853 3f00 	ldrex	r3, [r3]
 8007d0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007d20:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d28:	e841 2300 	strex	r3, r2, [r1]
 8007d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1e4      	bne.n	8007cfe <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3308      	adds	r3, #8
 8007d3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3e:	e853 3f00 	ldrex	r3, [r3]
 8007d42:	623b      	str	r3, [r7, #32]
   return(result);
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d4a:	f023 0301 	bic.w	r3, r3, #1
 8007d4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	3308      	adds	r3, #8
 8007d58:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007d5c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d64:	e841 2300 	strex	r3, r2, [r1]
 8007d68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1e1      	bne.n	8007d34 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2220      	movs	r2, #32
 8007d74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	e853 3f00 	ldrex	r3, [r3]
 8007d90:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f023 0310 	bic.w	r3, r3, #16
 8007d98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	461a      	mov	r2, r3
 8007da2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007da6:	61fb      	str	r3, [r7, #28]
 8007da8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007daa:	69b9      	ldr	r1, [r7, #24]
 8007dac:	69fa      	ldr	r2, [r7, #28]
 8007dae:	e841 2300 	strex	r3, r2, [r1]
 8007db2:	617b      	str	r3, [r7, #20]
   return(result);
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1e4      	bne.n	8007d84 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2202      	movs	r2, #2
 8007dbe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007dc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f880 	bl	8007ecc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007dcc:	e063      	b.n	8007e96 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00e      	beq.n	8007df8 <HAL_UART_IRQHandler+0x5d8>
 8007dda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d008      	beq.n	8007df8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007dee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fdd7 	bl	80089a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007df6:	e051      	b.n	8007e9c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d014      	beq.n	8007e2e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d105      	bne.n	8007e1c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007e10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d008      	beq.n	8007e2e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d03a      	beq.n	8007e9a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	4798      	blx	r3
    }
    return;
 8007e2c:	e035      	b.n	8007e9a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d009      	beq.n	8007e4e <HAL_UART_IRQHandler+0x62e>
 8007e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d003      	beq.n	8007e4e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fd81 	bl	800894e <UART_EndTransmit_IT>
    return;
 8007e4c:	e026      	b.n	8007e9c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d009      	beq.n	8007e6e <HAL_UART_IRQHandler+0x64e>
 8007e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e5e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d003      	beq.n	8007e6e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fdb0 	bl	80089cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e6c:	e016      	b.n	8007e9c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d010      	beq.n	8007e9c <HAL_UART_IRQHandler+0x67c>
 8007e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	da0c      	bge.n	8007e9c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fd98 	bl	80089b8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e88:	e008      	b.n	8007e9c <HAL_UART_IRQHandler+0x67c>
      return;
 8007e8a:	bf00      	nop
 8007e8c:	e006      	b.n	8007e9c <HAL_UART_IRQHandler+0x67c>
    return;
 8007e8e:	bf00      	nop
 8007e90:	e004      	b.n	8007e9c <HAL_UART_IRQHandler+0x67c>
      return;
 8007e92:	bf00      	nop
 8007e94:	e002      	b.n	8007e9c <HAL_UART_IRQHandler+0x67c>
      return;
 8007e96:	bf00      	nop
 8007e98:	e000      	b.n	8007e9c <HAL_UART_IRQHandler+0x67c>
    return;
 8007e9a:	bf00      	nop
  }
}
 8007e9c:	37e8      	adds	r7, #232	@ 0xe8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop

08007ea4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ee8:	b08c      	sub	sp, #48	@ 0x30
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	689a      	ldr	r2, [r3, #8]
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	431a      	orrs	r2, r3
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	431a      	orrs	r2, r3
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	69db      	ldr	r3, [r3, #28]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	4baf      	ldr	r3, [pc, #700]	@ (80081d0 <UART_SetConfig+0x2ec>)
 8007f14:	4013      	ands	r3, r2
 8007f16:	697a      	ldr	r2, [r7, #20]
 8007f18:	6812      	ldr	r2, [r2, #0]
 8007f1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f1c:	430b      	orrs	r3, r1
 8007f1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	68da      	ldr	r2, [r3, #12]
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	430a      	orrs	r2, r1
 8007f34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4aa4      	ldr	r2, [pc, #656]	@ (80081d4 <UART_SetConfig+0x2f0>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d004      	beq.n	8007f50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007f5a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	6812      	ldr	r2, [r2, #0]
 8007f62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f64:	430b      	orrs	r3, r1
 8007f66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f6e:	f023 010f 	bic.w	r1, r3, #15
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a95      	ldr	r2, [pc, #596]	@ (80081d8 <UART_SetConfig+0x2f4>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d125      	bne.n	8007fd4 <UART_SetConfig+0xf0>
 8007f88:	2003      	movs	r0, #3
 8007f8a:	f7ff fb59 	bl	8007640 <LL_RCC_GetUSARTClockSource>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b03      	cmp	r3, #3
 8007f92:	d81b      	bhi.n	8007fcc <UART_SetConfig+0xe8>
 8007f94:	a201      	add	r2, pc, #4	@ (adr r2, 8007f9c <UART_SetConfig+0xb8>)
 8007f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9a:	bf00      	nop
 8007f9c:	08007fad 	.word	0x08007fad
 8007fa0:	08007fbd 	.word	0x08007fbd
 8007fa4:	08007fb5 	.word	0x08007fb5
 8007fa8:	08007fc5 	.word	0x08007fc5
 8007fac:	2301      	movs	r3, #1
 8007fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fb2:	e042      	b.n	800803a <UART_SetConfig+0x156>
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fba:	e03e      	b.n	800803a <UART_SetConfig+0x156>
 8007fbc:	2304      	movs	r3, #4
 8007fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fc2:	e03a      	b.n	800803a <UART_SetConfig+0x156>
 8007fc4:	2308      	movs	r3, #8
 8007fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fca:	e036      	b.n	800803a <UART_SetConfig+0x156>
 8007fcc:	2310      	movs	r3, #16
 8007fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fd2:	e032      	b.n	800803a <UART_SetConfig+0x156>
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a7e      	ldr	r2, [pc, #504]	@ (80081d4 <UART_SetConfig+0x2f0>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d12a      	bne.n	8008034 <UART_SetConfig+0x150>
 8007fde:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8007fe2:	f7ff fb3d 	bl	8007660 <LL_RCC_GetLPUARTClockSource>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fec:	d01a      	beq.n	8008024 <UART_SetConfig+0x140>
 8007fee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ff2:	d81b      	bhi.n	800802c <UART_SetConfig+0x148>
 8007ff4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ff8:	d00c      	beq.n	8008014 <UART_SetConfig+0x130>
 8007ffa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ffe:	d815      	bhi.n	800802c <UART_SetConfig+0x148>
 8008000:	2b00      	cmp	r3, #0
 8008002:	d003      	beq.n	800800c <UART_SetConfig+0x128>
 8008004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008008:	d008      	beq.n	800801c <UART_SetConfig+0x138>
 800800a:	e00f      	b.n	800802c <UART_SetConfig+0x148>
 800800c:	2300      	movs	r3, #0
 800800e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008012:	e012      	b.n	800803a <UART_SetConfig+0x156>
 8008014:	2302      	movs	r3, #2
 8008016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800801a:	e00e      	b.n	800803a <UART_SetConfig+0x156>
 800801c:	2304      	movs	r3, #4
 800801e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008022:	e00a      	b.n	800803a <UART_SetConfig+0x156>
 8008024:	2308      	movs	r3, #8
 8008026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800802a:	e006      	b.n	800803a <UART_SetConfig+0x156>
 800802c:	2310      	movs	r3, #16
 800802e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008032:	e002      	b.n	800803a <UART_SetConfig+0x156>
 8008034:	2310      	movs	r3, #16
 8008036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a65      	ldr	r2, [pc, #404]	@ (80081d4 <UART_SetConfig+0x2f0>)
 8008040:	4293      	cmp	r3, r2
 8008042:	f040 8097 	bne.w	8008174 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008046:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800804a:	2b08      	cmp	r3, #8
 800804c:	d823      	bhi.n	8008096 <UART_SetConfig+0x1b2>
 800804e:	a201      	add	r2, pc, #4	@ (adr r2, 8008054 <UART_SetConfig+0x170>)
 8008050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008054:	08008079 	.word	0x08008079
 8008058:	08008097 	.word	0x08008097
 800805c:	08008081 	.word	0x08008081
 8008060:	08008097 	.word	0x08008097
 8008064:	08008087 	.word	0x08008087
 8008068:	08008097 	.word	0x08008097
 800806c:	08008097 	.word	0x08008097
 8008070:	08008097 	.word	0x08008097
 8008074:	0800808f 	.word	0x0800808f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008078:	f7fe fc06 	bl	8006888 <HAL_RCC_GetPCLK1Freq>
 800807c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800807e:	e010      	b.n	80080a2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008080:	4b56      	ldr	r3, [pc, #344]	@ (80081dc <UART_SetConfig+0x2f8>)
 8008082:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008084:	e00d      	b.n	80080a2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008086:	f7fe fb7f 	bl	8006788 <HAL_RCC_GetSysClockFreq>
 800808a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800808c:	e009      	b.n	80080a2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800808e:	f248 0306 	movw	r3, #32774	@ 0x8006
 8008092:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008094:	e005      	b.n	80080a2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8008096:	2300      	movs	r3, #0
 8008098:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80080a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 812b 	beq.w	8008300 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ae:	4a4c      	ldr	r2, [pc, #304]	@ (80081e0 <UART_SetConfig+0x2fc>)
 80080b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080b4:	461a      	mov	r2, r3
 80080b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80080bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	685a      	ldr	r2, [r3, #4]
 80080c2:	4613      	mov	r3, r2
 80080c4:	005b      	lsls	r3, r3, #1
 80080c6:	4413      	add	r3, r2
 80080c8:	69ba      	ldr	r2, [r7, #24]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d305      	bcc.n	80080da <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080d4:	69ba      	ldr	r2, [r7, #24]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d903      	bls.n	80080e2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80080e0:	e10e      	b.n	8008300 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e4:	2200      	movs	r2, #0
 80080e6:	60bb      	str	r3, [r7, #8]
 80080e8:	60fa      	str	r2, [r7, #12]
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ee:	4a3c      	ldr	r2, [pc, #240]	@ (80081e0 <UART_SetConfig+0x2fc>)
 80080f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	2200      	movs	r2, #0
 80080f8:	603b      	str	r3, [r7, #0]
 80080fa:	607a      	str	r2, [r7, #4]
 80080fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008100:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008104:	f7f8 fb7a 	bl	80007fc <__aeabi_uldivmod>
 8008108:	4602      	mov	r2, r0
 800810a:	460b      	mov	r3, r1
 800810c:	4610      	mov	r0, r2
 800810e:	4619      	mov	r1, r3
 8008110:	f04f 0200 	mov.w	r2, #0
 8008114:	f04f 0300 	mov.w	r3, #0
 8008118:	020b      	lsls	r3, r1, #8
 800811a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800811e:	0202      	lsls	r2, r0, #8
 8008120:	6979      	ldr	r1, [r7, #20]
 8008122:	6849      	ldr	r1, [r1, #4]
 8008124:	0849      	lsrs	r1, r1, #1
 8008126:	2000      	movs	r0, #0
 8008128:	460c      	mov	r4, r1
 800812a:	4605      	mov	r5, r0
 800812c:	eb12 0804 	adds.w	r8, r2, r4
 8008130:	eb43 0905 	adc.w	r9, r3, r5
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	469a      	mov	sl, r3
 800813c:	4693      	mov	fp, r2
 800813e:	4652      	mov	r2, sl
 8008140:	465b      	mov	r3, fp
 8008142:	4640      	mov	r0, r8
 8008144:	4649      	mov	r1, r9
 8008146:	f7f8 fb59 	bl	80007fc <__aeabi_uldivmod>
 800814a:	4602      	mov	r2, r0
 800814c:	460b      	mov	r3, r1
 800814e:	4613      	mov	r3, r2
 8008150:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008158:	d308      	bcc.n	800816c <UART_SetConfig+0x288>
 800815a:	6a3b      	ldr	r3, [r7, #32]
 800815c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008160:	d204      	bcs.n	800816c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	6a3a      	ldr	r2, [r7, #32]
 8008168:	60da      	str	r2, [r3, #12]
 800816a:	e0c9      	b.n	8008300 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008172:	e0c5      	b.n	8008300 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	69db      	ldr	r3, [r3, #28]
 8008178:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800817c:	d16d      	bne.n	800825a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800817e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008182:	3b01      	subs	r3, #1
 8008184:	2b07      	cmp	r3, #7
 8008186:	d82d      	bhi.n	80081e4 <UART_SetConfig+0x300>
 8008188:	a201      	add	r2, pc, #4	@ (adr r2, 8008190 <UART_SetConfig+0x2ac>)
 800818a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818e:	bf00      	nop
 8008190:	080081b1 	.word	0x080081b1
 8008194:	080081b9 	.word	0x080081b9
 8008198:	080081e5 	.word	0x080081e5
 800819c:	080081bf 	.word	0x080081bf
 80081a0:	080081e5 	.word	0x080081e5
 80081a4:	080081e5 	.word	0x080081e5
 80081a8:	080081e5 	.word	0x080081e5
 80081ac:	080081c7 	.word	0x080081c7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081b0:	f7fe fb80 	bl	80068b4 <HAL_RCC_GetPCLK2Freq>
 80081b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081b6:	e01b      	b.n	80081f0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081b8:	4b08      	ldr	r3, [pc, #32]	@ (80081dc <UART_SetConfig+0x2f8>)
 80081ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081bc:	e018      	b.n	80081f0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081be:	f7fe fae3 	bl	8006788 <HAL_RCC_GetSysClockFreq>
 80081c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081c4:	e014      	b.n	80081f0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081c6:	f248 0306 	movw	r3, #32774	@ 0x8006
 80081ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081cc:	e010      	b.n	80081f0 <UART_SetConfig+0x30c>
 80081ce:	bf00      	nop
 80081d0:	cfff69f3 	.word	0xcfff69f3
 80081d4:	40008000 	.word	0x40008000
 80081d8:	40013800 	.word	0x40013800
 80081dc:	00f42400 	.word	0x00f42400
 80081e0:	0800fde8 	.word	0x0800fde8
      default:
        pclk = 0U;
 80081e4:	2300      	movs	r3, #0
 80081e6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80081ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 8084 	beq.w	8008300 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081fc:	4a4b      	ldr	r2, [pc, #300]	@ (800832c <UART_SetConfig+0x448>)
 80081fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008202:	461a      	mov	r2, r3
 8008204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008206:	fbb3 f3f2 	udiv	r3, r3, r2
 800820a:	005a      	lsls	r2, r3, #1
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	085b      	lsrs	r3, r3, #1
 8008212:	441a      	add	r2, r3
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	fbb2 f3f3 	udiv	r3, r2, r3
 800821c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	2b0f      	cmp	r3, #15
 8008222:	d916      	bls.n	8008252 <UART_SetConfig+0x36e>
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800822a:	d212      	bcs.n	8008252 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	b29b      	uxth	r3, r3
 8008230:	f023 030f 	bic.w	r3, r3, #15
 8008234:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	085b      	lsrs	r3, r3, #1
 800823a:	b29b      	uxth	r3, r3
 800823c:	f003 0307 	and.w	r3, r3, #7
 8008240:	b29a      	uxth	r2, r3
 8008242:	8bfb      	ldrh	r3, [r7, #30]
 8008244:	4313      	orrs	r3, r2
 8008246:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	8bfa      	ldrh	r2, [r7, #30]
 800824e:	60da      	str	r2, [r3, #12]
 8008250:	e056      	b.n	8008300 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008258:	e052      	b.n	8008300 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800825a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800825e:	3b01      	subs	r3, #1
 8008260:	2b07      	cmp	r3, #7
 8008262:	d822      	bhi.n	80082aa <UART_SetConfig+0x3c6>
 8008264:	a201      	add	r2, pc, #4	@ (adr r2, 800826c <UART_SetConfig+0x388>)
 8008266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826a:	bf00      	nop
 800826c:	0800828d 	.word	0x0800828d
 8008270:	08008295 	.word	0x08008295
 8008274:	080082ab 	.word	0x080082ab
 8008278:	0800829b 	.word	0x0800829b
 800827c:	080082ab 	.word	0x080082ab
 8008280:	080082ab 	.word	0x080082ab
 8008284:	080082ab 	.word	0x080082ab
 8008288:	080082a3 	.word	0x080082a3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800828c:	f7fe fb12 	bl	80068b4 <HAL_RCC_GetPCLK2Freq>
 8008290:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008292:	e010      	b.n	80082b6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008294:	4b26      	ldr	r3, [pc, #152]	@ (8008330 <UART_SetConfig+0x44c>)
 8008296:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008298:	e00d      	b.n	80082b6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800829a:	f7fe fa75 	bl	8006788 <HAL_RCC_GetSysClockFreq>
 800829e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082a0:	e009      	b.n	80082b6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082a2:	f248 0306 	movw	r3, #32774	@ 0x8006
 80082a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082a8:	e005      	b.n	80082b6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80082aa:	2300      	movs	r3, #0
 80082ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80082b4:	bf00      	nop
    }

    if (pclk != 0U)
 80082b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d021      	beq.n	8008300 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c0:	4a1a      	ldr	r2, [pc, #104]	@ (800832c <UART_SetConfig+0x448>)
 80082c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082c6:	461a      	mov	r2, r3
 80082c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	085b      	lsrs	r3, r3, #1
 80082d4:	441a      	add	r2, r3
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	fbb2 f3f3 	udiv	r3, r2, r3
 80082de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082e0:	6a3b      	ldr	r3, [r7, #32]
 80082e2:	2b0f      	cmp	r3, #15
 80082e4:	d909      	bls.n	80082fa <UART_SetConfig+0x416>
 80082e6:	6a3b      	ldr	r3, [r7, #32]
 80082e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082ec:	d205      	bcs.n	80082fa <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	60da      	str	r2, [r3, #12]
 80082f8:	e002      	b.n	8008300 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	2201      	movs	r2, #1
 8008304:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2201      	movs	r2, #1
 800830c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	2200      	movs	r2, #0
 8008314:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	2200      	movs	r2, #0
 800831a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800831c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008320:	4618      	mov	r0, r3
 8008322:	3730      	adds	r7, #48	@ 0x30
 8008324:	46bd      	mov	sp, r7
 8008326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800832a:	bf00      	nop
 800832c:	0800fde8 	.word	0x0800fde8
 8008330:	00f42400 	.word	0x00f42400

08008334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008340:	f003 0308 	and.w	r3, r3, #8
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00a      	beq.n	800835e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	430a      	orrs	r2, r1
 800835c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00a      	beq.n	8008380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	430a      	orrs	r2, r1
 800837e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00a      	beq.n	80083a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	430a      	orrs	r2, r1
 80083a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a6:	f003 0304 	and.w	r3, r3, #4
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00a      	beq.n	80083c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	430a      	orrs	r2, r1
 80083c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c8:	f003 0310 	and.w	r3, r3, #16
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00a      	beq.n	80083e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	430a      	orrs	r2, r1
 80083e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ea:	f003 0320 	and.w	r3, r3, #32
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00a      	beq.n	8008408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	430a      	orrs	r2, r1
 8008406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800840c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008410:	2b00      	cmp	r3, #0
 8008412:	d01a      	beq.n	800844a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	430a      	orrs	r2, r1
 8008428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800842e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008432:	d10a      	bne.n	800844a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	430a      	orrs	r2, r1
 8008448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800844e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00a      	beq.n	800846c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	430a      	orrs	r2, r1
 800846a:	605a      	str	r2, [r3, #4]
  }
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b098      	sub	sp, #96	@ 0x60
 800847c:	af02      	add	r7, sp, #8
 800847e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008488:	f7fb f85e 	bl	8003548 <HAL_GetTick>
 800848c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0308 	and.w	r3, r3, #8
 8008498:	2b08      	cmp	r3, #8
 800849a:	d12f      	bne.n	80084fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800849c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084a4:	2200      	movs	r2, #0
 80084a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f88e 	bl	80085cc <UART_WaitOnFlagUntilTimeout>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d022      	beq.n	80084fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084be:	e853 3f00 	ldrex	r3, [r3]
 80084c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	461a      	mov	r2, r3
 80084d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80084d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084dc:	e841 2300 	strex	r3, r2, [r1]
 80084e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1e6      	bne.n	80084b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2220      	movs	r2, #32
 80084ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084f8:	2303      	movs	r3, #3
 80084fa:	e063      	b.n	80085c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 0304 	and.w	r3, r3, #4
 8008506:	2b04      	cmp	r3, #4
 8008508:	d149      	bne.n	800859e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800850a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008512:	2200      	movs	r2, #0
 8008514:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f857 	bl	80085cc <UART_WaitOnFlagUntilTimeout>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d03c      	beq.n	800859e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800852c:	e853 3f00 	ldrex	r3, [r3]
 8008530:	623b      	str	r3, [r7, #32]
   return(result);
 8008532:	6a3b      	ldr	r3, [r7, #32]
 8008534:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008538:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	461a      	mov	r2, r3
 8008540:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008542:	633b      	str	r3, [r7, #48]	@ 0x30
 8008544:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008546:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800854a:	e841 2300 	strex	r3, r2, [r1]
 800854e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1e6      	bne.n	8008524 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	3308      	adds	r3, #8
 800855c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	e853 3f00 	ldrex	r3, [r3]
 8008564:	60fb      	str	r3, [r7, #12]
   return(result);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f023 0301 	bic.w	r3, r3, #1
 800856c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	3308      	adds	r3, #8
 8008574:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008576:	61fa      	str	r2, [r7, #28]
 8008578:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857a:	69b9      	ldr	r1, [r7, #24]
 800857c:	69fa      	ldr	r2, [r7, #28]
 800857e:	e841 2300 	strex	r3, r2, [r1]
 8008582:	617b      	str	r3, [r7, #20]
   return(result);
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1e5      	bne.n	8008556 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2220      	movs	r2, #32
 800858e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e012      	b.n	80085c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2220      	movs	r2, #32
 80085a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2220      	movs	r2, #32
 80085aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3758      	adds	r7, #88	@ 0x58
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	603b      	str	r3, [r7, #0]
 80085d8:	4613      	mov	r3, r2
 80085da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085dc:	e04f      	b.n	800867e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e4:	d04b      	beq.n	800867e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085e6:	f7fa ffaf 	bl	8003548 <HAL_GetTick>
 80085ea:	4602      	mov	r2, r0
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	1ad3      	subs	r3, r2, r3
 80085f0:	69ba      	ldr	r2, [r7, #24]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d302      	bcc.n	80085fc <UART_WaitOnFlagUntilTimeout+0x30>
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e04e      	b.n	800869e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0304 	and.w	r3, r3, #4
 800860a:	2b00      	cmp	r3, #0
 800860c:	d037      	beq.n	800867e <UART_WaitOnFlagUntilTimeout+0xb2>
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	2b80      	cmp	r3, #128	@ 0x80
 8008612:	d034      	beq.n	800867e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	2b40      	cmp	r3, #64	@ 0x40
 8008618:	d031      	beq.n	800867e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	69db      	ldr	r3, [r3, #28]
 8008620:	f003 0308 	and.w	r3, r3, #8
 8008624:	2b08      	cmp	r3, #8
 8008626:	d110      	bne.n	800864a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2208      	movs	r2, #8
 800862e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f000 f879 	bl	8008728 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2208      	movs	r2, #8
 800863a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e029      	b.n	800869e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	69db      	ldr	r3, [r3, #28]
 8008650:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008654:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008658:	d111      	bne.n	800867e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008662:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f000 f85f 	bl	8008728 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2220      	movs	r2, #32
 800866e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	e00f      	b.n	800869e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	69da      	ldr	r2, [r3, #28]
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	4013      	ands	r3, r2
 8008688:	68ba      	ldr	r2, [r7, #8]
 800868a:	429a      	cmp	r2, r3
 800868c:	bf0c      	ite	eq
 800868e:	2301      	moveq	r3, #1
 8008690:	2300      	movne	r3, #0
 8008692:	b2db      	uxtb	r3, r3
 8008694:	461a      	mov	r2, r3
 8008696:	79fb      	ldrb	r3, [r7, #7]
 8008698:	429a      	cmp	r2, r3
 800869a:	d0a0      	beq.n	80085de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b08f      	sub	sp, #60	@ 0x3c
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b4:	6a3b      	ldr	r3, [r7, #32]
 80086b6:	e853 3f00 	ldrex	r3, [r3]
 80086ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80086c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	461a      	mov	r2, r3
 80086ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086ce:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086d4:	e841 2300 	strex	r3, r2, [r1]
 80086d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1e6      	bne.n	80086ae <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3308      	adds	r3, #8
 80086e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	e853 3f00 	ldrex	r3, [r3]
 80086ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80086f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	3308      	adds	r3, #8
 80086fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008700:	61ba      	str	r2, [r7, #24]
 8008702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008704:	6979      	ldr	r1, [r7, #20]
 8008706:	69ba      	ldr	r2, [r7, #24]
 8008708:	e841 2300 	strex	r3, r2, [r1]
 800870c:	613b      	str	r3, [r7, #16]
   return(result);
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1e5      	bne.n	80086e0 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2220      	movs	r2, #32
 8008718:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800871c:	bf00      	nop
 800871e:	373c      	adds	r7, #60	@ 0x3c
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008728:	b480      	push	{r7}
 800872a:	b095      	sub	sp, #84	@ 0x54
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008738:	e853 3f00 	ldrex	r3, [r3]
 800873c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800873e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008740:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008744:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	461a      	mov	r2, r3
 800874c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800874e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008750:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008752:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008754:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008756:	e841 2300 	strex	r3, r2, [r1]
 800875a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800875c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1e6      	bne.n	8008730 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	3308      	adds	r3, #8
 8008768:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876a:	6a3b      	ldr	r3, [r7, #32]
 800876c:	e853 3f00 	ldrex	r3, [r3]
 8008770:	61fb      	str	r3, [r7, #28]
   return(result);
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008778:	f023 0301 	bic.w	r3, r3, #1
 800877c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3308      	adds	r3, #8
 8008784:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008786:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008788:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800878c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800878e:	e841 2300 	strex	r3, r2, [r1]
 8008792:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1e3      	bne.n	8008762 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d118      	bne.n	80087d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	e853 3f00 	ldrex	r3, [r3]
 80087ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	f023 0310 	bic.w	r3, r3, #16
 80087b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	461a      	mov	r2, r3
 80087be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087c0:	61bb      	str	r3, [r7, #24]
 80087c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c4:	6979      	ldr	r1, [r7, #20]
 80087c6:	69ba      	ldr	r2, [r7, #24]
 80087c8:	e841 2300 	strex	r3, r2, [r1]
 80087cc:	613b      	str	r3, [r7, #16]
   return(result);
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1e6      	bne.n	80087a2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2220      	movs	r2, #32
 80087d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80087e8:	bf00      	nop
 80087ea:	3754      	adds	r7, #84	@ 0x54
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b090      	sub	sp, #64	@ 0x40
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008800:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 0320 	and.w	r3, r3, #32
 800880c:	2b00      	cmp	r3, #0
 800880e:	d137      	bne.n	8008880 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008812:	2200      	movs	r2, #0
 8008814:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	3308      	adds	r3, #8
 800881e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008822:	e853 3f00 	ldrex	r3, [r3]
 8008826:	623b      	str	r3, [r7, #32]
   return(result);
 8008828:	6a3b      	ldr	r3, [r7, #32]
 800882a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800882e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	3308      	adds	r3, #8
 8008836:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008838:	633a      	str	r2, [r7, #48]	@ 0x30
 800883a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800883e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008840:	e841 2300 	strex	r3, r2, [r1]
 8008844:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1e5      	bne.n	8008818 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800884c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	e853 3f00 	ldrex	r3, [r3]
 8008858:	60fb      	str	r3, [r7, #12]
   return(result);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008860:	637b      	str	r3, [r7, #52]	@ 0x34
 8008862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	461a      	mov	r2, r3
 8008868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800886a:	61fb      	str	r3, [r7, #28]
 800886c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886e:	69b9      	ldr	r1, [r7, #24]
 8008870:	69fa      	ldr	r2, [r7, #28]
 8008872:	e841 2300 	strex	r3, r2, [r1]
 8008876:	617b      	str	r3, [r7, #20]
   return(result);
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1e6      	bne.n	800884c <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800887e:	e002      	b.n	8008886 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008880:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008882:	f7f9 fc0b 	bl	800209c <HAL_UART_TxCpltCallback>
}
 8008886:	bf00      	nop
 8008888:	3740      	adds	r7, #64	@ 0x40
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b084      	sub	sp, #16
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800889a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f7ff fb01 	bl	8007ea4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088a2:	bf00      	nop
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b086      	sub	sp, #24
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088be:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088d2:	2b80      	cmp	r3, #128	@ 0x80
 80088d4:	d109      	bne.n	80088ea <UART_DMAError+0x40>
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	2b21      	cmp	r3, #33	@ 0x21
 80088da:	d106      	bne.n	80088ea <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	2200      	movs	r2, #0
 80088e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80088e4:	6978      	ldr	r0, [r7, #20]
 80088e6:	f7ff fede 	bl	80086a6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088f4:	2b40      	cmp	r3, #64	@ 0x40
 80088f6:	d109      	bne.n	800890c <UART_DMAError+0x62>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2b22      	cmp	r3, #34	@ 0x22
 80088fc:	d106      	bne.n	800890c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	2200      	movs	r2, #0
 8008902:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008906:	6978      	ldr	r0, [r7, #20]
 8008908:	f7ff ff0e 	bl	8008728 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008912:	f043 0210 	orr.w	r2, r3, #16
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800891c:	6978      	ldr	r0, [r7, #20]
 800891e:	f7ff facb 	bl	8007eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008922:	bf00      	nop
 8008924:	3718      	adds	r7, #24
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b084      	sub	sp, #16
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008936:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f7ff fab9 	bl	8007eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008946:	bf00      	nop
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b088      	sub	sp, #32
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	e853 3f00 	ldrex	r3, [r3]
 8008962:	60bb      	str	r3, [r7, #8]
   return(result);
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800896a:	61fb      	str	r3, [r7, #28]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	461a      	mov	r2, r3
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	61bb      	str	r3, [r7, #24]
 8008976:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008978:	6979      	ldr	r1, [r7, #20]
 800897a:	69ba      	ldr	r2, [r7, #24]
 800897c:	e841 2300 	strex	r3, r2, [r1]
 8008980:	613b      	str	r3, [r7, #16]
   return(result);
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1e6      	bne.n	8008956 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2220      	movs	r2, #32
 800898c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7f9 fb80 	bl	800209c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800899c:	bf00      	nop
 800899e:	3720      	adds	r7, #32
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80089ac:	bf00      	nop
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d101      	bne.n	80089f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80089f2:	2302      	movs	r3, #2
 80089f4:	e027      	b.n	8008a46 <HAL_UARTEx_DisableFifoMode+0x66>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2224      	movs	r2, #36	@ 0x24
 8008a02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f022 0201 	bic.w	r2, r2, #1
 8008a1c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008a24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2220      	movs	r2, #32
 8008a38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr

08008a52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b084      	sub	sp, #16
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
 8008a5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d101      	bne.n	8008a6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a66:	2302      	movs	r3, #2
 8008a68:	e02d      	b.n	8008ac6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2224      	movs	r2, #36	@ 0x24
 8008a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f022 0201 	bic.w	r2, r2, #1
 8008a90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	683a      	ldr	r2, [r7, #0]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f850 	bl	8008b4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b084      	sub	sp, #16
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d101      	bne.n	8008ae6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ae2:	2302      	movs	r3, #2
 8008ae4:	e02d      	b.n	8008b42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2224      	movs	r2, #36	@ 0x24
 8008af2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f022 0201 	bic.w	r2, r2, #1
 8008b0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	683a      	ldr	r2, [r7, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f812 	bl	8008b4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2220      	movs	r2, #32
 8008b34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
	...

08008b4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d108      	bne.n	8008b6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b6c:	e031      	b.n	8008bd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b6e:	2308      	movs	r3, #8
 8008b70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b72:	2308      	movs	r3, #8
 8008b74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	0e5b      	lsrs	r3, r3, #25
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	f003 0307 	and.w	r3, r3, #7
 8008b84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	0f5b      	lsrs	r3, r3, #29
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	f003 0307 	and.w	r3, r3, #7
 8008b94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b96:	7bbb      	ldrb	r3, [r7, #14]
 8008b98:	7b3a      	ldrb	r2, [r7, #12]
 8008b9a:	4911      	ldr	r1, [pc, #68]	@ (8008be0 <UARTEx_SetNbDataToProcess+0x94>)
 8008b9c:	5c8a      	ldrb	r2, [r1, r2]
 8008b9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ba2:	7b3a      	ldrb	r2, [r7, #12]
 8008ba4:	490f      	ldr	r1, [pc, #60]	@ (8008be4 <UARTEx_SetNbDataToProcess+0x98>)
 8008ba6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ba8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
 8008bb6:	7b7a      	ldrb	r2, [r7, #13]
 8008bb8:	4909      	ldr	r1, [pc, #36]	@ (8008be0 <UARTEx_SetNbDataToProcess+0x94>)
 8008bba:	5c8a      	ldrb	r2, [r1, r2]
 8008bbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008bc0:	7b7a      	ldrb	r2, [r7, #13]
 8008bc2:	4908      	ldr	r1, [pc, #32]	@ (8008be4 <UARTEx_SetNbDataToProcess+0x98>)
 8008bc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008bd2:	bf00      	nop
 8008bd4:	3714      	adds	r7, #20
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	0800fe00 	.word	0x0800fe00
 8008be4:	0800fe08 	.word	0x0800fe08

08008be8 <aci_gap_set_non_discoverable>:
 */

#include "auto/ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b088      	sub	sp, #32
 8008bec:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008bf2:	f107 0308 	add.w	r3, r7, #8
 8008bf6:	2218      	movs	r2, #24
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f001 f92d 	bl	8009e5a <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c00:	233f      	movs	r3, #63	@ 0x3f
 8008c02:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8008c04:	2381      	movs	r3, #129	@ 0x81
 8008c06:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008c08:	1dfb      	adds	r3, r7, #7
 8008c0a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c10:	f107 0308 	add.w	r3, r7, #8
 8008c14:	2100      	movs	r1, #0
 8008c16:	4618      	mov	r0, r3
 8008c18:	f001 fba8 	bl	800a36c <hci_send_req>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	da01      	bge.n	8008c26 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008c22:	23ff      	movs	r3, #255	@ 0xff
 8008c24:	e000      	b.n	8008c28 <aci_gap_set_non_discoverable+0x40>
  return status;
 8008c26:	79fb      	ldrb	r3, [r7, #7]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3720      	adds	r7, #32
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8008c30:	b5b0      	push	{r4, r5, r7, lr}
 8008c32:	b0ce      	sub	sp, #312	@ 0x138
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	4605      	mov	r5, r0
 8008c38:	460c      	mov	r4, r1
 8008c3a:	4610      	mov	r0, r2
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c42:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008c46:	462a      	mov	r2, r5
 8008c48:	701a      	strb	r2, [r3, #0]
 8008c4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c4e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008c52:	4622      	mov	r2, r4
 8008c54:	801a      	strh	r2, [r3, #0]
 8008c56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c5a:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8008c5e:	4602      	mov	r2, r0
 8008c60:	801a      	strh	r2, [r3, #0]
 8008c62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c66:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8008c6a:	460a      	mov	r2, r1
 8008c6c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8008c6e:	f107 0310 	add.w	r3, r7, #16
 8008c72:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008c76:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8008c7a:	3308      	adds	r3, #8
 8008c7c:	f107 0210 	add.w	r2, r7, #16
 8008c80:	4413      	add	r3, r2
 8008c82:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008c86:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8008c8a:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8008c8e:	4413      	add	r3, r2
 8008c90:	3309      	adds	r3, #9
 8008c92:	f107 0210 	add.w	r2, r7, #16
 8008c96:	4413      	add	r3, r2
 8008c98:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008c9c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ca0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8008cae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008cb2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008cb6:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8008cba:	7812      	ldrb	r2, [r2, #0]
 8008cbc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008cbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8008cc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008ccc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008cd0:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8008cd4:	8812      	ldrh	r2, [r2, #0]
 8008cd6:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8008cda:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008cde:	3302      	adds	r3, #2
 8008ce0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8008ce4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008ce8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008cec:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8008cf0:	8812      	ldrh	r2, [r2, #0]
 8008cf2:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8008cf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008cfa:	3302      	adds	r3, #2
 8008cfc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8008d00:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008d04:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008d08:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8008d0c:	7812      	ldrb	r2, [r2, #0]
 8008d0e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008d10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008d14:	3301      	adds	r3, #1
 8008d16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8008d1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008d1e:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8008d22:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008d24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008d28:	3301      	adds	r3, #1
 8008d2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8008d2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008d32:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8008d36:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008d38:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8008d42:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008d46:	3308      	adds	r3, #8
 8008d48:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8008d4c:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8008d50:	4618      	mov	r0, r3
 8008d52:	f001 f872 	bl	8009e3a <Osal_MemCpy>
    index_input += Local_Name_Length;
 8008d56:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8008d5a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8008d5e:	4413      	add	r3, r2
 8008d60:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8008d64:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008d68:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8008d6c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008d6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008d72:	3301      	adds	r3, #1
 8008d74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8008d78:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8008d82:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8008d86:	4618      	mov	r0, r3
 8008d88:	f001 f857 	bl	8009e3a <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8008d8c:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8008d90:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8008d94:	4413      	add	r3, r2
 8008d96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8008d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008d9e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8008da2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008da4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008da8:	3302      	adds	r3, #2
 8008daa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8008dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008db2:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8008db6:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008db8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008dbc:	3302      	adds	r3, #2
 8008dbe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008dc2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dc6:	2218      	movs	r2, #24
 8008dc8:	2100      	movs	r1, #0
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f001 f845 	bl	8009e5a <Osal_MemSet>
  rq.ogf = 0x3f;
 8008dd0:	233f      	movs	r3, #63	@ 0x3f
 8008dd2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8008dd6:	2383      	movs	r3, #131	@ 0x83
 8008dd8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008ddc:	f107 0310 	add.w	r3, r7, #16
 8008de0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008de4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008de8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008dec:	f107 030f 	add.w	r3, r7, #15
 8008df0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008df4:	2301      	movs	r3, #1
 8008df6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008dfa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dfe:	2100      	movs	r1, #0
 8008e00:	4618      	mov	r0, r3
 8008e02:	f001 fab3 	bl	800a36c <hci_send_req>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	da01      	bge.n	8008e10 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8008e0c:	23ff      	movs	r3, #255	@ 0xff
 8008e0e:	e004      	b.n	8008e1a <aci_gap_set_discoverable+0x1ea>
  return status;
 8008e10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e14:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008e18:	781b      	ldrb	r3, [r3, #0]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bdb0      	pop	{r4, r5, r7, pc}

08008e24 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b0cc      	sub	sp, #304	@ 0x130
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e30:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008e34:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008e36:	f107 0310 	add.w	r3, r7, #16
 8008e3a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008e3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e42:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008e46:	2200      	movs	r2, #0
 8008e48:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8008e50:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008e54:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008e58:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008e5c:	7812      	ldrb	r2, [r2, #0]
 8008e5e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008e60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008e64:	3301      	adds	r3, #1
 8008e66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008e6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e6e:	2218      	movs	r2, #24
 8008e70:	2100      	movs	r1, #0
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 fff1 	bl	8009e5a <Osal_MemSet>
  rq.ogf = 0x3f;
 8008e78:	233f      	movs	r3, #63	@ 0x3f
 8008e7a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8008e7e:	2385      	movs	r3, #133	@ 0x85
 8008e80:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008e84:	f107 0310 	add.w	r3, r7, #16
 8008e88:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008e8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008e90:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008e94:	f107 030f 	add.w	r3, r7, #15
 8008e98:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ea2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f001 fa5f 	bl	800a36c <hci_send_req>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	da01      	bge.n	8008eb8 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8008eb4:	23ff      	movs	r3, #255	@ 0xff
 8008eb6:	e004      	b.n	8008ec2 <aci_gap_set_io_capability+0x9e>
  return status;
 8008eb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ebc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008ec0:	781b      	ldrb	r3, [r3, #0]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8008ecc:	b5b0      	push	{r4, r5, r7, lr}
 8008ece:	b0cc      	sub	sp, #304	@ 0x130
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	4605      	mov	r5, r0
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	4610      	mov	r0, r2
 8008ed8:	4619      	mov	r1, r3
 8008eda:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ede:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008ee2:	462a      	mov	r2, r5
 8008ee4:	701a      	strb	r2, [r3, #0]
 8008ee6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008eea:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008eee:	4622      	mov	r2, r4
 8008ef0:	701a      	strb	r2, [r3, #0]
 8008ef2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ef6:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8008efa:	4602      	mov	r2, r0
 8008efc:	701a      	strb	r2, [r3, #0]
 8008efe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008f02:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008f06:	460a      	mov	r2, r1
 8008f08:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008f0a:	f107 0310 	add.w	r3, r7, #16
 8008f0e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008f12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008f16:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8008f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008f28:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008f2c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008f30:	7812      	ldrb	r2, [r2, #0]
 8008f32:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008f34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008f38:	3301      	adds	r3, #1
 8008f3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8008f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008f42:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008f46:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008f4a:	7812      	ldrb	r2, [r2, #0]
 8008f4c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008f4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008f52:	3301      	adds	r3, #1
 8008f54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8008f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008f5c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008f60:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8008f64:	7812      	ldrb	r2, [r2, #0]
 8008f66:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008f68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8008f72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008f76:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008f7a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8008f7e:	7812      	ldrb	r2, [r2, #0]
 8008f80:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008f82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008f86:	3301      	adds	r3, #1
 8008f88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8008f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008f90:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8008f94:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008f96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8008fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008fa4:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8008fa8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008faa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008fae:	3301      	adds	r3, #1
 8008fb0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008fb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008fb8:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8008fbc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008fbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008fcc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008fd0:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008fd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008fd8:	3304      	adds	r3, #4
 8008fda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8008fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008fe2:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8008fe6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008fe8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008fec:	3301      	adds	r3, #1
 8008fee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008ff2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ff6:	2218      	movs	r2, #24
 8008ff8:	2100      	movs	r1, #0
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f000 ff2d 	bl	8009e5a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009000:	233f      	movs	r3, #63	@ 0x3f
 8009002:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8009006:	2386      	movs	r3, #134	@ 0x86
 8009008:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800900c:	f107 0310 	add.w	r3, r7, #16
 8009010:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009014:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009018:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800901c:	f107 030f 	add.w	r3, r7, #15
 8009020:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009024:	2301      	movs	r3, #1
 8009026:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800902a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800902e:	2100      	movs	r1, #0
 8009030:	4618      	mov	r0, r3
 8009032:	f001 f99b 	bl	800a36c <hci_send_req>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	da01      	bge.n	8009040 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800903c:	23ff      	movs	r3, #255	@ 0xff
 800903e:	e004      	b.n	800904a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8009040:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009044:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009048:	781b      	ldrb	r3, [r3, #0]
}
 800904a:	4618      	mov	r0, r3
 800904c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009050:	46bd      	mov	sp, r7
 8009052:	bdb0      	pop	{r4, r5, r7, pc}

08009054 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b0cc      	sub	sp, #304	@ 0x130
 8009058:	af00      	add	r7, sp, #0
 800905a:	4602      	mov	r2, r0
 800905c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009060:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009064:	6019      	str	r1, [r3, #0]
 8009066:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800906a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800906e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8009070:	f107 0310 	add.w	r3, r7, #16
 8009074:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009078:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800907c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009080:	2200      	movs	r2, #0
 8009082:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800908a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800908e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009092:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009096:	8812      	ldrh	r2, [r2, #0]
 8009098:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800909a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800909e:	3302      	adds	r3, #2
 80090a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 80090a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80090a8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80090ac:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80090b0:	6812      	ldr	r2, [r2, #0]
 80090b2:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80090b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80090ba:	3304      	adds	r3, #4
 80090bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80090c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090c4:	2218      	movs	r2, #24
 80090c6:	2100      	movs	r1, #0
 80090c8:	4618      	mov	r0, r3
 80090ca:	f000 fec6 	bl	8009e5a <Osal_MemSet>
  rq.ogf = 0x3f;
 80090ce:	233f      	movs	r3, #63	@ 0x3f
 80090d0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 80090d4:	2388      	movs	r3, #136	@ 0x88
 80090d6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80090da:	f107 0310 	add.w	r3, r7, #16
 80090de:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80090e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80090e6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80090ea:	f107 030f 	add.w	r3, r7, #15
 80090ee:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80090f2:	2301      	movs	r3, #1
 80090f4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80090f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090fc:	2100      	movs	r1, #0
 80090fe:	4618      	mov	r0, r3
 8009100:	f001 f934 	bl	800a36c <hci_send_req>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	da01      	bge.n	800910e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800910a:	23ff      	movs	r3, #255	@ 0xff
 800910c:	e004      	b.n	8009118 <aci_gap_pass_key_resp+0xc4>
  return status;
 800910e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009112:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009116:	781b      	ldrb	r3, [r3, #0]
}
 8009118:	4618      	mov	r0, r3
 800911a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8009122:	b590      	push	{r4, r7, lr}
 8009124:	b0cd      	sub	sp, #308	@ 0x134
 8009126:	af00      	add	r7, sp, #0
 8009128:	4604      	mov	r4, r0
 800912a:	4608      	mov	r0, r1
 800912c:	4611      	mov	r1, r2
 800912e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009132:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8009136:	6013      	str	r3, [r2, #0]
 8009138:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800913c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009140:	4622      	mov	r2, r4
 8009142:	701a      	strb	r2, [r3, #0]
 8009144:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009148:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800914c:	4602      	mov	r2, r0
 800914e:	701a      	strb	r2, [r3, #0]
 8009150:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009154:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009158:	460a      	mov	r2, r1
 800915a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800915c:	f107 0310 	add.w	r3, r7, #16
 8009160:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009164:	f107 0308 	add.w	r3, r7, #8
 8009168:	2207      	movs	r2, #7
 800916a:	2100      	movs	r1, #0
 800916c:	4618      	mov	r0, r3
 800916e:	f000 fe74 	bl	8009e5a <Osal_MemSet>
  int index_input = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8009178:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800917c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009180:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009184:	7812      	ldrb	r2, [r2, #0]
 8009186:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009188:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800918c:	3301      	adds	r3, #1
 800918e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8009192:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009196:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800919a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800919e:	7812      	ldrb	r2, [r2, #0]
 80091a0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80091a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80091a6:	3301      	adds	r3, #1
 80091a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 80091ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80091b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80091b4:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80091b8:	7812      	ldrb	r2, [r2, #0]
 80091ba:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80091bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80091c0:	3301      	adds	r3, #1
 80091c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80091c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80091ca:	2218      	movs	r2, #24
 80091cc:	2100      	movs	r1, #0
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 fe43 	bl	8009e5a <Osal_MemSet>
  rq.ogf = 0x3f;
 80091d4:	233f      	movs	r3, #63	@ 0x3f
 80091d6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 80091da:	238a      	movs	r3, #138	@ 0x8a
 80091dc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80091e0:	f107 0310 	add.w	r3, r7, #16
 80091e4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80091e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80091ec:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80091f0:	f107 0308 	add.w	r3, r7, #8
 80091f4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80091f8:	2307      	movs	r3, #7
 80091fa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80091fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009202:	2100      	movs	r1, #0
 8009204:	4618      	mov	r0, r3
 8009206:	f001 f8b1 	bl	800a36c <hci_send_req>
 800920a:	4603      	mov	r3, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	da01      	bge.n	8009214 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8009210:	23ff      	movs	r3, #255	@ 0xff
 8009212:	e02e      	b.n	8009272 <aci_gap_init+0x150>
  if ( resp.Status )
 8009214:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009218:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d005      	beq.n	800922e <aci_gap_init+0x10c>
    return resp.Status;
 8009222:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009226:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	e021      	b.n	8009272 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800922e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009232:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009236:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800923a:	b29a      	uxth	r2, r3
 800923c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009240:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8009248:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800924c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009250:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009254:	b29a      	uxth	r2, r3
 8009256:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800925a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800925c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009260:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009264:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009268:	b29a      	uxth	r2, r3
 800926a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800926e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8009278:	46bd      	mov	sp, r7
 800927a:	bd90      	pop	{r4, r7, pc}

0800927c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b0cc      	sub	sp, #304	@ 0x130
 8009280:	af00      	add	r7, sp, #0
 8009282:	4602      	mov	r2, r0
 8009284:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009288:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800928c:	6019      	str	r1, [r3, #0]
 800928e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009292:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009296:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009298:	f107 0310 	add.w	r3, r7, #16
 800929c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80092a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80092a4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80092a8:	2200      	movs	r2, #0
 80092aa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80092ac:	2300      	movs	r3, #0
 80092ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 80092b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80092b6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80092ba:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80092be:	7812      	ldrb	r2, [r2, #0]
 80092c0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80092c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80092c6:	3301      	adds	r3, #1
 80092c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80092cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80092d0:	1c58      	adds	r0, r3, #1
 80092d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80092d6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80092da:	781a      	ldrb	r2, [r3, #0]
 80092dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80092e0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80092e4:	6819      	ldr	r1, [r3, #0]
 80092e6:	f000 fda8 	bl	8009e3a <Osal_MemCpy>
  index_input += AdvDataLen;
 80092ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80092ee:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80092f8:	4413      	add	r3, r2
 80092fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80092fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009302:	2218      	movs	r2, #24
 8009304:	2100      	movs	r1, #0
 8009306:	4618      	mov	r0, r3
 8009308:	f000 fda7 	bl	8009e5a <Osal_MemSet>
  rq.ogf = 0x3f;
 800930c:	233f      	movs	r3, #63	@ 0x3f
 800930e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8009312:	238e      	movs	r3, #142	@ 0x8e
 8009314:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009318:	f107 0310 	add.w	r3, r7, #16
 800931c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009320:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009324:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009328:	f107 030f 	add.w	r3, r7, #15
 800932c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009330:	2301      	movs	r3, #1
 8009332:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009336:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800933a:	2100      	movs	r1, #0
 800933c:	4618      	mov	r0, r3
 800933e:	f001 f815 	bl	800a36c <hci_send_req>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	da01      	bge.n	800934c <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8009348:	23ff      	movs	r3, #255	@ 0xff
 800934a:	e004      	b.n	8009356 <aci_gap_update_adv_data+0xda>
  return status;
 800934c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009350:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009354:	781b      	ldrb	r3, [r3, #0]
}
 8009356:	4618      	mov	r0, r3
 8009358:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b088      	sub	sp, #32
 8009364:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009366:	2300      	movs	r3, #0
 8009368:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800936a:	f107 0308 	add.w	r3, r7, #8
 800936e:	2218      	movs	r2, #24
 8009370:	2100      	movs	r1, #0
 8009372:	4618      	mov	r0, r3
 8009374:	f000 fd71 	bl	8009e5a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009378:	233f      	movs	r3, #63	@ 0x3f
 800937a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800937c:	2392      	movs	r3, #146	@ 0x92
 800937e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009380:	1dfb      	adds	r3, r7, #7
 8009382:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009384:	2301      	movs	r3, #1
 8009386:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009388:	f107 0308 	add.w	r3, r7, #8
 800938c:	2100      	movs	r1, #0
 800938e:	4618      	mov	r0, r3
 8009390:	f000 ffec 	bl	800a36c <hci_send_req>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	da01      	bge.n	800939e <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800939a:	23ff      	movs	r3, #255	@ 0xff
 800939c:	e000      	b.n	80093a0 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800939e:	79fb      	ldrb	r3, [r7, #7]
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3720      	adds	r7, #32
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b0cc      	sub	sp, #304	@ 0x130
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	4602      	mov	r2, r0
 80093b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80093b4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80093b8:	801a      	strh	r2, [r3, #0]
 80093ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80093be:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80093c2:	460a      	mov	r2, r1
 80093c4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80093c6:	f107 0310 	add.w	r3, r7, #16
 80093ca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80093ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80093d2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80093d6:	2200      	movs	r2, #0
 80093d8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80093da:	2300      	movs	r3, #0
 80093dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80093e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80093e4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80093e8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80093ec:	8812      	ldrh	r2, [r2, #0]
 80093ee:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80093f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80093f4:	3302      	adds	r3, #2
 80093f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80093fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80093fe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009402:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009406:	7812      	ldrb	r2, [r2, #0]
 8009408:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800940a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800940e:	3301      	adds	r3, #1
 8009410:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009414:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009418:	2218      	movs	r2, #24
 800941a:	2100      	movs	r1, #0
 800941c:	4618      	mov	r0, r3
 800941e:	f000 fd1c 	bl	8009e5a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009422:	233f      	movs	r3, #63	@ 0x3f
 8009424:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8009428:	23a5      	movs	r3, #165	@ 0xa5
 800942a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800942e:	f107 0310 	add.w	r3, r7, #16
 8009432:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009436:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800943a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800943e:	f107 030f 	add.w	r3, r7, #15
 8009442:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009446:	2301      	movs	r3, #1
 8009448:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800944c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009450:	2100      	movs	r1, #0
 8009452:	4618      	mov	r0, r3
 8009454:	f000 ff8a 	bl	800a36c <hci_send_req>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	da01      	bge.n	8009462 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800945e:	23ff      	movs	r3, #255	@ 0xff
 8009460:	e004      	b.n	800946c <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8009462:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009466:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800946a:	781b      	ldrb	r3, [r3, #0]
}
 800946c:	4618      	mov	r0, r3
 800946e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <aci_gatt_init>:
 */

#include "auto/ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b088      	sub	sp, #32
 800947a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800947c:	2300      	movs	r3, #0
 800947e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009480:	f107 0308 	add.w	r3, r7, #8
 8009484:	2218      	movs	r2, #24
 8009486:	2100      	movs	r1, #0
 8009488:	4618      	mov	r0, r3
 800948a:	f000 fce6 	bl	8009e5a <Osal_MemSet>
  rq.ogf = 0x3f;
 800948e:	233f      	movs	r3, #63	@ 0x3f
 8009490:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009492:	f240 1301 	movw	r3, #257	@ 0x101
 8009496:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009498:	1dfb      	adds	r3, r7, #7
 800949a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800949c:	2301      	movs	r3, #1
 800949e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80094a0:	f107 0308 	add.w	r3, r7, #8
 80094a4:	2100      	movs	r1, #0
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 ff60 	bl	800a36c <hci_send_req>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	da01      	bge.n	80094b6 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80094b2:	23ff      	movs	r3, #255	@ 0xff
 80094b4:	e000      	b.n	80094b8 <aci_gatt_init+0x42>
  return status;
 80094b6:	79fb      	ldrb	r3, [r7, #7]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3720      	adds	r7, #32
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80094c0:	b590      	push	{r4, r7, lr}
 80094c2:	b0cf      	sub	sp, #316	@ 0x13c
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	4604      	mov	r4, r0
 80094c8:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80094cc:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 80094d0:	6001      	str	r1, [r0, #0]
 80094d2:	4610      	mov	r0, r2
 80094d4:	4619      	mov	r1, r3
 80094d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80094da:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80094de:	4622      	mov	r2, r4
 80094e0:	701a      	strb	r2, [r3, #0]
 80094e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80094e6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80094ea:	4602      	mov	r2, r0
 80094ec:	701a      	strb	r2, [r3, #0]
 80094ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80094f2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80094f6:	460a      	mov	r2, r1
 80094f8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80094fa:	f107 0310 	add.w	r3, r7, #16
 80094fe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8009502:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009506:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d00a      	beq.n	8009526 <aci_gatt_add_service+0x66>
 8009510:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009514:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	2b02      	cmp	r3, #2
 800951c:	d101      	bne.n	8009522 <aci_gatt_add_service+0x62>
 800951e:	2311      	movs	r3, #17
 8009520:	e002      	b.n	8009528 <aci_gatt_add_service+0x68>
 8009522:	2301      	movs	r3, #1
 8009524:	e000      	b.n	8009528 <aci_gatt_add_service+0x68>
 8009526:	2303      	movs	r3, #3
 8009528:	f107 0210 	add.w	r2, r7, #16
 800952c:	4413      	add	r3, r2
 800952e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009532:	f107 030c 	add.w	r3, r7, #12
 8009536:	2203      	movs	r2, #3
 8009538:	2100      	movs	r1, #0
 800953a:	4618      	mov	r0, r3
 800953c:	f000 fc8d 	bl	8009e5a <Osal_MemSet>
  int index_input = 0;
 8009540:	2300      	movs	r3, #0
 8009542:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8009546:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800954a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800954e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8009552:	7812      	ldrb	r2, [r2, #0]
 8009554:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009556:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800955a:	3301      	adds	r3, #1
 800955c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8009560:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009564:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d002      	beq.n	8009574 <aci_gatt_add_service+0xb4>
 800956e:	2b02      	cmp	r3, #2
 8009570:	d004      	beq.n	800957c <aci_gatt_add_service+0xbc>
 8009572:	e007      	b.n	8009584 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8009574:	2302      	movs	r3, #2
 8009576:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800957a:	e005      	b.n	8009588 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800957c:	2310      	movs	r3, #16
 800957e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8009582:	e001      	b.n	8009588 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8009584:	2397      	movs	r3, #151	@ 0x97
 8009586:	e06c      	b.n	8009662 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8009588:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800958c:	1c58      	adds	r0, r3, #1
 800958e:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8009592:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009596:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800959a:	6819      	ldr	r1, [r3, #0]
 800959c:	f000 fc4d 	bl	8009e3a <Osal_MemCpy>
    index_input += size;
 80095a0:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80095a4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80095a8:	4413      	add	r3, r2
 80095aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 80095ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80095b2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80095b6:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80095ba:	7812      	ldrb	r2, [r2, #0]
 80095bc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80095be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80095c2:	3301      	adds	r3, #1
 80095c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80095c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80095cc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80095d0:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80095d4:	7812      	ldrb	r2, [r2, #0]
 80095d6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80095d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80095dc:	3301      	adds	r3, #1
 80095de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80095e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095e6:	2218      	movs	r2, #24
 80095e8:	2100      	movs	r1, #0
 80095ea:	4618      	mov	r0, r3
 80095ec:	f000 fc35 	bl	8009e5a <Osal_MemSet>
  rq.ogf = 0x3f;
 80095f0:	233f      	movs	r3, #63	@ 0x3f
 80095f2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 80095f6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80095fa:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80095fe:	f107 0310 	add.w	r3, r7, #16
 8009602:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009606:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800960a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800960e:	f107 030c 	add.w	r3, r7, #12
 8009612:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8009616:	2303      	movs	r3, #3
 8009618:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800961c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009620:	2100      	movs	r1, #0
 8009622:	4618      	mov	r0, r3
 8009624:	f000 fea2 	bl	800a36c <hci_send_req>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	da01      	bge.n	8009632 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800962e:	23ff      	movs	r3, #255	@ 0xff
 8009630:	e017      	b.n	8009662 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8009632:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009636:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d005      	beq.n	800964c <aci_gatt_add_service+0x18c>
    return resp.Status;
 8009640:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009644:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	e00a      	b.n	8009662 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800964c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009650:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009654:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009658:	b29a      	uxth	r2, r3
 800965a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800965e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8009668:	46bd      	mov	sp, r7
 800966a:	bd90      	pop	{r4, r7, pc}

0800966c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800966c:	b590      	push	{r4, r7, lr}
 800966e:	b0d1      	sub	sp, #324	@ 0x144
 8009670:	af00      	add	r7, sp, #0
 8009672:	4604      	mov	r4, r0
 8009674:	4608      	mov	r0, r1
 8009676:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800967a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800967e:	600a      	str	r2, [r1, #0]
 8009680:	4619      	mov	r1, r3
 8009682:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009686:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800968a:	4622      	mov	r2, r4
 800968c:	801a      	strh	r2, [r3, #0]
 800968e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009692:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009696:	4602      	mov	r2, r0
 8009698:	701a      	strb	r2, [r3, #0]
 800969a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800969e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 80096a2:	460a      	mov	r2, r1
 80096a4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80096a6:	f107 0318 	add.w	r3, r7, #24
 80096aa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80096ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80096b2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d00a      	beq.n	80096d2 <aci_gatt_add_char+0x66>
 80096bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80096c0:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d101      	bne.n	80096ce <aci_gatt_add_char+0x62>
 80096ca:	2313      	movs	r3, #19
 80096cc:	e002      	b.n	80096d4 <aci_gatt_add_char+0x68>
 80096ce:	2303      	movs	r3, #3
 80096d0:	e000      	b.n	80096d4 <aci_gatt_add_char+0x68>
 80096d2:	2305      	movs	r3, #5
 80096d4:	f107 0218 	add.w	r2, r7, #24
 80096d8:	4413      	add	r3, r2
 80096da:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80096de:	f107 0314 	add.w	r3, r7, #20
 80096e2:	2203      	movs	r2, #3
 80096e4:	2100      	movs	r1, #0
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 fbb7 	bl	8009e5a <Osal_MemSet>
  int index_input = 0;
 80096ec:	2300      	movs	r3, #0
 80096ee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 80096f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80096f6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80096fa:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80096fe:	8812      	ldrh	r2, [r2, #0]
 8009700:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009702:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009706:	3302      	adds	r3, #2
 8009708:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800970c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009710:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009714:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8009718:	7812      	ldrb	r2, [r2, #0]
 800971a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800971c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009720:	3301      	adds	r3, #1
 8009722:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8009726:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800972a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	2b01      	cmp	r3, #1
 8009732:	d002      	beq.n	800973a <aci_gatt_add_char+0xce>
 8009734:	2b02      	cmp	r3, #2
 8009736:	d004      	beq.n	8009742 <aci_gatt_add_char+0xd6>
 8009738:	e007      	b.n	800974a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800973a:	2302      	movs	r3, #2
 800973c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8009740:	e005      	b.n	800974e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8009742:	2310      	movs	r3, #16
 8009744:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8009748:	e001      	b.n	800974e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800974a:	2397      	movs	r3, #151	@ 0x97
 800974c:	e091      	b.n	8009872 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800974e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009752:	1cd8      	adds	r0, r3, #3
 8009754:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8009758:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800975c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009760:	6819      	ldr	r1, [r3, #0]
 8009762:	f000 fb6a 	bl	8009e3a <Osal_MemCpy>
    index_input += size;
 8009766:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800976a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800976e:	4413      	add	r3, r2
 8009770:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8009774:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009778:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800977c:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8009780:	8812      	ldrh	r2, [r2, #0]
 8009782:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009784:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009788:	3302      	adds	r3, #2
 800978a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800978e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009792:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8009796:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009798:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800979c:	3301      	adds	r3, #1
 800979e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80097a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80097a6:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80097aa:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80097ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80097b0:	3301      	adds	r3, #1
 80097b2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80097b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80097ba:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 80097be:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80097c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80097c4:	3301      	adds	r3, #1
 80097c6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80097ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80097ce:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 80097d2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80097d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80097d8:	3301      	adds	r3, #1
 80097da:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80097de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80097e2:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 80097e6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80097e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80097ec:	3301      	adds	r3, #1
 80097ee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80097f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80097f6:	2218      	movs	r2, #24
 80097f8:	2100      	movs	r1, #0
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 fb2d 	bl	8009e5a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009800:	233f      	movs	r3, #63	@ 0x3f
 8009802:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8009806:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800980a:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800980e:	f107 0318 	add.w	r3, r7, #24
 8009812:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8009816:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800981a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800981e:	f107 0314 	add.w	r3, r7, #20
 8009822:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8009826:	2303      	movs	r3, #3
 8009828:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800982c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009830:	2100      	movs	r1, #0
 8009832:	4618      	mov	r0, r3
 8009834:	f000 fd9a 	bl	800a36c <hci_send_req>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	da01      	bge.n	8009842 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800983e:	23ff      	movs	r3, #255	@ 0xff
 8009840:	e017      	b.n	8009872 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8009842:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009846:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d005      	beq.n	800985c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8009850:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009854:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	e00a      	b.n	8009872 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800985c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009860:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009864:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009868:	b29a      	uxth	r2, r3
 800986a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800986e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8009878:	46bd      	mov	sp, r7
 800987a:	bd90      	pop	{r4, r7, pc}

0800987c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800987c:	b5b0      	push	{r4, r5, r7, lr}
 800987e:	b0cc      	sub	sp, #304	@ 0x130
 8009880:	af00      	add	r7, sp, #0
 8009882:	4605      	mov	r5, r0
 8009884:	460c      	mov	r4, r1
 8009886:	4610      	mov	r0, r2
 8009888:	4619      	mov	r1, r3
 800988a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800988e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009892:	462a      	mov	r2, r5
 8009894:	801a      	strh	r2, [r3, #0]
 8009896:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800989a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800989e:	4622      	mov	r2, r4
 80098a0:	801a      	strh	r2, [r3, #0]
 80098a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80098a6:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80098aa:	4602      	mov	r2, r0
 80098ac:	701a      	strb	r2, [r3, #0]
 80098ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80098b2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80098b6:	460a      	mov	r2, r1
 80098b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80098ba:	f107 0310 	add.w	r3, r7, #16
 80098be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80098c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80098c6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80098ca:	2200      	movs	r2, #0
 80098cc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80098ce:	2300      	movs	r3, #0
 80098d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 80098d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80098d8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80098dc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80098e0:	8812      	ldrh	r2, [r2, #0]
 80098e2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80098e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80098e8:	3302      	adds	r3, #2
 80098ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 80098ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80098f2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80098f6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80098fa:	8812      	ldrh	r2, [r2, #0]
 80098fc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80098fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009902:	3302      	adds	r3, #2
 8009904:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8009908:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800990c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009910:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8009914:	7812      	ldrb	r2, [r2, #0]
 8009916:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009918:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800991c:	3301      	adds	r3, #1
 800991e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8009922:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009926:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800992a:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800992e:	7812      	ldrb	r2, [r2, #0]
 8009930:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009932:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009936:	3301      	adds	r3, #1
 8009938:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800993c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009940:	1d98      	adds	r0, r3, #6
 8009942:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009946:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	461a      	mov	r2, r3
 800994e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8009952:	f000 fa72 	bl	8009e3a <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009956:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800995a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009964:	4413      	add	r3, r2
 8009966:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800996a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800996e:	2218      	movs	r2, #24
 8009970:	2100      	movs	r1, #0
 8009972:	4618      	mov	r0, r3
 8009974:	f000 fa71 	bl	8009e5a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009978:	233f      	movs	r3, #63	@ 0x3f
 800997a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800997e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8009982:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009986:	f107 0310 	add.w	r3, r7, #16
 800998a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800998e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009992:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009996:	f107 030f 	add.w	r3, r7, #15
 800999a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800999e:	2301      	movs	r3, #1
 80099a0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80099a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099a8:	2100      	movs	r1, #0
 80099aa:	4618      	mov	r0, r3
 80099ac:	f000 fcde 	bl	800a36c <hci_send_req>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	da01      	bge.n	80099ba <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80099b6:	23ff      	movs	r3, #255	@ 0xff
 80099b8:	e004      	b.n	80099c4 <aci_gatt_update_char_value+0x148>
  return status;
 80099ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099be:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80099c2:	781b      	ldrb	r3, [r3, #0]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bdb0      	pop	{r4, r5, r7, pc}

080099ce <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b0cc      	sub	sp, #304	@ 0x130
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	4602      	mov	r2, r0
 80099d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099da:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80099de:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 80099e0:	f107 0310 	add.w	r3, r7, #16
 80099e4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80099e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099ec:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80099f0:	2200      	movs	r2, #0
 80099f2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80099f4:	2300      	movs	r3, #0
 80099f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80099fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80099fe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009a02:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009a06:	8812      	ldrh	r2, [r2, #0]
 8009a08:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009a0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a0e:	3302      	adds	r3, #2
 8009a10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009a14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a18:	2218      	movs	r2, #24
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 fa1c 	bl	8009e5a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009a22:	233f      	movs	r3, #63	@ 0x3f
 8009a24:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8009a28:	f240 1325 	movw	r3, #293	@ 0x125
 8009a2c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009a30:	f107 0310 	add.w	r3, r7, #16
 8009a34:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009a38:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a3c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009a40:	f107 030f 	add.w	r3, r7, #15
 8009a44:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009a4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a52:	2100      	movs	r1, #0
 8009a54:	4618      	mov	r0, r3
 8009a56:	f000 fc89 	bl	800a36c <hci_send_req>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	da01      	bge.n	8009a64 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8009a60:	23ff      	movs	r3, #255	@ 0xff
 8009a62:	e004      	b.n	8009a6e <aci_gatt_confirm_indication+0xa0>
  return status;
 8009a64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a68:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009a6c:	781b      	ldrb	r3, [r3, #0]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <aci_hal_write_config_data>:
#include "auto/ble_hal_aci.h"

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b0cc      	sub	sp, #304	@ 0x130
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a82:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009a86:	601a      	str	r2, [r3, #0]
 8009a88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a8c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009a90:	4602      	mov	r2, r0
 8009a92:	701a      	strb	r2, [r3, #0]
 8009a94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a98:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009a9c:	460a      	mov	r2, r1
 8009a9e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009aa0:	f107 0310 	add.w	r3, r7, #16
 8009aa4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009aa8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009aac:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8009aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009abe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009ac2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009ac6:	7812      	ldrb	r2, [r2, #0]
 8009ac8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009aca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009ace:	3301      	adds	r3, #1
 8009ad0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8009ad4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009ad8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009adc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009ae0:	7812      	ldrb	r2, [r2, #0]
 8009ae2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009ae4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009ae8:	3301      	adds	r3, #1
 8009aea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8009aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009af2:	1c98      	adds	r0, r3, #2
 8009af4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009af8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009afc:	781a      	ldrb	r2, [r3, #0]
 8009afe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b02:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009b06:	6819      	ldr	r1, [r3, #0]
 8009b08:	f000 f997 	bl	8009e3a <Osal_MemCpy>
  index_input += Length;
 8009b0c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b10:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009b1a:	4413      	add	r3, r2
 8009b1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009b20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b24:	2218      	movs	r2, #24
 8009b26:	2100      	movs	r1, #0
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f000 f996 	bl	8009e5a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009b2e:	233f      	movs	r3, #63	@ 0x3f
 8009b30:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8009b34:	230c      	movs	r3, #12
 8009b36:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009b3a:	f107 0310 	add.w	r3, r7, #16
 8009b3e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009b42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b46:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009b4a:	f107 030f 	add.w	r3, r7, #15
 8009b4e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009b52:	2301      	movs	r3, #1
 8009b54:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f000 fc04 	bl	800a36c <hci_send_req>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	da01      	bge.n	8009b6e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8009b6a:	23ff      	movs	r3, #255	@ 0xff
 8009b6c:	e004      	b.n	8009b78 <aci_hal_write_config_data+0x100>
  return status;
 8009b6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b72:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009b76:	781b      	ldrb	r3, [r3, #0]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b0cc      	sub	sp, #304	@ 0x130
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	4602      	mov	r2, r0
 8009b8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b8e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009b92:	701a      	strb	r2, [r3, #0]
 8009b94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b98:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009b9c:	460a      	mov	r2, r1
 8009b9e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009ba0:	f107 0310 	add.w	r3, r7, #16
 8009ba4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009ba8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009bac:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8009bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009bbe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009bc2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009bc6:	7812      	ldrb	r2, [r2, #0]
 8009bc8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009bca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009bce:	3301      	adds	r3, #1
 8009bd0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8009bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009bd8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009bdc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009be0:	7812      	ldrb	r2, [r2, #0]
 8009be2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009be4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009be8:	3301      	adds	r3, #1
 8009bea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009bee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bf2:	2218      	movs	r2, #24
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 f92f 	bl	8009e5a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009bfc:	233f      	movs	r3, #63	@ 0x3f
 8009bfe:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8009c02:	230f      	movs	r3, #15
 8009c04:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009c08:	f107 0310 	add.w	r3, r7, #16
 8009c0c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009c10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c14:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009c18:	f107 030f 	add.w	r3, r7, #15
 8009c1c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009c20:	2301      	movs	r3, #1
 8009c22:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009c26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c2a:	2100      	movs	r1, #0
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f000 fb9d 	bl	800a36c <hci_send_req>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	da01      	bge.n	8009c3c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8009c38:	23ff      	movs	r3, #255	@ 0xff
 8009c3a:	e004      	b.n	8009c46 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8009c3c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c40:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009c44:	781b      	ldrb	r3, [r3, #0]
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b0cc      	sub	sp, #304	@ 0x130
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	4602      	mov	r2, r0
 8009c58:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c5c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009c60:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8009c62:	f107 0310 	add.w	r3, r7, #16
 8009c66:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009c6a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c6e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009c72:	2200      	movs	r2, #0
 8009c74:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009c76:	2300      	movs	r3, #0
 8009c78:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8009c7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009c80:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009c84:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009c88:	8812      	ldrh	r2, [r2, #0]
 8009c8a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009c8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c90:	3302      	adds	r3, #2
 8009c92:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009c96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c9a:	2218      	movs	r2, #24
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f000 f8db 	bl	8009e5a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ca4:	233f      	movs	r3, #63	@ 0x3f
 8009ca6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8009caa:	2318      	movs	r3, #24
 8009cac:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009cb0:	f107 0310 	add.w	r3, r7, #16
 8009cb4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009cb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009cbc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009cc0:	f107 030f 	add.w	r3, r7, #15
 8009cc4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009cce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f000 fb49 	bl	800a36c <hci_send_req>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	da01      	bge.n	8009ce4 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8009ce0:	23ff      	movs	r3, #255	@ 0xff
 8009ce2:	e004      	b.n	8009cee <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8009ce4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ce8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009cec:	781b      	ldrb	r3, [r3, #0]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b088      	sub	sp, #32
 8009cfc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009d02:	f107 0308 	add.w	r3, r7, #8
 8009d06:	2218      	movs	r2, #24
 8009d08:	2100      	movs	r1, #0
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f000 f8a5 	bl	8009e5a <Osal_MemSet>
  rq.ogf = 0x03;
 8009d10:	2303      	movs	r3, #3
 8009d12:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8009d14:	2303      	movs	r3, #3
 8009d16:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009d18:	1dfb      	adds	r3, r7, #7
 8009d1a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009d20:	f107 0308 	add.w	r3, r7, #8
 8009d24:	2100      	movs	r1, #0
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 fb20 	bl	800a36c <hci_send_req>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	da01      	bge.n	8009d36 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009d32:	23ff      	movs	r3, #255	@ 0xff
 8009d34:	e000      	b.n	8009d38 <hci_reset+0x40>
  return status;
 8009d36:	79fb      	ldrb	r3, [r7, #7]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3720      	adds	r7, #32
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8009d40:	b590      	push	{r4, r7, lr}
 8009d42:	b0cd      	sub	sp, #308	@ 0x134
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	4604      	mov	r4, r0
 8009d48:	4608      	mov	r0, r1
 8009d4a:	4611      	mov	r1, r2
 8009d4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d50:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009d54:	4622      	mov	r2, r4
 8009d56:	701a      	strb	r2, [r3, #0]
 8009d58:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d5c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009d60:	4602      	mov	r2, r0
 8009d62:	701a      	strb	r2, [r3, #0]
 8009d64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d68:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009d6c:	460a      	mov	r2, r1
 8009d6e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8009d70:	f107 0310 	add.w	r3, r7, #16
 8009d74:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009d78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d7c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009d80:	2200      	movs	r2, #0
 8009d82:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009d84:	2300      	movs	r3, #0
 8009d86:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8009d8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009d8e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009d92:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009d96:	7812      	ldrb	r2, [r2, #0]
 8009d98:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009d9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009d9e:	3301      	adds	r3, #1
 8009da0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8009da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009da8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009dac:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009db0:	7812      	ldrb	r2, [r2, #0]
 8009db2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009db4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009db8:	3301      	adds	r3, #1
 8009dba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8009dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009dc2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009dc6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009dca:	7812      	ldrb	r2, [r2, #0]
 8009dcc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009dce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009dd8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ddc:	2218      	movs	r2, #24
 8009dde:	2100      	movs	r1, #0
 8009de0:	4618      	mov	r0, r3
 8009de2:	f000 f83a 	bl	8009e5a <Osal_MemSet>
  rq.ogf = 0x08;
 8009de6:	2308      	movs	r3, #8
 8009de8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8009dec:	2331      	movs	r3, #49	@ 0x31
 8009dee:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009df2:	f107 0310 	add.w	r3, r7, #16
 8009df6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009dfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009dfe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009e02:	f107 030f 	add.w	r3, r7, #15
 8009e06:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e14:	2100      	movs	r1, #0
 8009e16:	4618      	mov	r0, r3
 8009e18:	f000 faa8 	bl	800a36c <hci_send_req>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	da01      	bge.n	8009e26 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8009e22:	23ff      	movs	r3, #255	@ 0xff
 8009e24:	e004      	b.n	8009e30 <hci_le_set_default_phy+0xf0>
  return status;
 8009e26:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e2a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009e2e:	781b      	ldrb	r3, [r3, #0]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd90      	pop	{r4, r7, pc}

08009e3a <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	60f8      	str	r0, [r7, #12]
 8009e42:	60b9      	str	r1, [r7, #8]
 8009e44:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	68b9      	ldr	r1, [r7, #8]
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f003 fbe7 	bl	800d61e <memcpy>
 8009e50:	4603      	mov	r3, r0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b084      	sub	sp, #16
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	60f8      	str	r0, [r7, #12]
 8009e62:	60b9      	str	r1, [r7, #8]
 8009e64:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	68b9      	ldr	r1, [r7, #8]
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f003 fb5c 	bl	800d528 <memset>
 8009e70:	4603      	mov	r3, r0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8009e7a:	b480      	push	{r7}
 8009e7c:	af00      	add	r7, sp, #0
  return;
 8009e7e:	bf00      	nop
}
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8009e88:	b480      	push	{r7}
 8009e8a:	af00      	add	r7, sp, #0
  return;
 8009e8c:	bf00      	nop
}
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8009e96:	b480      	push	{r7}
 8009e98:	af00      	add	r7, sp, #0
  return;
 8009e9a:	bf00      	nop
}
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	af00      	add	r7, sp, #0
  return;
 8009ea8:	bf00      	nop
}
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr

08009eb2 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8009eb2:	b480      	push	{r7}
 8009eb4:	af00      	add	r7, sp, #0
  return;
 8009eb6:	bf00      	nop
}
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	af00      	add	r7, sp, #0
  return;
 8009ec4:	bf00      	nop
}
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr

08009ece <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8009ece:	b480      	push	{r7}
 8009ed0:	af00      	add	r7, sp, #0
  return;
 8009ed2:	bf00      	nop
}
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8009edc:	b480      	push	{r7}
 8009ede:	af00      	add	r7, sp, #0
  return;
 8009ee0:	bf00      	nop
}
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8009eea:	b480      	push	{r7}
 8009eec:	af00      	add	r7, sp, #0
  return;
 8009eee:	bf00      	nop
}
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8009ef8:	b480      	push	{r7}
 8009efa:	af00      	add	r7, sp, #0
  return;
 8009efc:	bf00      	nop
}
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr

08009f06 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8009f06:	b480      	push	{r7}
 8009f08:	af00      	add	r7, sp, #0
  return;
 8009f0a:	bf00      	nop
}
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8009f14:	b480      	push	{r7}
 8009f16:	af00      	add	r7, sp, #0
  return;
 8009f18:	bf00      	nop
}
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr

08009f22 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8009f22:	b480      	push	{r7}
 8009f24:	af00      	add	r7, sp, #0
  return;
 8009f26:	bf00      	nop
}
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8009f30:	b480      	push	{r7}
 8009f32:	af00      	add	r7, sp, #0
  return;
 8009f34:	bf00      	nop
}
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8009f3e:	b480      	push	{r7}
 8009f40:	af00      	add	r7, sp, #0
  return;
 8009f42:	bf00      	nop
}
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	af00      	add	r7, sp, #0
  return;
 8009f50:	bf00      	nop
}
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr

08009f5a <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8009f5a:	b480      	push	{r7}
 8009f5c:	af00      	add	r7, sp, #0
  return;
 8009f5e:	bf00      	nop
}
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009f6c:	4b04      	ldr	r3, [pc, #16]	@ (8009f80 <SVCCTL_Init+0x18>)
 8009f6e:	2200      	movs	r2, #0
 8009f70:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8009f72:	4b04      	ldr	r3, [pc, #16]	@ (8009f84 <SVCCTL_Init+0x1c>)
 8009f74:	2200      	movs	r2, #0
 8009f76:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8009f78:	f000 f806 	bl	8009f88 <SVCCTL_SvcInit>

  return;
 8009f7c:	bf00      	nop
}
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	20000490 	.word	0x20000490
 8009f84:	200004b0 	.word	0x200004b0

08009f88 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	af00      	add	r7, sp, #0
  BAS_Init();
 8009f8c:	f7ff ff75 	bl	8009e7a <BAS_Init>

  BLS_Init();
 8009f90:	f7ff ff7a 	bl	8009e88 <BLS_Init>

  CRS_STM_Init();
 8009f94:	f7ff ff7f 	bl	8009e96 <CRS_STM_Init>

  DIS_Init();
 8009f98:	f7ff ff84 	bl	8009ea4 <DIS_Init>

  EDS_STM_Init();
 8009f9c:	f7ff ff89 	bl	8009eb2 <EDS_STM_Init>

  HIDS_Init();
 8009fa0:	f7ff ff8e 	bl	8009ec0 <HIDS_Init>

  HRS_Init();
 8009fa4:	f7ff ff93 	bl	8009ece <HRS_Init>

  HTS_Init();
 8009fa8:	f7ff ff98 	bl	8009edc <HTS_Init>

  IAS_Init();
 8009fac:	f7ff ff9d 	bl	8009eea <IAS_Init>

  LLS_Init();
 8009fb0:	f7ff ffa2 	bl	8009ef8 <LLS_Init>

  TPS_Init();
 8009fb4:	f7ff ffa7 	bl	8009f06 <TPS_Init>

  MOTENV_STM_Init();
 8009fb8:	f7ff ffac 	bl	8009f14 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8009fbc:	f7ff ffb1 	bl	8009f22 <P2PS_STM_Init>

  ZDD_STM_Init();
 8009fc0:	f7ff ffb6 	bl	8009f30 <ZDD_STM_Init>

  OTAS_STM_Init();
 8009fc4:	f7ff ffbb 	bl	8009f3e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8009fc8:	f7ff ffc7 	bl	8009f5a <BVOPUS_STM_Init>

  MESH_Init();
 8009fcc:	f7ff ffbe 	bl	8009f4c <MESH_Init>

  SVCCTL_InitCustomSvc();
 8009fd0:	f002 fa2e 	bl	800c430 <SVCCTL_InitCustomSvc>
  
  return;
 8009fd4:	bf00      	nop
}
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8009fe0:	4b09      	ldr	r3, [pc, #36]	@ (800a008 <SVCCTL_RegisterSvcHandler+0x30>)
 8009fe2:	7f1b      	ldrb	r3, [r3, #28]
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	4a08      	ldr	r2, [pc, #32]	@ (800a008 <SVCCTL_RegisterSvcHandler+0x30>)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8009fee:	4b06      	ldr	r3, [pc, #24]	@ (800a008 <SVCCTL_RegisterSvcHandler+0x30>)
 8009ff0:	7f1b      	ldrb	r3, [r3, #28]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	b2da      	uxtb	r2, r3
 8009ff6:	4b04      	ldr	r3, [pc, #16]	@ (800a008 <SVCCTL_RegisterSvcHandler+0x30>)
 8009ff8:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8009ffa:	bf00      	nop
}
 8009ffc:	370c      	adds	r7, #12
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	20000490 	.word	0x20000490

0800a00c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b086      	sub	sp, #24
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	3301      	adds	r3, #1
 800a018:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a01a:	2300      	movs	r3, #0
 800a01c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	2bff      	cmp	r3, #255	@ 0xff
 800a024:	d125      	bne.n	800a072 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	3302      	adds	r3, #2
 800a02a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	881b      	ldrh	r3, [r3, #0]
 800a030:	b29b      	uxth	r3, r3
 800a032:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a036:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a03a:	d118      	bne.n	800a06e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a03c:	2300      	movs	r3, #0
 800a03e:	757b      	strb	r3, [r7, #21]
 800a040:	e00d      	b.n	800a05e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a042:	7d7b      	ldrb	r3, [r7, #21]
 800a044:	4a1a      	ldr	r2, [pc, #104]	@ (800a0b0 <SVCCTL_UserEvtRx+0xa4>)
 800a046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	4798      	blx	r3
 800a04e:	4603      	mov	r3, r0
 800a050:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a052:	7dfb      	ldrb	r3, [r7, #23]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d108      	bne.n	800a06a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a058:	7d7b      	ldrb	r3, [r7, #21]
 800a05a:	3301      	adds	r3, #1
 800a05c:	757b      	strb	r3, [r7, #21]
 800a05e:	4b14      	ldr	r3, [pc, #80]	@ (800a0b0 <SVCCTL_UserEvtRx+0xa4>)
 800a060:	7f1b      	ldrb	r3, [r3, #28]
 800a062:	7d7a      	ldrb	r2, [r7, #21]
 800a064:	429a      	cmp	r2, r3
 800a066:	d3ec      	bcc.n	800a042 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800a068:	e002      	b.n	800a070 <SVCCTL_UserEvtRx+0x64>
              break;
 800a06a:	bf00      	nop
          break;
 800a06c:	e000      	b.n	800a070 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800a06e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a070:	e000      	b.n	800a074 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800a072:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800a074:	7dfb      	ldrb	r3, [r7, #23]
 800a076:	2b02      	cmp	r3, #2
 800a078:	d00f      	beq.n	800a09a <SVCCTL_UserEvtRx+0x8e>
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	dc10      	bgt.n	800a0a0 <SVCCTL_UserEvtRx+0x94>
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d002      	beq.n	800a088 <SVCCTL_UserEvtRx+0x7c>
 800a082:	2b01      	cmp	r3, #1
 800a084:	d006      	beq.n	800a094 <SVCCTL_UserEvtRx+0x88>
 800a086:	e00b      	b.n	800a0a0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f001 fc65 	bl	800b958 <SVCCTL_App_Notification>
 800a08e:	4603      	mov	r3, r0
 800a090:	75bb      	strb	r3, [r7, #22]
      break;
 800a092:	e008      	b.n	800a0a6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a094:	2301      	movs	r3, #1
 800a096:	75bb      	strb	r3, [r7, #22]
      break;
 800a098:	e005      	b.n	800a0a6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a09a:	2300      	movs	r3, #0
 800a09c:	75bb      	strb	r3, [r7, #22]
      break;
 800a09e:	e002      	b.n	800a0a6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	75bb      	strb	r3, [r7, #22]
      break;
 800a0a4:	bf00      	nop
  }

  return (return_status);
 800a0a6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3718      	adds	r7, #24
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	20000490 	.word	0x20000490

0800a0b4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b088      	sub	sp, #32
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a0bc:	f107 030c 	add.w	r3, r7, #12
 800a0c0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	212f      	movs	r1, #47	@ 0x2f
 800a0cc:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800a0d0:	f000 fae8 	bl	800a6a4 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	330b      	adds	r3, #11
 800a0d8:	78db      	ldrb	r3, [r3, #3]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3720      	adds	r7, #32
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b088      	sub	sp, #32
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a0ea:	f107 030c 	add.w	r3, r7, #12
 800a0ee:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	210f      	movs	r1, #15
 800a0fa:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800a0fe:	f000 fad1 	bl	800a6a4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	330b      	adds	r3, #11
 800a106:	78db      	ldrb	r3, [r3, #3]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3720      	adds	r7, #32
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b088      	sub	sp, #32
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a118:	f107 030c 	add.w	r3, r7, #12
 800a11c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	2110      	movs	r1, #16
 800a124:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800a128:	f000 fabc 	bl	800a6a4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a12c:	69fb      	ldr	r3, [r7, #28]
 800a12e:	330b      	adds	r3, #11
 800a130:	78db      	ldrb	r3, [r3, #3]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3720      	adds	r7, #32
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
	...

0800a13c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800a13c:	b480      	push	{r7}
 800a13e:	b08b      	sub	sp, #44	@ 0x2c
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800a144:	2300      	movs	r3, #0
 800a146:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800a148:	2300      	movs	r3, #0
 800a14a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800a14c:	2300      	movs	r3, #0
 800a14e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800a150:	2300      	movs	r3, #0
 800a152:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800a154:	2300      	movs	r3, #0
 800a156:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800a158:	2300      	movs	r3, #0
 800a15a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800a15c:	2300      	movs	r3, #0
 800a15e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800a160:	2300      	movs	r3, #0
 800a162:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800a164:	4b4a      	ldr	r3, [pc, #296]	@ (800a290 <SHCI_GetWirelessFwInfo+0x154>)
 800a166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a168:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a16c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800a176:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a44      	ldr	r2, [pc, #272]	@ (800a294 <SHCI_GetWirelessFwInfo+0x158>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d10f      	bne.n	800a1a8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	695b      	ldr	r3, [r3, #20]
 800a18c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	699b      	ldr	r3, [r3, #24]
 800a192:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	69db      	ldr	r3, [r3, #28]
 800a198:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	691b      	ldr	r3, [r3, #16]
 800a1a4:	617b      	str	r3, [r7, #20]
 800a1a6:	e01a      	b.n	800a1de <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800a1b0:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800a1b4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	695b      	ldr	r3, [r3, #20]
 800a1c4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e0:	0e1b      	lsrs	r3, r3, #24
 800a1e2:	b2da      	uxtb	r2, r3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ea:	0c1b      	lsrs	r3, r3, #16
 800a1ec:	b2da      	uxtb	r2, r3
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f4:	0a1b      	lsrs	r3, r3, #8
 800a1f6:	b2da      	uxtb	r2, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1fe:	091b      	lsrs	r3, r3, #4
 800a200:	b2db      	uxtb	r3, r3
 800a202:	f003 030f 	and.w	r3, r3, #15
 800a206:	b2da      	uxtb	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800a20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	f003 030f 	and.w	r3, r3, #15
 800a214:	b2da      	uxtb	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a21a:	6a3b      	ldr	r3, [r7, #32]
 800a21c:	0e1b      	lsrs	r3, r3, #24
 800a21e:	b2da      	uxtb	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a224:	6a3b      	ldr	r3, [r7, #32]
 800a226:	0c1b      	lsrs	r3, r3, #16
 800a228:	b2da      	uxtb	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800a22e:	6a3b      	ldr	r3, [r7, #32]
 800a230:	0a1b      	lsrs	r3, r3, #8
 800a232:	b2da      	uxtb	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a238:	6a3b      	ldr	r3, [r7, #32]
 800a23a:	b2da      	uxtb	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	b2da      	uxtb	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	0e1b      	lsrs	r3, r3, #24
 800a24c:	b2da      	uxtb	r2, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	0c1b      	lsrs	r3, r3, #16
 800a256:	b2da      	uxtb	r2, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	0a1b      	lsrs	r3, r3, #8
 800a260:	b2da      	uxtb	r2, r3
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	0e1b      	lsrs	r3, r3, #24
 800a26a:	b2da      	uxtb	r2, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	0c1b      	lsrs	r3, r3, #16
 800a274:	b2da      	uxtb	r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	b2da      	uxtb	r2, r3
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	372c      	adds	r7, #44	@ 0x2c
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr
 800a290:	58004000 	.word	0x58004000
 800a294:	a94656b9 	.word	0xa94656b9

0800a298 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	4a08      	ldr	r2, [pc, #32]	@ (800a2c8 <hci_init+0x30>)
 800a2a8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800a2aa:	4a08      	ldr	r2, [pc, #32]	@ (800a2cc <hci_init+0x34>)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800a2b0:	4806      	ldr	r0, [pc, #24]	@ (800a2cc <hci_init+0x34>)
 800a2b2:	f000 f979 	bl	800a5a8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f000 f8da 	bl	800a474 <TlInit>

  return;
 800a2c0:	bf00      	nop
}
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	2000077c 	.word	0x2000077c
 800a2cc:	20000754 	.word	0x20000754

0800a2d0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a2d6:	4822      	ldr	r0, [pc, #136]	@ (800a360 <hci_user_evt_proc+0x90>)
 800a2d8:	f000 fdf4 	bl	800aec4 <LST_is_empty>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d12b      	bne.n	800a33a <hci_user_evt_proc+0x6a>
 800a2e2:	4b20      	ldr	r3, [pc, #128]	@ (800a364 <hci_user_evt_proc+0x94>)
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d027      	beq.n	800a33a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a2ea:	f107 030c 	add.w	r3, r7, #12
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	481b      	ldr	r0, [pc, #108]	@ (800a360 <hci_user_evt_proc+0x90>)
 800a2f2:	f000 fe76 	bl	800afe2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a2f6:	4b1c      	ldr	r3, [pc, #112]	@ (800a368 <hci_user_evt_proc+0x98>)
 800a2f8:	69db      	ldr	r3, [r3, #28]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00c      	beq.n	800a318 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800a302:	2301      	movs	r3, #1
 800a304:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a306:	4b18      	ldr	r3, [pc, #96]	@ (800a368 <hci_user_evt_proc+0x98>)
 800a308:	69db      	ldr	r3, [r3, #28]
 800a30a:	1d3a      	adds	r2, r7, #4
 800a30c:	4610      	mov	r0, r2
 800a30e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800a310:	793a      	ldrb	r2, [r7, #4]
 800a312:	4b14      	ldr	r3, [pc, #80]	@ (800a364 <hci_user_evt_proc+0x94>)
 800a314:	701a      	strb	r2, [r3, #0]
 800a316:	e002      	b.n	800a31e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a318:	4b12      	ldr	r3, [pc, #72]	@ (800a364 <hci_user_evt_proc+0x94>)
 800a31a:	2201      	movs	r2, #1
 800a31c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800a31e:	4b11      	ldr	r3, [pc, #68]	@ (800a364 <hci_user_evt_proc+0x94>)
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d004      	beq.n	800a330 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	4618      	mov	r0, r3
 800a32a:	f000 fc11 	bl	800ab50 <TL_MM_EvtDone>
 800a32e:	e004      	b.n	800a33a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	4619      	mov	r1, r3
 800a334:	480a      	ldr	r0, [pc, #40]	@ (800a360 <hci_user_evt_proc+0x90>)
 800a336:	f000 fde7 	bl	800af08 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a33a:	4809      	ldr	r0, [pc, #36]	@ (800a360 <hci_user_evt_proc+0x90>)
 800a33c:	f000 fdc2 	bl	800aec4 <LST_is_empty>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d107      	bne.n	800a356 <hci_user_evt_proc+0x86>
 800a346:	4b07      	ldr	r3, [pc, #28]	@ (800a364 <hci_user_evt_proc+0x94>)
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d003      	beq.n	800a356 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800a34e:	4804      	ldr	r0, [pc, #16]	@ (800a360 <hci_user_evt_proc+0x90>)
 800a350:	f001 ff68 	bl	800c224 <hci_notify_asynch_evt>
  }


  return;
 800a354:	bf00      	nop
 800a356:	bf00      	nop
}
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	200004b8 	.word	0x200004b8
 800a364:	200004c4 	.word	0x200004c4
 800a368:	20000754 	.word	0x20000754

0800a36c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b088      	sub	sp, #32
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	460b      	mov	r3, r1
 800a376:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800a378:	2000      	movs	r0, #0
 800a37a:	f000 f8d1 	bl	800a520 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800a37e:	2300      	movs	r3, #0
 800a380:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	885b      	ldrh	r3, [r3, #2]
 800a386:	b21b      	sxth	r3, r3
 800a388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a38c:	b21a      	sxth	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	881b      	ldrh	r3, [r3, #0]
 800a392:	b21b      	sxth	r3, r3
 800a394:	029b      	lsls	r3, r3, #10
 800a396:	b21b      	sxth	r3, r3
 800a398:	4313      	orrs	r3, r2
 800a39a:	b21b      	sxth	r3, r3
 800a39c:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800a39e:	4b33      	ldr	r3, [pc, #204]	@ (800a46c <hci_send_req+0x100>)
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	b2d9      	uxtb	r1, r3
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	689a      	ldr	r2, [r3, #8]
 800a3ae:	8bbb      	ldrh	r3, [r7, #28]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f000 f88f 	bl	800a4d4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800a3b6:	e04e      	b.n	800a456 <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800a3b8:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800a3bc:	f001 ff49 	bl	800c252 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a3c0:	e043      	b.n	800a44a <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800a3c2:	f107 030c 	add.w	r3, r7, #12
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	4829      	ldr	r0, [pc, #164]	@ (800a470 <hci_send_req+0x104>)
 800a3ca:	f000 fe0a 	bl	800afe2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	7a5b      	ldrb	r3, [r3, #9]
 800a3d2:	2b0f      	cmp	r3, #15
 800a3d4:	d114      	bne.n	800a400 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	330b      	adds	r3, #11
 800a3da:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	885b      	ldrh	r3, [r3, #2]
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	8bba      	ldrh	r2, [r7, #28]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d104      	bne.n	800a3f2 <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	693a      	ldr	r2, [r7, #16]
 800a3ee:	7812      	ldrb	r2, [r2, #0]
 800a3f0:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	785b      	ldrb	r3, [r3, #1]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d027      	beq.n	800a44a <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	77fb      	strb	r3, [r7, #31]
 800a3fe:	e024      	b.n	800a44a <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	330b      	adds	r3, #11
 800a404:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	8bba      	ldrh	r2, [r7, #28]
 800a410:	429a      	cmp	r2, r3
 800a412:	d114      	bne.n	800a43e <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	7a9b      	ldrb	r3, [r3, #10]
 800a418:	3b03      	subs	r3, #3
 800a41a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	695a      	ldr	r2, [r3, #20]
 800a420:	7dfb      	ldrb	r3, [r7, #23]
 800a422:	429a      	cmp	r2, r3
 800a424:	bfa8      	it	ge
 800a426:	461a      	movge	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6918      	ldr	r0, [r3, #16]
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	1cd9      	adds	r1, r3, #3
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	695b      	ldr	r3, [r3, #20]
 800a438:	461a      	mov	r2, r3
 800a43a:	f003 f8f0 	bl	800d61e <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a446:	2301      	movs	r3, #1
 800a448:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a44a:	4809      	ldr	r0, [pc, #36]	@ (800a470 <hci_send_req+0x104>)
 800a44c:	f000 fd3a 	bl	800aec4 <LST_is_empty>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d0b5      	beq.n	800a3c2 <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800a456:	7ffb      	ldrb	r3, [r7, #31]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d0ad      	beq.n	800a3b8 <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800a45c:	2001      	movs	r0, #1
 800a45e:	f000 f85f 	bl	800a520 <NotifyCmdStatus>

  return 0;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3720      	adds	r7, #32
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	20000780 	.word	0x20000780
 800a470:	20000774 	.word	0x20000774

0800a474 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b086      	sub	sp, #24
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800a47c:	480f      	ldr	r0, [pc, #60]	@ (800a4bc <TlInit+0x48>)
 800a47e:	f000 fd11 	bl	800aea4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800a482:	4a0f      	ldr	r2, [pc, #60]	@ (800a4c0 <TlInit+0x4c>)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800a488:	480e      	ldr	r0, [pc, #56]	@ (800a4c4 <TlInit+0x50>)
 800a48a:	f000 fd0b 	bl	800aea4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a48e:	4b0e      	ldr	r3, [pc, #56]	@ (800a4c8 <TlInit+0x54>)
 800a490:	2201      	movs	r2, #1
 800a492:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800a494:	4b0d      	ldr	r3, [pc, #52]	@ (800a4cc <TlInit+0x58>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00a      	beq.n	800a4b2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800a4a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a4d0 <TlInit+0x5c>)
 800a4a2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800a4a4:	4b09      	ldr	r3, [pc, #36]	@ (800a4cc <TlInit+0x58>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f107 0208 	add.w	r2, r7, #8
 800a4ac:	4610      	mov	r0, r2
 800a4ae:	4798      	blx	r3
  }

  return;
 800a4b0:	bf00      	nop
 800a4b2:	bf00      	nop
}
 800a4b4:	3718      	adds	r7, #24
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	20000774 	.word	0x20000774
 800a4c0:	200004c0 	.word	0x200004c0
 800a4c4:	200004b8 	.word	0x200004b8
 800a4c8:	200004c4 	.word	0x200004c4
 800a4cc:	20000754 	.word	0x20000754
 800a4d0:	0800a561 	.word	0x0800a561

0800a4d4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	4603      	mov	r3, r0
 800a4dc:	603a      	str	r2, [r7, #0]
 800a4de:	80fb      	strh	r3, [r7, #6]
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800a4e4:	4b0c      	ldr	r3, [pc, #48]	@ (800a518 <SendCmd+0x44>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	88fa      	ldrh	r2, [r7, #6]
 800a4ea:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800a4ee:	4b0a      	ldr	r3, [pc, #40]	@ (800a518 <SendCmd+0x44>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	797a      	ldrb	r2, [r7, #5]
 800a4f4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800a4f6:	4b08      	ldr	r3, [pc, #32]	@ (800a518 <SendCmd+0x44>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	330c      	adds	r3, #12
 800a4fc:	797a      	ldrb	r2, [r7, #5]
 800a4fe:	6839      	ldr	r1, [r7, #0]
 800a500:	4618      	mov	r0, r3
 800a502:	f003 f88c 	bl	800d61e <memcpy>

  hciContext.io.Send(0,0);
 800a506:	4b05      	ldr	r3, [pc, #20]	@ (800a51c <SendCmd+0x48>)
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	2100      	movs	r1, #0
 800a50c:	2000      	movs	r0, #0
 800a50e:	4798      	blx	r3

  return;
 800a510:	bf00      	nop
}
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	200004c0 	.word	0x200004c0
 800a51c:	20000754 	.word	0x20000754

0800a520 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	4603      	mov	r3, r0
 800a528:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800a52a:	79fb      	ldrb	r3, [r7, #7]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d108      	bne.n	800a542 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800a530:	4b0a      	ldr	r3, [pc, #40]	@ (800a55c <NotifyCmdStatus+0x3c>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00d      	beq.n	800a554 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800a538:	4b08      	ldr	r3, [pc, #32]	@ (800a55c <NotifyCmdStatus+0x3c>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2000      	movs	r0, #0
 800a53e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800a540:	e008      	b.n	800a554 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800a542:	4b06      	ldr	r3, [pc, #24]	@ (800a55c <NotifyCmdStatus+0x3c>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d004      	beq.n	800a554 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800a54a:	4b04      	ldr	r3, [pc, #16]	@ (800a55c <NotifyCmdStatus+0x3c>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2001      	movs	r0, #1
 800a550:	4798      	blx	r3
  return;
 800a552:	bf00      	nop
 800a554:	bf00      	nop
}
 800a556:	3708      	adds	r7, #8
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	2000077c 	.word	0x2000077c

0800a560 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	7a5b      	ldrb	r3, [r3, #9]
 800a56c:	2b0f      	cmp	r3, #15
 800a56e:	d003      	beq.n	800a578 <TlEvtReceived+0x18>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	7a5b      	ldrb	r3, [r3, #9]
 800a574:	2b0e      	cmp	r3, #14
 800a576:	d107      	bne.n	800a588 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800a578:	6879      	ldr	r1, [r7, #4]
 800a57a:	4809      	ldr	r0, [pc, #36]	@ (800a5a0 <TlEvtReceived+0x40>)
 800a57c:	f000 fcea 	bl	800af54 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800a580:	2000      	movs	r0, #0
 800a582:	f001 fe5b 	bl	800c23c <hci_cmd_resp_release>
 800a586:	e006      	b.n	800a596 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800a588:	6879      	ldr	r1, [r7, #4]
 800a58a:	4806      	ldr	r0, [pc, #24]	@ (800a5a4 <TlEvtReceived+0x44>)
 800a58c:	f000 fce2 	bl	800af54 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a590:	4804      	ldr	r0, [pc, #16]	@ (800a5a4 <TlEvtReceived+0x44>)
 800a592:	f001 fe47 	bl	800c224 <hci_notify_asynch_evt>
  }

  return;
 800a596:	bf00      	nop
}
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	20000774 	.word	0x20000774
 800a5a4:	200004b8 	.word	0x200004b8

0800a5a8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	4a05      	ldr	r2, [pc, #20]	@ (800a5c8 <hci_register_io_bus+0x20>)
 800a5b4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4a04      	ldr	r2, [pc, #16]	@ (800a5cc <hci_register_io_bus+0x24>)
 800a5ba:	611a      	str	r2, [r3, #16]

  return;
 800a5bc:	bf00      	nop
}
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr
 800a5c8:	0800a8c1 	.word	0x0800a8c1
 800a5cc:	0800a929 	.word	0x0800a929

0800a5d0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	4a08      	ldr	r2, [pc, #32]	@ (800a600 <shci_init+0x30>)
 800a5e0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a5e2:	4a08      	ldr	r2, [pc, #32]	@ (800a604 <shci_init+0x34>)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a5e8:	4806      	ldr	r0, [pc, #24]	@ (800a604 <shci_init+0x34>)
 800a5ea:	f000 f915 	bl	800a818 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f000 f898 	bl	800a728 <TlInit>

  return;
 800a5f8:	bf00      	nop
}
 800a5fa:	3708      	adds	r7, #8
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	200007a4 	.word	0x200007a4
 800a604:	20000784 	.word	0x20000784

0800a608 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a60e:	4822      	ldr	r0, [pc, #136]	@ (800a698 <shci_user_evt_proc+0x90>)
 800a610:	f000 fc58 	bl	800aec4 <LST_is_empty>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d12b      	bne.n	800a672 <shci_user_evt_proc+0x6a>
 800a61a:	4b20      	ldr	r3, [pc, #128]	@ (800a69c <shci_user_evt_proc+0x94>)
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d027      	beq.n	800a672 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a622:	f107 030c 	add.w	r3, r7, #12
 800a626:	4619      	mov	r1, r3
 800a628:	481b      	ldr	r0, [pc, #108]	@ (800a698 <shci_user_evt_proc+0x90>)
 800a62a:	f000 fcda 	bl	800afe2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800a62e:	4b1c      	ldr	r3, [pc, #112]	@ (800a6a0 <shci_user_evt_proc+0x98>)
 800a630:	69db      	ldr	r3, [r3, #28]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00c      	beq.n	800a650 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a63a:	2301      	movs	r3, #1
 800a63c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a63e:	4b18      	ldr	r3, [pc, #96]	@ (800a6a0 <shci_user_evt_proc+0x98>)
 800a640:	69db      	ldr	r3, [r3, #28]
 800a642:	1d3a      	adds	r2, r7, #4
 800a644:	4610      	mov	r0, r2
 800a646:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a648:	793a      	ldrb	r2, [r7, #4]
 800a64a:	4b14      	ldr	r3, [pc, #80]	@ (800a69c <shci_user_evt_proc+0x94>)
 800a64c:	701a      	strb	r2, [r3, #0]
 800a64e:	e002      	b.n	800a656 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a650:	4b12      	ldr	r3, [pc, #72]	@ (800a69c <shci_user_evt_proc+0x94>)
 800a652:	2201      	movs	r2, #1
 800a654:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a656:	4b11      	ldr	r3, [pc, #68]	@ (800a69c <shci_user_evt_proc+0x94>)
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d004      	beq.n	800a668 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	4618      	mov	r0, r3
 800a662:	f000 fa75 	bl	800ab50 <TL_MM_EvtDone>
 800a666:	e004      	b.n	800a672 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	4619      	mov	r1, r3
 800a66c:	480a      	ldr	r0, [pc, #40]	@ (800a698 <shci_user_evt_proc+0x90>)
 800a66e:	f000 fc4b 	bl	800af08 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a672:	4809      	ldr	r0, [pc, #36]	@ (800a698 <shci_user_evt_proc+0x90>)
 800a674:	f000 fc26 	bl	800aec4 <LST_is_empty>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d107      	bne.n	800a68e <shci_user_evt_proc+0x86>
 800a67e:	4b07      	ldr	r3, [pc, #28]	@ (800a69c <shci_user_evt_proc+0x94>)
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d003      	beq.n	800a68e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800a686:	4804      	ldr	r0, [pc, #16]	@ (800a698 <shci_user_evt_proc+0x90>)
 800a688:	f7f6 fe9a 	bl	80013c0 <shci_notify_asynch_evt>
  }


  return;
 800a68c:	bf00      	nop
 800a68e:	bf00      	nop
}
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	200004c8 	.word	0x200004c8
 800a69c:	200004d8 	.word	0x200004d8
 800a6a0:	20000784 	.word	0x20000784

0800a6a4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60ba      	str	r2, [r7, #8]
 800a6ac:	607b      	str	r3, [r7, #4]
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	81fb      	strh	r3, [r7, #14]
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800a6b6:	2000      	movs	r0, #0
 800a6b8:	f000 f868 	bl	800a78c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800a6bc:	4b17      	ldr	r3, [pc, #92]	@ (800a71c <shci_send+0x78>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	89fa      	ldrh	r2, [r7, #14]
 800a6c2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800a6c6:	4b15      	ldr	r3, [pc, #84]	@ (800a71c <shci_send+0x78>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	7b7a      	ldrb	r2, [r7, #13]
 800a6cc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a6ce:	4b13      	ldr	r3, [pc, #76]	@ (800a71c <shci_send+0x78>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	330c      	adds	r3, #12
 800a6d4:	7b7a      	ldrb	r2, [r7, #13]
 800a6d6:	68b9      	ldr	r1, [r7, #8]
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f002 ffa0 	bl	800d61e <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800a6de:	4b10      	ldr	r3, [pc, #64]	@ (800a720 <shci_send+0x7c>)
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800a6e4:	4b0f      	ldr	r3, [pc, #60]	@ (800a724 <shci_send+0x80>)
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	2000      	movs	r0, #0
 800a6ec:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a6ee:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800a6f2:	f7f6 fe7c 	bl	80013ee <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f103 0008 	add.w	r0, r3, #8
 800a6fc:	4b07      	ldr	r3, [pc, #28]	@ (800a71c <shci_send+0x78>)
 800a6fe:	6819      	ldr	r1, [r3, #0]
 800a700:	4b06      	ldr	r3, [pc, #24]	@ (800a71c <shci_send+0x78>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	789b      	ldrb	r3, [r3, #2]
 800a706:	3303      	adds	r3, #3
 800a708:	461a      	mov	r2, r3
 800a70a:	f002 ff88 	bl	800d61e <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a70e:	2001      	movs	r0, #1
 800a710:	f000 f83c 	bl	800a78c <Cmd_SetStatus>

  return;
 800a714:	bf00      	nop
}
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	200004d4 	.word	0x200004d4
 800a720:	200007a8 	.word	0x200007a8
 800a724:	20000784 	.word	0x20000784

0800a728 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b086      	sub	sp, #24
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a730:	4a10      	ldr	r2, [pc, #64]	@ (800a774 <TlInit+0x4c>)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a736:	4810      	ldr	r0, [pc, #64]	@ (800a778 <TlInit+0x50>)
 800a738:	f000 fbb4 	bl	800aea4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a73c:	2001      	movs	r0, #1
 800a73e:	f000 f825 	bl	800a78c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a742:	4b0e      	ldr	r3, [pc, #56]	@ (800a77c <TlInit+0x54>)
 800a744:	2201      	movs	r2, #1
 800a746:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a748:	4b0d      	ldr	r3, [pc, #52]	@ (800a780 <TlInit+0x58>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d00c      	beq.n	800a76a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a754:	4b0b      	ldr	r3, [pc, #44]	@ (800a784 <TlInit+0x5c>)
 800a756:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a758:	4b0b      	ldr	r3, [pc, #44]	@ (800a788 <TlInit+0x60>)
 800a75a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a75c:	4b08      	ldr	r3, [pc, #32]	@ (800a780 <TlInit+0x58>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f107 020c 	add.w	r2, r7, #12
 800a764:	4610      	mov	r0, r2
 800a766:	4798      	blx	r3
  }

  return;
 800a768:	bf00      	nop
 800a76a:	bf00      	nop
}
 800a76c:	3718      	adds	r7, #24
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	200004d4 	.word	0x200004d4
 800a778:	200004c8 	.word	0x200004c8
 800a77c:	200004d8 	.word	0x200004d8
 800a780:	20000784 	.word	0x20000784
 800a784:	0800a7dd 	.word	0x0800a7dd
 800a788:	0800a7f5 	.word	0x0800a7f5

0800a78c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	4603      	mov	r3, r0
 800a794:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a796:	79fb      	ldrb	r3, [r7, #7]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10b      	bne.n	800a7b4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a79c:	4b0d      	ldr	r3, [pc, #52]	@ (800a7d4 <Cmd_SetStatus+0x48>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d003      	beq.n	800a7ac <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a7a4:	4b0b      	ldr	r3, [pc, #44]	@ (800a7d4 <Cmd_SetStatus+0x48>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2000      	movs	r0, #0
 800a7aa:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a7ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a7d8 <Cmd_SetStatus+0x4c>)
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a7b2:	e00b      	b.n	800a7cc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a7b4:	4b08      	ldr	r3, [pc, #32]	@ (800a7d8 <Cmd_SetStatus+0x4c>)
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a7ba:	4b06      	ldr	r3, [pc, #24]	@ (800a7d4 <Cmd_SetStatus+0x48>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d004      	beq.n	800a7cc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a7c2:	4b04      	ldr	r3, [pc, #16]	@ (800a7d4 <Cmd_SetStatus+0x48>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2001      	movs	r0, #1
 800a7c8:	4798      	blx	r3
  return;
 800a7ca:	bf00      	nop
 800a7cc:	bf00      	nop
}
 800a7ce:	3708      	adds	r7, #8
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	200007a4 	.word	0x200007a4
 800a7d8:	200004d0 	.word	0x200004d0

0800a7dc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b082      	sub	sp, #8
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	f7f6 fdf7 	bl	80013d8 <shci_cmd_resp_release>

  return;
 800a7ea:	bf00      	nop
}
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
	...

0800a7f4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a7fc:	6879      	ldr	r1, [r7, #4]
 800a7fe:	4805      	ldr	r0, [pc, #20]	@ (800a814 <TlUserEvtReceived+0x20>)
 800a800:	f000 fba8 	bl	800af54 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a804:	4803      	ldr	r0, [pc, #12]	@ (800a814 <TlUserEvtReceived+0x20>)
 800a806:	f7f6 fddb 	bl	80013c0 <shci_notify_asynch_evt>

  return;
 800a80a:	bf00      	nop
}
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	200004c8 	.word	0x200004c8

0800a818 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a05      	ldr	r2, [pc, #20]	@ (800a838 <shci_register_io_bus+0x20>)
 800a824:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4a04      	ldr	r2, [pc, #16]	@ (800a83c <shci_register_io_bus+0x24>)
 800a82a:	611a      	str	r2, [r3, #16]

  return;
 800a82c:	bf00      	nop
}
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr
 800a838:	0800a9dd 	.word	0x0800a9dd
 800a83c:	0800aa31 	.word	0x0800aa31

0800a840 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800a840:	b580      	push	{r7, lr}
 800a842:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a844:	f002 f800 	bl	800c848 <HW_IPCC_Enable>

  return;
 800a848:	bf00      	nop
}
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <TL_Init>:


void TL_Init( void )
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a850:	4b10      	ldr	r3, [pc, #64]	@ (800a894 <TL_Init+0x48>)
 800a852:	4a11      	ldr	r2, [pc, #68]	@ (800a898 <TL_Init+0x4c>)
 800a854:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a856:	4b0f      	ldr	r3, [pc, #60]	@ (800a894 <TL_Init+0x48>)
 800a858:	4a10      	ldr	r2, [pc, #64]	@ (800a89c <TL_Init+0x50>)
 800a85a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a85c:	4b0d      	ldr	r3, [pc, #52]	@ (800a894 <TL_Init+0x48>)
 800a85e:	4a10      	ldr	r2, [pc, #64]	@ (800a8a0 <TL_Init+0x54>)
 800a860:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a862:	4b0c      	ldr	r3, [pc, #48]	@ (800a894 <TL_Init+0x48>)
 800a864:	4a0f      	ldr	r2, [pc, #60]	@ (800a8a4 <TL_Init+0x58>)
 800a866:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a868:	4b0a      	ldr	r3, [pc, #40]	@ (800a894 <TL_Init+0x48>)
 800a86a:	4a0f      	ldr	r2, [pc, #60]	@ (800a8a8 <TL_Init+0x5c>)
 800a86c:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a86e:	4b09      	ldr	r3, [pc, #36]	@ (800a894 <TL_Init+0x48>)
 800a870:	4a0e      	ldr	r2, [pc, #56]	@ (800a8ac <TL_Init+0x60>)
 800a872:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a874:	4b07      	ldr	r3, [pc, #28]	@ (800a894 <TL_Init+0x48>)
 800a876:	4a0e      	ldr	r2, [pc, #56]	@ (800a8b0 <TL_Init+0x64>)
 800a878:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a87a:	4b06      	ldr	r3, [pc, #24]	@ (800a894 <TL_Init+0x48>)
 800a87c:	4a0d      	ldr	r2, [pc, #52]	@ (800a8b4 <TL_Init+0x68>)
 800a87e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a880:	4b04      	ldr	r3, [pc, #16]	@ (800a894 <TL_Init+0x48>)
 800a882:	4a0d      	ldr	r2, [pc, #52]	@ (800a8b8 <TL_Init+0x6c>)
 800a884:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a886:	4b03      	ldr	r3, [pc, #12]	@ (800a894 <TL_Init+0x48>)
 800a888:	4a0c      	ldr	r2, [pc, #48]	@ (800a8bc <TL_Init+0x70>)
 800a88a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a88c:	f001 fff0 	bl	800c870 <HW_IPCC_Init>

  return;
 800a890:	bf00      	nop
}
 800a892:	bd80      	pop	{r7, pc}
 800a894:	20030000 	.word	0x20030000
 800a898:	20030028 	.word	0x20030028
 800a89c:	20030048 	.word	0x20030048
 800a8a0:	20030058 	.word	0x20030058
 800a8a4:	20030068 	.word	0x20030068
 800a8a8:	20030070 	.word	0x20030070
 800a8ac:	20030078 	.word	0x20030078
 800a8b0:	20030080 	.word	0x20030080
 800a8b4:	2003009c 	.word	0x2003009c
 800a8b8:	200300a0 	.word	0x200300a0
 800a8bc:	200300ac 	.word	0x200300ac

0800a8c0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800a8cc:	4811      	ldr	r0, [pc, #68]	@ (800a914 <TL_BLE_Init+0x54>)
 800a8ce:	f000 fae9 	bl	800aea4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800a8d2:	4b11      	ldr	r3, [pc, #68]	@ (800a918 <TL_BLE_Init+0x58>)
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	689a      	ldr	r2, [r3, #8]
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	68da      	ldr	r2, [r3, #12]
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	4a0c      	ldr	r2, [pc, #48]	@ (800a91c <TL_BLE_Init+0x5c>)
 800a8ec:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	4a08      	ldr	r2, [pc, #32]	@ (800a914 <TL_BLE_Init+0x54>)
 800a8f2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800a8f4:	f001 ffd2 	bl	800c89c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a08      	ldr	r2, [pc, #32]	@ (800a920 <TL_BLE_Init+0x60>)
 800a8fe:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	4a07      	ldr	r2, [pc, #28]	@ (800a924 <TL_BLE_Init+0x64>)
 800a906:	6013      	str	r3, [r2, #0]

  return 0;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	200300c8 	.word	0x200300c8
 800a918:	20030000 	.word	0x20030000
 800a91c:	20030a58 	.word	0x20030a58
 800a920:	200007b4 	.word	0x200007b4
 800a924:	200007b8 	.word	0x200007b8

0800a928 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	460b      	mov	r3, r1
 800a932:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800a934:	4b09      	ldr	r3, [pc, #36]	@ (800a95c <TL_BLE_SendCmd+0x34>)
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	2201      	movs	r2, #1
 800a93c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800a93e:	4b07      	ldr	r3, [pc, #28]	@ (800a95c <TL_BLE_SendCmd+0x34>)
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4619      	mov	r1, r3
 800a946:	2001      	movs	r0, #1
 800a948:	f000 f970 	bl	800ac2c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800a94c:	f001 ffc0 	bl	800c8d0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800a950:	2300      	movs	r3, #0
}
 800a952:	4618      	mov	r0, r3
 800a954:	3708      	adds	r7, #8
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	20030000 	.word	0x20030000

0800a960 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a966:	e01c      	b.n	800a9a2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a968:	1d3b      	adds	r3, r7, #4
 800a96a:	4619      	mov	r1, r3
 800a96c:	4812      	ldr	r0, [pc, #72]	@ (800a9b8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a96e:	f000 fb38 	bl	800afe2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	7a5b      	ldrb	r3, [r3, #9]
 800a976:	2b0f      	cmp	r3, #15
 800a978:	d003      	beq.n	800a982 <HW_IPCC_BLE_RxEvtNot+0x22>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	7a5b      	ldrb	r3, [r3, #9]
 800a97e:	2b0e      	cmp	r3, #14
 800a980:	d105      	bne.n	800a98e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4619      	mov	r1, r3
 800a986:	2002      	movs	r0, #2
 800a988:	f000 f950 	bl	800ac2c <OutputDbgTrace>
 800a98c:	e004      	b.n	800a998 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	4619      	mov	r1, r3
 800a992:	2005      	movs	r0, #5
 800a994:	f000 f94a 	bl	800ac2c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a998:	4b08      	ldr	r3, [pc, #32]	@ (800a9bc <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	4610      	mov	r0, r2
 800a9a0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a9a2:	4805      	ldr	r0, [pc, #20]	@ (800a9b8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a9a4:	f000 fa8e 	bl	800aec4 <LST_is_empty>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d0dc      	beq.n	800a968 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a9ae:	bf00      	nop
}
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	200300c8 	.word	0x200300c8
 800a9bc:	200007b4 	.word	0x200007b4

0800a9c0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_ACL_DATA_RSP, (uint8_t*)NULL);
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	2004      	movs	r0, #4
 800a9c8:	f000 f930 	bl	800ac2c <OutputDbgTrace>
  
  BLE_IoBusAclDataTxAck( );
 800a9cc:	4b02      	ldr	r3, [pc, #8]	@ (800a9d8 <HW_IPCC_BLE_AclDataAckNot+0x18>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4798      	blx	r3
       
  return;
 800a9d2:	bf00      	nop
}
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	200007b8 	.word	0x200007b8

0800a9dc <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a9e8:	480d      	ldr	r0, [pc, #52]	@ (800aa20 <TL_SYS_Init+0x44>)
 800a9ea:	f000 fa5b 	bl	800aea4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a9ee:	4b0d      	ldr	r3, [pc, #52]	@ (800aa24 <TL_SYS_Init+0x48>)
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	689a      	ldr	r2, [r3, #8]
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	4a08      	ldr	r2, [pc, #32]	@ (800aa20 <TL_SYS_Init+0x44>)
 800aa00:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800aa02:	f001 ff97 	bl	800c934 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a07      	ldr	r2, [pc, #28]	@ (800aa28 <TL_SYS_Init+0x4c>)
 800aa0c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	4a06      	ldr	r2, [pc, #24]	@ (800aa2c <TL_SYS_Init+0x50>)
 800aa14:	6013      	str	r3, [r2, #0]

  return 0;
 800aa16:	2300      	movs	r3, #0
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}
 800aa20:	200300d0 	.word	0x200300d0
 800aa24:	20030000 	.word	0x20030000
 800aa28:	200007bc 	.word	0x200007bc
 800aa2c:	200007c0 	.word	0x200007c0

0800aa30 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	460b      	mov	r3, r1
 800aa3a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800aa3c:	4b09      	ldr	r3, [pc, #36]	@ (800aa64 <TL_SYS_SendCmd+0x34>)
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2210      	movs	r2, #16
 800aa44:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800aa46:	4b07      	ldr	r3, [pc, #28]	@ (800aa64 <TL_SYS_SendCmd+0x34>)
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	2006      	movs	r0, #6
 800aa50:	f000 f8ec 	bl	800ac2c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800aa54:	f001 ff88 	bl	800c968 <HW_IPCC_SYS_SendCmd>

  return 0;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3708      	adds	r7, #8
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	20030000 	.word	0x20030000

0800aa68 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800aa6c:	4b07      	ldr	r3, [pc, #28]	@ (800aa8c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4619      	mov	r1, r3
 800aa74:	2007      	movs	r0, #7
 800aa76:	f000 f8d9 	bl	800ac2c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800aa7a:	4b05      	ldr	r3, [pc, #20]	@ (800aa90 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a03      	ldr	r2, [pc, #12]	@ (800aa8c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800aa80:	68d2      	ldr	r2, [r2, #12]
 800aa82:	6812      	ldr	r2, [r2, #0]
 800aa84:	4610      	mov	r0, r2
 800aa86:	4798      	blx	r3

  return;
 800aa88:	bf00      	nop
}
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	20030000 	.word	0x20030000
 800aa90:	200007bc 	.word	0x200007bc

0800aa94 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800aa9a:	e00e      	b.n	800aaba <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800aa9c:	1d3b      	adds	r3, r7, #4
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	480b      	ldr	r0, [pc, #44]	@ (800aad0 <HW_IPCC_SYS_EvtNot+0x3c>)
 800aaa2:	f000 fa9e 	bl	800afe2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	2008      	movs	r0, #8
 800aaac:	f000 f8be 	bl	800ac2c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800aab0:	4b08      	ldr	r3, [pc, #32]	@ (800aad4 <HW_IPCC_SYS_EvtNot+0x40>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	4610      	mov	r0, r2
 800aab8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800aaba:	4805      	ldr	r0, [pc, #20]	@ (800aad0 <HW_IPCC_SYS_EvtNot+0x3c>)
 800aabc:	f000 fa02 	bl	800aec4 <LST_is_empty>
 800aac0:	4603      	mov	r3, r0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d0ea      	beq.n	800aa9c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800aac6:	bf00      	nop
}
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	200300d0 	.word	0x200300d0
 800aad4:	200007c0 	.word	0x200007c0

0800aad8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800aae0:	4817      	ldr	r0, [pc, #92]	@ (800ab40 <TL_MM_Init+0x68>)
 800aae2:	f000 f9df 	bl	800aea4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800aae6:	4817      	ldr	r0, [pc, #92]	@ (800ab44 <TL_MM_Init+0x6c>)
 800aae8:	f000 f9dc 	bl	800aea4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800aaec:	4b16      	ldr	r3, [pc, #88]	@ (800ab48 <TL_MM_Init+0x70>)
 800aaee:	691b      	ldr	r3, [r3, #16]
 800aaf0:	4a16      	ldr	r2, [pc, #88]	@ (800ab4c <TL_MM_Init+0x74>)
 800aaf2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800aaf4:	4b15      	ldr	r3, [pc, #84]	@ (800ab4c <TL_MM_Init+0x74>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	6892      	ldr	r2, [r2, #8]
 800aafc:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800aafe:	4b13      	ldr	r3, [pc, #76]	@ (800ab4c <TL_MM_Init+0x74>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	68d2      	ldr	r2, [r2, #12]
 800ab06:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800ab08:	4b10      	ldr	r3, [pc, #64]	@ (800ab4c <TL_MM_Init+0x74>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a0c      	ldr	r2, [pc, #48]	@ (800ab40 <TL_MM_Init+0x68>)
 800ab0e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800ab10:	4b0e      	ldr	r3, [pc, #56]	@ (800ab4c <TL_MM_Init+0x74>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	6812      	ldr	r2, [r2, #0]
 800ab18:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800ab1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ab4c <TL_MM_Init+0x74>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	6852      	ldr	r2, [r2, #4]
 800ab22:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800ab24:	4b09      	ldr	r3, [pc, #36]	@ (800ab4c <TL_MM_Init+0x74>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	6912      	ldr	r2, [r2, #16]
 800ab2c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800ab2e:	4b07      	ldr	r3, [pc, #28]	@ (800ab4c <TL_MM_Init+0x74>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	6952      	ldr	r2, [r2, #20]
 800ab36:	619a      	str	r2, [r3, #24]

  return;
 800ab38:	bf00      	nop
}
 800ab3a:	3708      	adds	r7, #8
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	200300b8 	.word	0x200300b8
 800ab44:	200007ac 	.word	0x200007ac
 800ab48:	20030000 	.word	0x20030000
 800ab4c:	200007c4 	.word	0x200007c4

0800ab50 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800ab58:	6879      	ldr	r1, [r7, #4]
 800ab5a:	4807      	ldr	r0, [pc, #28]	@ (800ab78 <TL_MM_EvtDone+0x28>)
 800ab5c:	f000 f9fa 	bl	800af54 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800ab60:	6879      	ldr	r1, [r7, #4]
 800ab62:	2000      	movs	r0, #0
 800ab64:	f000 f862 	bl	800ac2c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800ab68:	4804      	ldr	r0, [pc, #16]	@ (800ab7c <TL_MM_EvtDone+0x2c>)
 800ab6a:	f001 ff43 	bl	800c9f4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800ab6e:	bf00      	nop
}
 800ab70:	3708      	adds	r7, #8
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	200007ac 	.word	0x200007ac
 800ab7c:	0800ab81 	.word	0x0800ab81

0800ab80 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ab86:	e00c      	b.n	800aba2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800ab88:	1d3b      	adds	r3, r7, #4
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	480a      	ldr	r0, [pc, #40]	@ (800abb8 <SendFreeBuf+0x38>)
 800ab8e:	f000 fa28 	bl	800afe2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800ab92:	4b0a      	ldr	r3, [pc, #40]	@ (800abbc <SendFreeBuf+0x3c>)
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	691b      	ldr	r3, [r3, #16]
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	4611      	mov	r1, r2
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f000 f9d9 	bl	800af54 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800aba2:	4805      	ldr	r0, [pc, #20]	@ (800abb8 <SendFreeBuf+0x38>)
 800aba4:	f000 f98e 	bl	800aec4 <LST_is_empty>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d0ec      	beq.n	800ab88 <SendFreeBuf+0x8>
  }

  return;
 800abae:	bf00      	nop
}
 800abb0:	3708      	adds	r7, #8
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	200007ac 	.word	0x200007ac
 800abbc:	20030000 	.word	0x20030000

0800abc0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800abc4:	4805      	ldr	r0, [pc, #20]	@ (800abdc <TL_TRACES_Init+0x1c>)
 800abc6:	f000 f96d 	bl	800aea4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800abca:	4b05      	ldr	r3, [pc, #20]	@ (800abe0 <TL_TRACES_Init+0x20>)
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	4a03      	ldr	r2, [pc, #12]	@ (800abdc <TL_TRACES_Init+0x1c>)
 800abd0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800abd2:	f001 ff61 	bl	800ca98 <HW_IPCC_TRACES_Init>

  return;
 800abd6:	bf00      	nop
}
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	200300c0 	.word	0x200300c0
 800abe0:	20030000 	.word	0x20030000

0800abe4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800abea:	e008      	b.n	800abfe <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800abec:	1d3b      	adds	r3, r7, #4
 800abee:	4619      	mov	r1, r3
 800abf0:	4808      	ldr	r0, [pc, #32]	@ (800ac14 <HW_IPCC_TRACES_EvtNot+0x30>)
 800abf2:	f000 f9f6 	bl	800afe2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4618      	mov	r0, r3
 800abfa:	f000 f80d 	bl	800ac18 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800abfe:	4805      	ldr	r0, [pc, #20]	@ (800ac14 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ac00:	f000 f960 	bl	800aec4 <LST_is_empty>
 800ac04:	4603      	mov	r3, r0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d0f0      	beq.n	800abec <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800ac0a:	bf00      	nop
}
 800ac0c:	3708      	adds	r7, #8
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	200300c0 	.word	0x200300c0

0800ac18 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800ac20:	bf00      	nop
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <OutputDbgTrace>:

/******************************************************************************
* DEBUG INFORMATION
******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b087      	sub	sp, #28
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	4603      	mov	r3, r0
 800ac34:	6039      	str	r1, [r7, #0]
 800ac36:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_AclDataPacket_t *p_acldata_packet; 
  TL_EvtSerial_t *p_cmd_rsp_packet;
  
  switch(packet_type)
 800ac38:	79fb      	ldrb	r3, [r7, #7]
 800ac3a:	2b08      	cmp	r3, #8
 800ac3c:	d84c      	bhi.n	800acd8 <OutputDbgTrace+0xac>
 800ac3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ac44 <OutputDbgTrace+0x18>)
 800ac40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac44:	0800ac69 	.word	0x0800ac69
 800ac48:	0800ac8d 	.word	0x0800ac8d
 800ac4c:	0800ac99 	.word	0x0800ac99
 800ac50:	0800ac93 	.word	0x0800ac93
 800ac54:	0800acd9 	.word	0x0800acd9
 800ac58:	0800acad 	.word	0x0800acad
 800ac5c:	0800acb9 	.word	0x0800acb9
 800ac60:	0800acbf 	.word	0x0800acbf
 800ac64:	0800accd 	.word	0x0800accd
  {
  case TL_MB_MM_RELEASE_BUFFER:
    p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	617b      	str	r3, [r7, #20]
    switch(p_evt_packet->evtserial.evt.evtcode)
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	7a5b      	ldrb	r3, [r3, #9]
 800ac70:	2bff      	cmp	r3, #255	@ 0xff
 800ac72:	d005      	beq.n	800ac80 <OutputDbgTrace+0x54>
 800ac74:	2bff      	cmp	r3, #255	@ 0xff
 800ac76:	dc05      	bgt.n	800ac84 <OutputDbgTrace+0x58>
 800ac78:	2b0e      	cmp	r3, #14
 800ac7a:	d005      	beq.n	800ac88 <OutputDbgTrace+0x5c>
 800ac7c:	2b0f      	cmp	r3, #15
      break;
      
    default:
      TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
      TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
      break;
 800ac7e:	e001      	b.n	800ac84 <OutputDbgTrace+0x58>
      break;
 800ac80:	bf00      	nop
 800ac82:	e02a      	b.n	800acda <OutputDbgTrace+0xae>
      break;
 800ac84:	bf00      	nop
 800ac86:	e028      	b.n	800acda <OutputDbgTrace+0xae>
      break;
 800ac88:	bf00      	nop
    }
    
    TL_MM_DBG_MSG("\r\n");
    break;
 800ac8a:	e026      	b.n	800acda <OutputDbgTrace+0xae>
    
  case TL_MB_BLE_CMD:
    p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	60fb      	str	r3, [r7, #12]
      TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
    }
    TL_HCI_CMD_DBG_MSG("\r\n");
    
    TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
    break;
 800ac90:	e023      	b.n	800acda <OutputDbgTrace+0xae>
    
  case TL_MB_ACL_DATA:
    (void)p_acldata_packet;
    p_acldata_packet = (TL_AclDataPacket_t*)buffer;
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	60bb      	str	r3, [r7, #8]
    TL_HCI_CMD_DBG_MSG(" payload:");
    TL_HCI_CMD_DBG_BUF(p_acldata_packet->AclDataSerial.acl_data, p_acldata_packet->AclDataSerial.length, "");
  }*/
    TL_HCI_CMD_DBG_MSG("\r\n");
    /*TL_HCI_CMD_DBG_RAW(&p_acldata_packet->AclDataSerial, p_acldata_packet->AclDataSerial.length+TL_CMD_HDR_SIZE);*/
    break;
 800ac96:	e020      	b.n	800acda <OutputDbgTrace+0xae>
    TL_HCI_CMD_DBG_MSG(" ACL Data Tx Ack received")
      TL_HCI_CMD_DBG_MSG("\r\n");
    break;
    
  case TL_MB_BLE_CMD_RSP:
    p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	617b      	str	r3, [r7, #20]
    switch(p_evt_packet->evtserial.evt.evtcode)
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	7a5b      	ldrb	r3, [r3, #9]
 800aca0:	2b0e      	cmp	r3, #14
 800aca2:	d001      	beq.n	800aca8 <OutputDbgTrace+0x7c>
 800aca4:	2b0f      	cmp	r3, #15
      }
      break;
      
    default:
      TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
      break;
 800aca6:	e000      	b.n	800acaa <OutputDbgTrace+0x7e>
      break;
 800aca8:	bf00      	nop
    }
    
    TL_HCI_CMD_DBG_MSG("\r\n");
    
    TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
    break;
 800acaa:	e016      	b.n	800acda <OutputDbgTrace+0xae>
    
  case TL_MB_BLE_ASYNCH_EVT:
    p_evt_packet = (TL_EvtPacket_t*)buffer;
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	617b      	str	r3, [r7, #20]
    if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	7a5b      	ldrb	r3, [r3, #9]
 800acb4:	2bff      	cmp	r3, #255	@ 0xff
    }
    
    TL_HCI_EVT_DBG_MSG("\r\n");
    
    TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
    break;
 800acb6:	e010      	b.n	800acda <OutputDbgTrace+0xae>
    
  case TL_MB_SYS_CMD:
    p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	60fb      	str	r3, [r7, #12]
      TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
    }
    TL_SHCI_CMD_DBG_MSG("\r\n");
    
    TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
    break;
 800acbc:	e00d      	b.n	800acda <OutputDbgTrace+0xae>
    
  case TL_MB_SYS_CMD_RSP:
    p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	613b      	str	r3, [r7, #16]
    switch(p_cmd_rsp_packet->evt.evtcode)
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	785b      	ldrb	r3, [r3, #1]
 800acc6:	2b0e      	cmp	r3, #14
      }
      break;
      
    default:
      TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
      break;
 800acc8:	bf00      	nop
    }
    
    TL_SHCI_CMD_DBG_MSG("\r\n");
    
    TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
    break;
 800acca:	e006      	b.n	800acda <OutputDbgTrace+0xae>
    
  case  TL_MB_SYS_ASYNCH_EVT:
    p_evt_packet = (TL_EvtPacket_t*)buffer;
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	617b      	str	r3, [r7, #20]
    if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	7a5b      	ldrb	r3, [r3, #9]
 800acd4:	2bff      	cmp	r3, #255	@ 0xff
    }
    
    TL_SHCI_EVT_DBG_MSG("\r\n");
    
    TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
    break;
 800acd6:	e000      	b.n	800acda <OutputDbgTrace+0xae>
    
  default:
    break;
 800acd8:	bf00      	nop
  }
  
  return;
 800acda:	bf00      	nop
}
 800acdc:	371c      	adds	r7, #28
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop

0800ace8 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b086      	sub	sp, #24
 800acec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acee:	f3ef 8310 	mrs	r3, PRIMASK
 800acf2:	60fb      	str	r3, [r7, #12]
  return(result);
 800acf4:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800acf6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800acf8:	b672      	cpsid	i
}
 800acfa:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800acfc:	1cbb      	adds	r3, r7, #2
 800acfe:	4619      	mov	r1, r3
 800ad00:	4812      	ldr	r0, [pc, #72]	@ (800ad4c <DbgTrace_TxCpltCallback+0x64>)
 800ad02:	f000 fbe5 	bl	800b4d0 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800ad06:	1cbb      	adds	r3, r7, #2
 800ad08:	4619      	mov	r1, r3
 800ad0a:	4810      	ldr	r0, [pc, #64]	@ (800ad4c <DbgTrace_TxCpltCallback+0x64>)
 800ad0c:	f000 fccf 	bl	800b6ae <CircularQueue_Sense>
 800ad10:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d00c      	beq.n	800ad32 <DbgTrace_TxCpltCallback+0x4a>
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	f383 8810 	msr	PRIMASK, r3
}
 800ad22:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800ad24:	887b      	ldrh	r3, [r7, #2]
 800ad26:	4a0a      	ldr	r2, [pc, #40]	@ (800ad50 <DbgTrace_TxCpltCallback+0x68>)
 800ad28:	4619      	mov	r1, r3
 800ad2a:	6938      	ldr	r0, [r7, #16]
 800ad2c:	f7f6 f823 	bl	8000d76 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800ad30:	e008      	b.n	800ad44 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800ad32:	4b08      	ldr	r3, [pc, #32]	@ (800ad54 <DbgTrace_TxCpltCallback+0x6c>)
 800ad34:	2201      	movs	r2, #1
 800ad36:	701a      	strb	r2, [r3, #0]
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f383 8810 	msr	PRIMASK, r3
}
 800ad42:	bf00      	nop
}
 800ad44:	bf00      	nop
 800ad46:	3718      	adds	r7, #24
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	200007c8 	.word	0x200007c8
 800ad50:	0800ace9 	.word	0x0800ace9
 800ad54:	20000411 	.word	0x20000411

0800ad58 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800ad5e:	f7f6 f804 	bl	8000d6a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800ad62:	2302      	movs	r3, #2
 800ad64:	9300      	str	r3, [sp, #0]
 800ad66:	2300      	movs	r3, #0
 800ad68:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800ad6c:	4903      	ldr	r1, [pc, #12]	@ (800ad7c <DbgTraceInit+0x24>)
 800ad6e:	4804      	ldr	r0, [pc, #16]	@ (800ad80 <DbgTraceInit+0x28>)
 800ad70:	f000 f956 	bl	800b020 <CircularQueue_Init>
#endif 
#endif
  return;
 800ad74:	bf00      	nop
}
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	200007e8 	.word	0x200007e8
 800ad80:	200007c8 	.word	0x200007c8

0800ad84 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	60b9      	str	r1, [r7, #8]
 800ad8e:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	68b9      	ldr	r1, [r7, #8]
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	f000 f805 	bl	800ada4 <DbgTraceWrite>
 800ad9a:	4603      	mov	r3, r0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3710      	adds	r7, #16
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b08a      	sub	sp, #40	@ 0x28
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800adb0:	2300      	movs	r3, #0
 800adb2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adb4:	f3ef 8310 	mrs	r3, PRIMASK
 800adb8:	61bb      	str	r3, [r7, #24]
  return(result);
 800adba:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800adbc:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc4:	d102      	bne.n	800adcc <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800adc6:	2300      	movs	r3, #0
 800adc8:	627b      	str	r3, [r7, #36]	@ 0x24
 800adca:	e037      	b.n	800ae3c <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2b01      	cmp	r3, #1
 800add0:	d006      	beq.n	800ade0 <DbgTraceWrite+0x3c>
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2b02      	cmp	r3, #2
 800add6:	d003      	beq.n	800ade0 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800add8:	f04f 33ff 	mov.w	r3, #4294967295
 800addc:	627b      	str	r3, [r7, #36]	@ 0x24
 800adde:	e02d      	b.n	800ae3c <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d02a      	beq.n	800ae3c <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800adea:	b672      	cpsid	i
}
 800adec:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	b29a      	uxth	r2, r3
 800adf2:	2301      	movs	r3, #1
 800adf4:	68b9      	ldr	r1, [r7, #8]
 800adf6:	4814      	ldr	r0, [pc, #80]	@ (800ae48 <DbgTraceWrite+0xa4>)
 800adf8:	f000 f944 	bl	800b084 <CircularQueue_Add>
 800adfc:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800adfe:	69fb      	ldr	r3, [r7, #28]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d015      	beq.n	800ae30 <DbgTraceWrite+0x8c>
 800ae04:	4b11      	ldr	r3, [pc, #68]	@ (800ae4c <DbgTraceWrite+0xa8>)
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d010      	beq.n	800ae30 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800ae0e:	4b0f      	ldr	r3, [pc, #60]	@ (800ae4c <DbgTraceWrite+0xa8>)
 800ae10:	2200      	movs	r2, #0
 800ae12:	701a      	strb	r2, [r3, #0]
 800ae14:	6a3b      	ldr	r3, [r7, #32]
 800ae16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	f383 8810 	msr	PRIMASK, r3
}
 800ae1e:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	4a0a      	ldr	r2, [pc, #40]	@ (800ae50 <DbgTraceWrite+0xac>)
 800ae26:	4619      	mov	r1, r3
 800ae28:	69f8      	ldr	r0, [r7, #28]
 800ae2a:	f7f5 ffa4 	bl	8000d76 <DbgOutputTraces>
 800ae2e:	e005      	b.n	800ae3c <DbgTraceWrite+0x98>
 800ae30:	6a3b      	ldr	r3, [r7, #32]
 800ae32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	f383 8810 	msr	PRIMASK, r3
}
 800ae3a:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800ae3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3728      	adds	r7, #40	@ 0x28
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	200007c8 	.word	0x200007c8
 800ae4c:	20000411 	.word	0x20000411
 800ae50:	0800ace9 	.word	0x0800ace9

0800ae54 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800ae5e:	4b0f      	ldr	r3, [pc, #60]	@ (800ae9c <OTP_Read+0x48>)
 800ae60:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ae62:	e002      	b.n	800ae6a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	3b08      	subs	r3, #8
 800ae68:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	3307      	adds	r3, #7
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	79fa      	ldrb	r2, [r7, #7]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d003      	beq.n	800ae7e <OTP_Read+0x2a>
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	4a09      	ldr	r2, [pc, #36]	@ (800aea0 <OTP_Read+0x4c>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d1f2      	bne.n	800ae64 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	3307      	adds	r3, #7
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	79fa      	ldrb	r2, [r7, #7]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d001      	beq.n	800ae8e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3714      	adds	r7, #20
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr
 800ae9c:	1fff73f8 	.word	0x1fff73f8
 800aea0:	1fff7000 	.word	0x1fff7000

0800aea4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	605a      	str	r2, [r3, #4]
}
 800aeb8:	bf00      	nop
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b087      	sub	sp, #28
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aecc:	f3ef 8310 	mrs	r3, PRIMASK
 800aed0:	60fb      	str	r3, [r7, #12]
  return(result);
 800aed2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aed4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800aed6:	b672      	cpsid	i
}
 800aed8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d102      	bne.n	800aeea <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800aee4:	2301      	movs	r3, #1
 800aee6:	75fb      	strb	r3, [r7, #23]
 800aee8:	e001      	b.n	800aeee <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800aeea:	2300      	movs	r3, #0
 800aeec:	75fb      	strb	r3, [r7, #23]
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	f383 8810 	msr	PRIMASK, r3
}
 800aef8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800aefa:	7dfb      	ldrb	r3, [r7, #23]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	371c      	adds	r7, #28
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800af08:	b480      	push	{r7}
 800af0a:	b087      	sub	sp, #28
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af12:	f3ef 8310 	mrs	r3, PRIMASK
 800af16:	60fb      	str	r3, [r7, #12]
  return(result);
 800af18:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800af1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800af1c:	b672      	cpsid	i
}
 800af1e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	683a      	ldr	r2, [r7, #0]
 800af32:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	683a      	ldr	r2, [r7, #0]
 800af3a:	605a      	str	r2, [r3, #4]
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	f383 8810 	msr	PRIMASK, r3
}
 800af46:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800af48:	bf00      	nop
 800af4a:	371c      	adds	r7, #28
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800af54:	b480      	push	{r7}
 800af56:	b087      	sub	sp, #28
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af5e:	f3ef 8310 	mrs	r3, PRIMASK
 800af62:	60fb      	str	r3, [r7, #12]
  return(result);
 800af64:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800af66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800af68:	b672      	cpsid	i
}
 800af6a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	685a      	ldr	r2, [r3, #4]
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	683a      	ldr	r2, [r7, #0]
 800af7e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	683a      	ldr	r2, [r7, #0]
 800af86:	601a      	str	r2, [r3, #0]
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	f383 8810 	msr	PRIMASK, r3
}
 800af92:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800af94:	bf00      	nop
 800af96:	371c      	adds	r7, #28
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b087      	sub	sp, #28
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afa8:	f3ef 8310 	mrs	r3, PRIMASK
 800afac:	60fb      	str	r3, [r7, #12]
  return(result);
 800afae:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800afb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800afb2:	b672      	cpsid	i
}
 800afb4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	6812      	ldr	r2, [r2, #0]
 800afbe:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	6852      	ldr	r2, [r2, #4]
 800afc8:	605a      	str	r2, [r3, #4]
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	f383 8810 	msr	PRIMASK, r3
}
 800afd4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800afd6:	bf00      	nop
 800afd8:	371c      	adds	r7, #28
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr

0800afe2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b086      	sub	sp, #24
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
 800afea:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afec:	f3ef 8310 	mrs	r3, PRIMASK
 800aff0:	60fb      	str	r3, [r7, #12]
  return(result);
 800aff2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aff4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aff6:	b672      	cpsid	i
}
 800aff8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4618      	mov	r0, r3
 800b008:	f7ff ffca 	bl	800afa0 <LST_remove_node>
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	f383 8810 	msr	PRIMASK, r3
}
 800b016:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b018:	bf00      	nop
 800b01a:	3718      	adds	r7, #24
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]
 800b02c:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	68ba      	ldr	r2, [r7, #8]
 800b032:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2200      	movs	r2, #0
 800b038:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2200      	movs	r2, #0
 800b03e:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2200      	movs	r2, #0
 800b044:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2200      	movs	r2, #0
 800b04a:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	887a      	ldrh	r2, [r7, #2]
 800b056:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	7e3a      	ldrb	r2, [r7, #24]
 800b05c:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800b05e:	7e3b      	ldrb	r3, [r7, #24]
 800b060:	f003 0302 	and.w	r3, r3, #2
 800b064:	2b00      	cmp	r3, #0
 800b066:	d006      	beq.n	800b076 <CircularQueue_Init+0x56>
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	891b      	ldrh	r3, [r3, #8]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d002      	beq.n	800b076 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800b070:	f04f 33ff 	mov.w	r3, #4294967295
 800b074:	e000      	b.n	800b078 <CircularQueue_Init+0x58>
  }
  return 0;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3714      	adds	r7, #20
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b08e      	sub	sp, #56	@ 0x38
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	603b      	str	r3, [r7, #0]
 800b090:	4613      	mov	r3, r2
 800b092:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800b094:	2300      	movs	r3, #0
 800b096:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800b098:	2300      	movs	r3, #0
 800b09a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800b09c:	2300      	movs	r3, #0
 800b09e:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	891b      	ldrh	r3, [r3, #8]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d101      	bne.n	800b0bc <CircularQueue_Add+0x38>
 800b0b8:	2302      	movs	r3, #2
 800b0ba:	e000      	b.n	800b0be <CircularQueue_Add+0x3a>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	695b      	ldr	r3, [r3, #20]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d029      	beq.n	800b11c <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	891b      	ldrh	r3, [r3, #8]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d122      	bne.n	800b116 <CircularQueue_Add+0x92>
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	4413      	add	r3, r2
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	691b      	ldr	r3, [r3, #16]
 800b0e6:	1c59      	adds	r1, r3, #1
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	4299      	cmp	r1, r3
 800b0ee:	d306      	bcc.n	800b0fe <CircularQueue_Add+0x7a>
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	6919      	ldr	r1, [r3, #16]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	1acb      	subs	r3, r1, r3
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	e002      	b.n	800b104 <CircularQueue_Add+0x80>
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	3301      	adds	r3, #1
 800b104:	4413      	add	r3, r2
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	021b      	lsls	r3, r3, #8
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	4403      	add	r3, r0
 800b10e:	b29b      	uxth	r3, r3
 800b110:	3302      	adds	r3, #2
 800b112:	b29b      	uxth	r3, r3
 800b114:	e001      	b.n	800b11a <CircularQueue_Add+0x96>
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	891b      	ldrh	r3, [r3, #8]
 800b11a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	891b      	ldrh	r3, [r3, #8]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d002      	beq.n	800b12a <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	891b      	ldrh	r3, [r3, #8]
 800b128:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	691a      	ldr	r2, [r3, #16]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	429a      	cmp	r2, r3
 800b134:	d307      	bcc.n	800b146 <CircularQueue_Add+0xc2>
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	685a      	ldr	r2, [r3, #4]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	6919      	ldr	r1, [r3, #16]
 800b13e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b140:	440b      	add	r3, r1
 800b142:	1ad3      	subs	r3, r2, r3
 800b144:	e000      	b.n	800b148 <CircularQueue_Add+0xc4>
 800b146:	2300      	movs	r3, #0
 800b148:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800b14a:	88fa      	ldrh	r2, [r7, #6]
 800b14c:	7ffb      	ldrb	r3, [r7, #31]
 800b14e:	4413      	add	r3, r2
 800b150:	461a      	mov	r2, r3
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	fb02 f303 	mul.w	r3, r2, r3
 800b158:	69ba      	ldr	r2, [r7, #24]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d80b      	bhi.n	800b176 <CircularQueue_Add+0xf2>
 800b15e:	88fa      	ldrh	r2, [r7, #6]
 800b160:	7ffb      	ldrb	r3, [r7, #31]
 800b162:	4413      	add	r3, r2
 800b164:	461a      	mov	r2, r3
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	fbb3 f1f2 	udiv	r1, r3, r2
 800b16c:	fb01 f202 	mul.w	r2, r1, r2
 800b170:	1a9b      	subs	r3, r3, r2
 800b172:	b2db      	uxtb	r3, r3
 800b174:	e000      	b.n	800b178 <CircularQueue_Add+0xf4>
 800b176:	2300      	movs	r3, #0
 800b178:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800b17a:	7dfa      	ldrb	r2, [r7, #23]
 800b17c:	7ffb      	ldrb	r3, [r7, #31]
 800b17e:	429a      	cmp	r2, r3
 800b180:	bf8c      	ite	hi
 800b182:	2301      	movhi	r3, #1
 800b184:	2300      	movls	r3, #0
 800b186:	b2db      	uxtb	r3, r3
 800b188:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800b18a:	7fbb      	ldrb	r3, [r7, #30]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d008      	beq.n	800b1a2 <CircularQueue_Add+0x11e>
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	7f1b      	ldrb	r3, [r3, #28]
 800b194:	f003 0301 	and.w	r3, r3, #1
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d002      	beq.n	800b1a2 <CircularQueue_Add+0x11e>
 800b19c:	7dfb      	ldrb	r3, [r7, #23]
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	e000      	b.n	800b1a4 <CircularQueue_Add+0x120>
 800b1a2:	8bbb      	ldrh	r3, [r7, #28]
 800b1a4:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800b1a6:	7fbb      	ldrb	r3, [r7, #30]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d008      	beq.n	800b1be <CircularQueue_Add+0x13a>
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	7f1b      	ldrb	r3, [r3, #28]
 800b1b0:	f003 0302 	and.w	r3, r3, #2
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d002      	beq.n	800b1be <CircularQueue_Add+0x13a>
 800b1b8:	7ffb      	ldrb	r3, [r7, #31]
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	e000      	b.n	800b1c0 <CircularQueue_Add+0x13c>
 800b1be:	8bbb      	ldrh	r3, [r7, #28]
 800b1c0:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800b1c2:	88fb      	ldrh	r3, [r7, #6]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f000 817e 	beq.w	800b4c6 <CircularQueue_Add+0x442>
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	695a      	ldr	r2, [r3, #20]
 800b1ce:	88f9      	ldrh	r1, [r7, #6]
 800b1d0:	7ffb      	ldrb	r3, [r7, #31]
 800b1d2:	440b      	add	r3, r1
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	fb01 f303 	mul.w	r3, r1, r3
 800b1dc:	441a      	add	r2, r3
 800b1de:	8bbb      	ldrh	r3, [r7, #28]
 800b1e0:	441a      	add	r2, r3
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	f200 816d 	bhi.w	800b4c6 <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b1f0:	e14a      	b.n	800b488 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	691a      	ldr	r2, [r3, #16]
 800b1f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b1f8:	441a      	add	r2, r3
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d307      	bcc.n	800b212 <CircularQueue_Add+0x18e>
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	691a      	ldr	r2, [r3, #16]
 800b206:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b208:	441a      	add	r2, r3
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	1ad3      	subs	r3, r2, r3
 800b210:	e003      	b.n	800b21a <CircularQueue_Add+0x196>
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	691a      	ldr	r2, [r3, #16]
 800b216:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b218:	4413      	add	r3, r2
 800b21a:	68fa      	ldr	r2, [r7, #12]
 800b21c:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	691b      	ldr	r3, [r3, #16]
 800b222:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	891b      	ldrh	r3, [r3, #8]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d130      	bne.n	800b28e <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b232:	1c59      	adds	r1, r3, #1
 800b234:	6339      	str	r1, [r7, #48]	@ 0x30
 800b236:	4413      	add	r3, r2
 800b238:	88fa      	ldrh	r2, [r7, #6]
 800b23a:	b2d2      	uxtb	r2, r2
 800b23c:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b244:	429a      	cmp	r2, r3
 800b246:	d304      	bcc.n	800b252 <CircularQueue_Add+0x1ce>
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b24e:	1ad3      	subs	r3, r2, r3
 800b250:	e000      	b.n	800b254 <CircularQueue_Add+0x1d0>
 800b252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b254:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800b256:	88fb      	ldrh	r3, [r7, #6]
 800b258:	0a1b      	lsrs	r3, r3, #8
 800b25a:	b298      	uxth	r0, r3
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b262:	1c59      	adds	r1, r3, #1
 800b264:	6339      	str	r1, [r7, #48]	@ 0x30
 800b266:	4413      	add	r3, r2
 800b268:	b2c2      	uxtb	r2, r0
 800b26a:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b272:	429a      	cmp	r2, r3
 800b274:	d304      	bcc.n	800b280 <CircularQueue_Add+0x1fc>
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b27c:	1ad3      	subs	r3, r2, r3
 800b27e:	e000      	b.n	800b282 <CircularQueue_Add+0x1fe>
 800b280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b282:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	695b      	ldr	r3, [r3, #20]
 800b288:	1c9a      	adds	r2, r3, #2
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800b28e:	88fa      	ldrh	r2, [r7, #6]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6859      	ldr	r1, [r3, #4]
 800b294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b296:	1acb      	subs	r3, r1, r3
 800b298:	4293      	cmp	r3, r2
 800b29a:	bf28      	it	cs
 800b29c:	4613      	movcs	r3, r2
 800b29e:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800b2a0:	88fb      	ldrh	r3, [r7, #6]
 800b2a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d007      	beq.n	800b2b8 <CircularQueue_Add+0x234>
 800b2a8:	88fb      	ldrh	r3, [r7, #6]
 800b2aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d225      	bcs.n	800b2fc <CircularQueue_Add+0x278>
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	7f1b      	ldrb	r3, [r3, #28]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d121      	bne.n	800b2fc <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2be:	18d0      	adds	r0, r2, r3
 800b2c0:	88fb      	ldrh	r3, [r7, #6]
 800b2c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2c4:	fb02 f303 	mul.w	r3, r2, r3
 800b2c8:	68ba      	ldr	r2, [r7, #8]
 800b2ca:	4413      	add	r3, r2
 800b2cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	f002 f9a5 	bl	800d61e <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	695a      	ldr	r2, [r3, #20]
 800b2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2da:	441a      	add	r2, r3
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800b2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e6:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800b2e8:	88fa      	ldrh	r2, [r7, #6]
 800b2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ec:	1ad3      	subs	r3, r2, r3
 800b2ee:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800b2f0:	7ffb      	ldrb	r3, [r7, #31]
 800b2f2:	b29a      	uxth	r2, r3
 800b2f4:	88fb      	ldrh	r3, [r7, #6]
 800b2f6:	4413      	add	r3, r2
 800b2f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800b2fa:	e0a4      	b.n	800b446 <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800b2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f000 80a1 	beq.w	800b446 <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	7f1b      	ldrb	r3, [r3, #28]
 800b308:	f003 0301 	and.w	r3, r3, #1
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d03a      	beq.n	800b386 <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	891b      	ldrh	r3, [r3, #8]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d10d      	bne.n	800b334 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b31e:	3b02      	subs	r3, #2
 800b320:	4413      	add	r3, r2
 800b322:	22ff      	movs	r2, #255	@ 0xff
 800b324:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b32c:	3b01      	subs	r3, #1
 800b32e:	4413      	add	r3, r2
 800b330:	22ff      	movs	r2, #255	@ 0xff
 800b332:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	695a      	ldr	r2, [r3, #20]
 800b338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b33a:	441a      	add	r2, r3
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800b340:	2300      	movs	r3, #0
 800b342:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800b344:	88fb      	ldrh	r3, [r7, #6]
 800b346:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800b348:	2300      	movs	r3, #0
 800b34a:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	891b      	ldrh	r3, [r3, #8]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d16f      	bne.n	800b434 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b35a:	1c59      	adds	r1, r3, #1
 800b35c:	6339      	str	r1, [r7, #48]	@ 0x30
 800b35e:	4413      	add	r3, r2
 800b360:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b362:	b2d2      	uxtb	r2, r2
 800b364:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b368:	0a18      	lsrs	r0, r3, #8
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b370:	1c59      	adds	r1, r3, #1
 800b372:	6339      	str	r1, [r7, #48]	@ 0x30
 800b374:	4413      	add	r3, r2
 800b376:	b2c2      	uxtb	r2, r0
 800b378:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	695b      	ldr	r3, [r3, #20]
 800b37e:	1c9a      	adds	r2, r3, #2
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	615a      	str	r2, [r3, #20]
 800b384:	e056      	b.n	800b434 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	7f1b      	ldrb	r3, [r3, #28]
 800b38a:	f003 0302 	and.w	r3, r3, #2
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d050      	beq.n	800b434 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	891b      	ldrh	r3, [r3, #8]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d14a      	bne.n	800b430 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a0:	3b02      	subs	r3, #2
 800b3a2:	4413      	add	r3, r2
 800b3a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b3a6:	b2d2      	uxtb	r2, r2
 800b3a8:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ac:	0a19      	lsrs	r1, r3, #8
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b4:	3b01      	subs	r3, #1
 800b3b6:	4413      	add	r3, r2
 800b3b8:	b2ca      	uxtb	r2, r1
 800b3ba:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c2:	18d0      	adds	r0, r2, r3
 800b3c4:	88fb      	ldrh	r3, [r7, #6]
 800b3c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3c8:	fb02 f303 	mul.w	r3, r2, r3
 800b3cc:	68ba      	ldr	r2, [r7, #8]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	f002 f923 	bl	800d61e <memcpy>
             q->byteCount += NbBytesToCopy; 
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	695a      	ldr	r2, [r3, #20]
 800b3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3de:	441a      	add	r2, r3
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800b3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e6:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800b3e8:	88fa      	ldrh	r2, [r7, #6]
 800b3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ec:	1ad3      	subs	r3, r2, r3
 800b3ee:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	699b      	ldr	r3, [r3, #24]
 800b3f4:	1c5a      	adds	r2, r3, #1
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b404:	1c59      	adds	r1, r3, #1
 800b406:	6339      	str	r1, [r7, #48]	@ 0x30
 800b408:	4413      	add	r3, r2
 800b40a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b40c:	b2d2      	uxtb	r2, r2
 800b40e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b412:	0a18      	lsrs	r0, r3, #8
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b41a:	1c59      	adds	r1, r3, #1
 800b41c:	6339      	str	r1, [r7, #48]	@ 0x30
 800b41e:	4413      	add	r3, r2
 800b420:	b2c2      	uxtb	r2, r0
 800b422:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	695b      	ldr	r3, [r3, #20]
 800b428:	1c9a      	adds	r2, r3, #2
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	615a      	str	r2, [r3, #20]
 800b42e:	e001      	b.n	800b434 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800b430:	2300      	movs	r3, #0
 800b432:	e049      	b.n	800b4c8 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800b434:	7ffb      	ldrb	r3, [r7, #31]
 800b436:	b29a      	uxth	r2, r3
 800b438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b43a:	b29b      	uxth	r3, r3
 800b43c:	4413      	add	r3, r2
 800b43e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2200      	movs	r2, #0
 800b444:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800b446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d015      	beq.n	800b478 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b452:	18d0      	adds	r0, r2, r3
 800b454:	88fb      	ldrh	r3, [r7, #6]
 800b456:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b458:	fb03 f202 	mul.w	r2, r3, r2
 800b45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b45e:	4413      	add	r3, r2
 800b460:	68ba      	ldr	r2, [r7, #8]
 800b462:	4413      	add	r3, r2
 800b464:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b466:	4619      	mov	r1, r3
 800b468:	f002 f8d9 	bl	800d61e <memcpy>
        q->byteCount += NbBytesToCopy;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	695a      	ldr	r2, [r3, #20]
 800b470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b472:	441a      	add	r2, r3
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	699b      	ldr	r3, [r3, #24]
 800b47c:	1c5a      	adds	r2, r3, #1
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800b482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b484:	3301      	adds	r3, #1
 800b486:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b488:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	f4ff aeb0 	bcc.w	800b1f2 <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6919      	ldr	r1, [r3, #16]
 800b49a:	7ffb      	ldrb	r3, [r7, #31]
 800b49c:	4419      	add	r1, r3
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	4299      	cmp	r1, r3
 800b4a4:	d307      	bcc.n	800b4b6 <CircularQueue_Add+0x432>
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	6919      	ldr	r1, [r3, #16]
 800b4aa:	7ffb      	ldrb	r3, [r7, #31]
 800b4ac:	4419      	add	r1, r3
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	1acb      	subs	r3, r1, r3
 800b4b4:	e003      	b.n	800b4be <CircularQueue_Add+0x43a>
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	6919      	ldr	r1, [r3, #16]
 800b4ba:	7ffb      	ldrb	r3, [r7, #31]
 800b4bc:	440b      	add	r3, r1
 800b4be:	4413      	add	r3, r2
 800b4c0:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800b4c2:	6a3b      	ldr	r3, [r7, #32]
 800b4c4:	e000      	b.n	800b4c8 <CircularQueue_Add+0x444>
    return NULL;
 800b4c6:	2300      	movs	r3, #0
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3738      	adds	r7, #56	@ 0x38
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b085      	sub	sp, #20
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	891b      	ldrh	r3, [r3, #8]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d101      	bne.n	800b4ee <CircularQueue_Remove+0x1e>
 800b4ea:	2302      	movs	r3, #2
 800b4ec:	e000      	b.n	800b4f0 <CircularQueue_Remove+0x20>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	695b      	ldr	r3, [r3, #20]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f000 80ca 	beq.w	800b694 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	891b      	ldrh	r3, [r3, #8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d120      	bne.n	800b54a <CircularQueue_Remove+0x7a>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	4413      	add	r3, r2
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	4618      	mov	r0, r3
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	1c59      	adds	r1, r3, #1
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	4299      	cmp	r1, r3
 800b526:	d306      	bcc.n	800b536 <CircularQueue_Remove+0x66>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	68d9      	ldr	r1, [r3, #12]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	1acb      	subs	r3, r1, r3
 800b532:	3301      	adds	r3, #1
 800b534:	e002      	b.n	800b53c <CircularQueue_Remove+0x6c>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	3301      	adds	r3, #1
 800b53c:	4413      	add	r3, r2
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	021b      	lsls	r3, r3, #8
 800b542:	b29b      	uxth	r3, r3
 800b544:	4403      	add	r3, r0
 800b546:	b29b      	uxth	r3, r3
 800b548:	e001      	b.n	800b54e <CircularQueue_Remove+0x7e>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	891b      	ldrh	r3, [r3, #8]
 800b54e:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	7f1b      	ldrb	r3, [r3, #28]
 800b554:	f003 0301 	and.w	r3, r3, #1
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d056      	beq.n	800b60a <CircularQueue_Remove+0x13a>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	7f1b      	ldrb	r3, [r3, #28]
 800b560:	f003 0302 	and.w	r3, r3, #2
 800b564:	2b00      	cmp	r3, #0
 800b566:	d150      	bne.n	800b60a <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b568:	897b      	ldrh	r3, [r7, #10]
 800b56a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b56e:	4293      	cmp	r3, r2
 800b570:	d103      	bne.n	800b57a <CircularQueue_Remove+0xaa>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	891b      	ldrh	r3, [r3, #8]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d012      	beq.n	800b5a0 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	68da      	ldr	r2, [r3, #12]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b582:	429a      	cmp	r2, r3
 800b584:	d941      	bls.n	800b60a <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	891b      	ldrh	r3, [r3, #8]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d03d      	beq.n	800b60a <CircularQueue_Remove+0x13a>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	685a      	ldr	r2, [r3, #4]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	68db      	ldr	r3, [r3, #12]
 800b596:	1ad3      	subs	r3, r2, r3
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	8912      	ldrh	r2, [r2, #8]
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d234      	bcs.n	800b60a <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	695a      	ldr	r2, [r3, #20]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	68d9      	ldr	r1, [r3, #12]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	1acb      	subs	r3, r1, r3
 800b5ae:	441a      	add	r2, r3
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	891b      	ldrh	r3, [r3, #8]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d120      	bne.n	800b604 <CircularQueue_Remove+0x134>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	68db      	ldr	r3, [r3, #12]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	1c59      	adds	r1, r3, #1
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	4299      	cmp	r1, r3
 800b5e0:	d306      	bcc.n	800b5f0 <CircularQueue_Remove+0x120>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	68d9      	ldr	r1, [r3, #12]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	1acb      	subs	r3, r1, r3
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	e002      	b.n	800b5f6 <CircularQueue_Remove+0x126>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	4413      	add	r3, r2
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	021b      	lsls	r3, r3, #8
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	4403      	add	r3, r0
 800b600:	b29b      	uxth	r3, r3
 800b602:	e001      	b.n	800b608 <CircularQueue_Remove+0x138>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	891b      	ldrh	r3, [r3, #8]
 800b608:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	68d9      	ldr	r1, [r3, #12]
 800b612:	7a7b      	ldrb	r3, [r7, #9]
 800b614:	4419      	add	r1, r3
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	4299      	cmp	r1, r3
 800b61c:	d307      	bcc.n	800b62e <CircularQueue_Remove+0x15e>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	68d9      	ldr	r1, [r3, #12]
 800b622:	7a7b      	ldrb	r3, [r7, #9]
 800b624:	4419      	add	r1, r3
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	1acb      	subs	r3, r1, r3
 800b62c:	e003      	b.n	800b636 <CircularQueue_Remove+0x166>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	68d9      	ldr	r1, [r3, #12]
 800b632:	7a7b      	ldrb	r3, [r7, #9]
 800b634:	440b      	add	r3, r1
 800b636:	4413      	add	r3, r2
 800b638:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	695b      	ldr	r3, [r3, #20]
 800b63e:	8979      	ldrh	r1, [r7, #10]
 800b640:	7a7a      	ldrb	r2, [r7, #9]
 800b642:	440a      	add	r2, r1
 800b644:	1a9a      	subs	r2, r3, r2
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	695b      	ldr	r3, [r3, #20]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d01b      	beq.n	800b68a <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	68da      	ldr	r2, [r3, #12]
 800b656:	897b      	ldrh	r3, [r7, #10]
 800b658:	441a      	add	r2, r3
 800b65a:	7a7b      	ldrb	r3, [r7, #9]
 800b65c:	441a      	add	r2, r3
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	429a      	cmp	r2, r3
 800b664:	d309      	bcc.n	800b67a <CircularQueue_Remove+0x1aa>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	68da      	ldr	r2, [r3, #12]
 800b66a:	897b      	ldrh	r3, [r7, #10]
 800b66c:	441a      	add	r2, r3
 800b66e:	7a7b      	ldrb	r3, [r7, #9]
 800b670:	441a      	add	r2, r3
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	1ad3      	subs	r3, r2, r3
 800b678:	e005      	b.n	800b686 <CircularQueue_Remove+0x1b6>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	68da      	ldr	r2, [r3, #12]
 800b67e:	897b      	ldrh	r3, [r7, #10]
 800b680:	441a      	add	r2, r3
 800b682:	7a7b      	ldrb	r3, [r7, #9]
 800b684:	4413      	add	r3, r2
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	699b      	ldr	r3, [r3, #24]
 800b68e:	1e5a      	subs	r2, r3, #1
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d002      	beq.n	800b6a0 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	897a      	ldrh	r2, [r7, #10]
 800b69e:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3714      	adds	r7, #20
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr

0800b6ae <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800b6ae:	b480      	push	{r7}
 800b6b0:	b087      	sub	sp, #28
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
 800b6b6:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	891b      	ldrh	r3, [r3, #8]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d101      	bne.n	800b6cc <CircularQueue_Sense+0x1e>
 800b6c8:	2302      	movs	r3, #2
 800b6ca:	e000      	b.n	800b6ce <CircularQueue_Sense+0x20>
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	695b      	ldr	r3, [r3, #20]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f000 808e 	beq.w	800b7fe <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	68db      	ldr	r3, [r3, #12]
 800b6e6:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	891b      	ldrh	r3, [r3, #8]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d120      	bne.n	800b732 <CircularQueue_Sense+0x84>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	4413      	add	r3, r2
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	1c59      	adds	r1, r3, #1
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	4299      	cmp	r1, r3
 800b70e:	d306      	bcc.n	800b71e <CircularQueue_Sense+0x70>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	68d9      	ldr	r1, [r3, #12]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	1acb      	subs	r3, r1, r3
 800b71a:	3301      	adds	r3, #1
 800b71c:	e002      	b.n	800b724 <CircularQueue_Sense+0x76>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	68db      	ldr	r3, [r3, #12]
 800b722:	3301      	adds	r3, #1
 800b724:	4413      	add	r3, r2
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	021b      	lsls	r3, r3, #8
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	4403      	add	r3, r0
 800b72e:	b29b      	uxth	r3, r3
 800b730:	e001      	b.n	800b736 <CircularQueue_Sense+0x88>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	891b      	ldrh	r3, [r3, #8]
 800b736:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	7f1b      	ldrb	r3, [r3, #28]
 800b73c:	f003 0301 	and.w	r3, r3, #1
 800b740:	2b00      	cmp	r3, #0
 800b742:	d047      	beq.n	800b7d4 <CircularQueue_Sense+0x126>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	7f1b      	ldrb	r3, [r3, #28]
 800b748:	f003 0302 	and.w	r3, r3, #2
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d141      	bne.n	800b7d4 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b750:	8a7b      	ldrh	r3, [r7, #18]
 800b752:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b756:	4293      	cmp	r3, r2
 800b758:	d103      	bne.n	800b762 <CircularQueue_Sense+0xb4>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	891b      	ldrh	r3, [r3, #8]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d012      	beq.n	800b788 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	68da      	ldr	r2, [r3, #12]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d932      	bls.n	800b7d4 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	891b      	ldrh	r3, [r3, #8]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d02e      	beq.n	800b7d4 <CircularQueue_Sense+0x126>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	685a      	ldr	r2, [r3, #4]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	1ad3      	subs	r3, r2, r3
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	8912      	ldrh	r2, [r2, #8]
 800b784:	4293      	cmp	r3, r2
 800b786:	d225      	bcs.n	800b7d4 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800b788:	2300      	movs	r3, #0
 800b78a:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	891b      	ldrh	r3, [r3, #8]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d11c      	bne.n	800b7ce <CircularQueue_Sense+0x120>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	4413      	add	r3, r2
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	1c59      	adds	r1, r3, #1
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	4299      	cmp	r1, r3
 800b7ae:	d305      	bcc.n	800b7bc <CircularQueue_Sense+0x10e>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	68f9      	ldr	r1, [r7, #12]
 800b7b6:	1acb      	subs	r3, r1, r3
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	e001      	b.n	800b7c0 <CircularQueue_Sense+0x112>
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	4413      	add	r3, r2
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	021b      	lsls	r3, r3, #8
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	4403      	add	r3, r0
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	e001      	b.n	800b7d2 <CircularQueue_Sense+0x124>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	891b      	ldrh	r3, [r3, #8]
 800b7d2:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	7af9      	ldrb	r1, [r7, #11]
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	4419      	add	r1, r3
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	4299      	cmp	r1, r3
 800b7e4:	d306      	bcc.n	800b7f4 <CircularQueue_Sense+0x146>
 800b7e6:	7af9      	ldrb	r1, [r7, #11]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	4419      	add	r1, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	1acb      	subs	r3, r1, r3
 800b7f2:	e002      	b.n	800b7fa <CircularQueue_Sense+0x14c>
 800b7f4:	7af9      	ldrb	r1, [r7, #11]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	440b      	add	r3, r1
 800b7fa:	4413      	add	r3, r2
 800b7fc:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d002      	beq.n	800b80a <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	8a7a      	ldrh	r2, [r7, #18]
 800b808:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800b80a:	697b      	ldr	r3, [r7, #20]
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	371c      	adds	r7, #28
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr

0800b818 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800b818:	b480      	push	{r7}
 800b81a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800b81c:	4b03      	ldr	r3, [pc, #12]	@ (800b82c <LL_FLASH_GetUDN+0x14>)
 800b81e:	681b      	ldr	r3, [r3, #0]
}
 800b820:	4618      	mov	r0, r3
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr
 800b82a:	bf00      	nop
 800b82c:	1fff7580 	.word	0x1fff7580

0800b830 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800b830:	b480      	push	{r7}
 800b832:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800b834:	4b03      	ldr	r3, [pc, #12]	@ (800b844 <LL_FLASH_GetDeviceID+0x14>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	b2db      	uxtb	r3, r3
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr
 800b844:	1fff7584 	.word	0x1fff7584

0800b848 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800b848:	b480      	push	{r7}
 800b84a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800b84c:	4b03      	ldr	r3, [pc, #12]	@ (800b85c <LL_FLASH_GetSTCompanyID+0x14>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	0a1b      	lsrs	r3, r3, #8
}
 800b852:	4618      	mov	r0, r3
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	1fff7584 	.word	0x1fff7584

0800b860 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800b860:	b5b0      	push	{r4, r5, r7, lr}
 800b862:	b090      	sub	sp, #64	@ 0x40
 800b864:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b866:	2392      	movs	r3, #146	@ 0x92
 800b868:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800b86c:	4b32      	ldr	r3, [pc, #200]	@ (800b938 <APP_BLE_Init+0xd8>)
 800b86e:	463c      	mov	r4, r7
 800b870:	461d      	mov	r5, r3
 800b872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b878:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b87a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b87c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b87e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b882:	c403      	stmia	r4!, {r0, r1}
 800b884:	8022      	strh	r2, [r4, #0]
 800b886:	3402      	adds	r4, #2
 800b888:	0c13      	lsrs	r3, r2, #16
 800b88a:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800b88c:	f000 fa66 	bl	800bd5c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800b890:	2101      	movs	r1, #1
 800b892:	2002      	movs	r0, #2
 800b894:	f001 f938 	bl	800cb08 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800b898:	4a28      	ldr	r2, [pc, #160]	@ (800b93c <APP_BLE_Init+0xdc>)
 800b89a:	2100      	movs	r1, #0
 800b89c:	2002      	movs	r0, #2
 800b89e:	f001 fae5 	bl	800ce6c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800b8a2:	463b      	mov	r3, r7
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f7fe fc05 	bl	800a0b4 <SHCI_C2_BLE_Init>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800b8b0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d008      	beq.n	800b8ca <APP_BLE_Init+0x6a>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800b8b8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800b8bc:	4619      	mov	r1, r3
 800b8be:	4820      	ldr	r0, [pc, #128]	@ (800b940 <APP_BLE_Init+0xe0>)
 800b8c0:	f001 fce2 	bl	800d288 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800b8c4:	f7f6 ff42 	bl	800274c <Error_Handler>
 800b8c8:	e002      	b.n	800b8d0 <APP_BLE_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800b8ca:	481e      	ldr	r0, [pc, #120]	@ (800b944 <APP_BLE_Init+0xe4>)
 800b8cc:	f001 fcdc 	bl	800d288 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800b8d0:	f000 fa5a 	bl	800bd88 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800b8d4:	f7fe fb48 	bl	8009f68 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b8d8:	4b1b      	ldr	r3, [pc, #108]	@ (800b948 <APP_BLE_Init+0xe8>)
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800b8e0:	4b19      	ldr	r3, [pc, #100]	@ (800b948 <APP_BLE_Init+0xe8>)
 800b8e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b8e6:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800b8e8:	4a18      	ldr	r2, [pc, #96]	@ (800b94c <APP_BLE_Init+0xec>)
 800b8ea:	2100      	movs	r1, #0
 800b8ec:	2001      	movs	r0, #1
 800b8ee:	f001 fabd 	bl	800ce6c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800b8f2:	2006      	movs	r0, #6
 800b8f4:	f7fe f9ac 	bl	8009c50 <aci_hal_set_radio_activity_mask>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800b8fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b902:	2b00      	cmp	r3, #0
 800b904:	d006      	beq.n	800b914 <APP_BLE_Init+0xb4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800b906:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b90a:	4619      	mov	r1, r3
 800b90c:	4810      	ldr	r0, [pc, #64]	@ (800b950 <APP_BLE_Init+0xf0>)
 800b90e:	f001 fcbb 	bl	800d288 <iprintf>
 800b912:	e002      	b.n	800b91a <APP_BLE_Init+0xba>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800b914:	480f      	ldr	r0, [pc, #60]	@ (800b954 <APP_BLE_Init+0xf4>)
 800b916:	f001 fcb7 	bl	800d288 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800b91a:	f000 fd04 	bl	800c326 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800b91e:	4b0a      	ldr	r3, [pc, #40]	@ (800b948 <APP_BLE_Init+0xe8>)
 800b920:	2200      	movs	r2, #0
 800b922:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800b924:	4b08      	ldr	r3, [pc, #32]	@ (800b948 <APP_BLE_Init+0xe8>)
 800b926:	2200      	movs	r2, #0
 800b928:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800b92a:	2001      	movs	r0, #1
 800b92c:	f000 fbba 	bl	800c0a4 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800b930:	bf00      	nop
}
 800b932:	3740      	adds	r7, #64	@ 0x40
 800b934:	46bd      	mov	sp, r7
 800b936:	bdb0      	pop	{r4, r5, r7, pc}
 800b938:	0800e52c 	.word	0x0800e52c
 800b93c:	0800a2d1 	.word	0x0800a2d1
 800b940:	0800e450 	.word	0x0800e450
 800b944:	0800e488 	.word	0x0800e488
 800b948:	200017f0 	.word	0x200017f0
 800b94c:	0800c1cd 	.word	0x0800c1cd
 800b950:	0800e4b0 	.word	0x0800e4b0
 800b954:	0800e4f4 	.word	0x0800e4f4

0800b958 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800b958:	b5b0      	push	{r4, r5, r7, lr}
 800b95a:	b090      	sub	sp, #64	@ 0x40
 800b95c:	af04      	add	r7, sp, #16
 800b95e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800b960:	2392      	movs	r3, #146	@ 0x92
 800b962:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	3301      	adds	r3, #1
 800b96a:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 800b96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	2bff      	cmp	r3, #255	@ 0xff
 800b972:	f000 80e9 	beq.w	800bb48 <SVCCTL_App_Notification+0x1f0>
 800b976:	2bff      	cmp	r3, #255	@ 0xff
 800b978:	f300 81d9 	bgt.w	800bd2e <SVCCTL_App_Notification+0x3d6>
 800b97c:	2b3e      	cmp	r3, #62	@ 0x3e
 800b97e:	d042      	beq.n	800ba06 <SVCCTL_App_Notification+0xae>
 800b980:	2b3e      	cmp	r3, #62	@ 0x3e
 800b982:	f300 81d4 	bgt.w	800bd2e <SVCCTL_App_Notification+0x3d6>
 800b986:	2b05      	cmp	r3, #5
 800b988:	d002      	beq.n	800b990 <SVCCTL_App_Notification+0x38>
 800b98a:	2b10      	cmp	r3, #16
 800b98c:	d02e      	beq.n	800b9ec <SVCCTL_App_Notification+0x94>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800b98e:	e1ce      	b.n	800bd2e <SVCCTL_App_Notification+0x3d6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800b990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b992:	3302      	adds	r3, #2
 800b994:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b99c:	b29a      	uxth	r2, r3
 800b99e:	4bb3      	ldr	r3, [pc, #716]	@ (800bc6c <SVCCTL_App_Notification+0x314>)
 800b9a0:	8adb      	ldrh	r3, [r3, #22]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d114      	bne.n	800b9d0 <SVCCTL_App_Notification+0x78>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800b9a6:	4bb1      	ldr	r3, [pc, #708]	@ (800bc6c <SVCCTL_App_Notification+0x314>)
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b9ac:	4baf      	ldr	r3, [pc, #700]	@ (800bc6c <SVCCTL_App_Notification+0x314>)
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800b9b4:	48ae      	ldr	r0, [pc, #696]	@ (800bc70 <SVCCTL_App_Notification+0x318>)
 800b9b6:	f001 fcd7 	bl	800d368 <puts>
                    p_disconnection_complete_event->Connection_Handle,
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b9c0:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800b9c2:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	48aa      	ldr	r0, [pc, #680]	@ (800bc74 <SVCCTL_App_Notification+0x31c>)
 800b9cc:	f001 fc5c 	bl	800d288 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800b9d0:	2001      	movs	r0, #1
 800b9d2:	f000 fb67 	bl	800c0a4 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800b9d6:	4ba8      	ldr	r3, [pc, #672]	@ (800bc78 <SVCCTL_App_Notification+0x320>)
 800b9d8:	2201      	movs	r2, #1
 800b9da:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b9dc:	4ba3      	ldr	r3, [pc, #652]	@ (800bc6c <SVCCTL_App_Notification+0x314>)
 800b9de:	8ada      	ldrh	r2, [r3, #22]
 800b9e0:	4ba5      	ldr	r3, [pc, #660]	@ (800bc78 <SVCCTL_App_Notification+0x320>)
 800b9e2:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800b9e4:	48a4      	ldr	r0, [pc, #656]	@ (800bc78 <SVCCTL_App_Notification+0x320>)
 800b9e6:	f000 fc8a 	bl	800c2fe <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800b9ea:	e1a3      	b.n	800bd34 <SVCCTL_App_Notification+0x3dc>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 800b9ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ee:	3302      	adds	r3, #2
 800b9f0:	60fb      	str	r3, [r7, #12]
      APP_DBG_MSG(">>== HCI_HARDWARE_ERROR_EVT_CODE\n");
 800b9f2:	48a2      	ldr	r0, [pc, #648]	@ (800bc7c <SVCCTL_App_Notification+0x324>)
 800b9f4:	f001 fcb8 	bl	800d368 <puts>
      APP_DBG_MSG("Hardware Code = 0x%02X\n",p_hardware_error_event->Hardware_Code);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	48a0      	ldr	r0, [pc, #640]	@ (800bc80 <SVCCTL_App_Notification+0x328>)
 800ba00:	f001 fc42 	bl	800d288 <iprintf>
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 800ba04:	e196      	b.n	800bd34 <SVCCTL_App_Notification+0x3dc>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800ba06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba08:	3302      	adds	r3, #2
 800ba0a:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d02e      	beq.n	800ba72 <SVCCTL_App_Notification+0x11a>
 800ba14:	2b03      	cmp	r3, #3
 800ba16:	f040 8095 	bne.w	800bb44 <SVCCTL_App_Notification+0x1ec>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800ba1a:	69bb      	ldr	r3, [r7, #24]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800ba20:	4898      	ldr	r0, [pc, #608]	@ (800bc84 <SVCCTL_App_Notification+0x32c>)
 800ba22:	f001 fca1 	bl	800d368 <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ba2c:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7f4 fe7a 	bl	8000728 <__aeabi_i2d>
 800ba34:	f04f 0200 	mov.w	r2, #0
 800ba38:	4b93      	ldr	r3, [pc, #588]	@ (800bc88 <SVCCTL_App_Notification+0x330>)
 800ba3a:	f7f4 fbf9 	bl	8000230 <__aeabi_dmul>
 800ba3e:	4602      	mov	r2, r0
 800ba40:	460b      	mov	r3, r1
 800ba42:	4610      	mov	r0, r2
 800ba44:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800ba4c:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800ba4e:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800ba5a:	4613      	mov	r3, r2
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	4413      	add	r3, r2
 800ba60:	005b      	lsls	r3, r3, #1
 800ba62:	9301      	str	r3, [sp, #4]
 800ba64:	9400      	str	r4, [sp, #0]
 800ba66:	4602      	mov	r2, r0
 800ba68:	460b      	mov	r3, r1
 800ba6a:	4888      	ldr	r0, [pc, #544]	@ (800bc8c <SVCCTL_App_Notification+0x334>)
 800ba6c:	f001 fc0c 	bl	800d288 <iprintf>
          break;
 800ba70:	e069      	b.n	800bb46 <SVCCTL_App_Notification+0x1ee>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800ba72:	69bb      	ldr	r3, [r7, #24]
 800ba74:	3301      	adds	r3, #1
 800ba76:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	4619      	mov	r1, r3
 800ba82:	4883      	ldr	r0, [pc, #524]	@ (800bc90 <SVCCTL_App_Notification+0x338>)
 800ba84:	f001 fc00 	bl	800d288 <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800ba8c:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800ba92:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800ba98:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800ba9e:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800baa4:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800baaa:	9302      	str	r3, [sp, #8]
 800baac:	9101      	str	r1, [sp, #4]
 800baae:	9200      	str	r2, [sp, #0]
 800bab0:	462b      	mov	r3, r5
 800bab2:	4622      	mov	r2, r4
 800bab4:	4601      	mov	r1, r0
 800bab6:	4877      	ldr	r0, [pc, #476]	@ (800bc94 <SVCCTL_App_Notification+0x33c>)
 800bab8:	f001 fbe6 	bl	800d288 <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800bac2:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800bac4:	4618      	mov	r0, r3
 800bac6:	f7f4 fe2f 	bl	8000728 <__aeabi_i2d>
 800baca:	f04f 0200 	mov.w	r2, #0
 800bace:	4b6e      	ldr	r3, [pc, #440]	@ (800bc88 <SVCCTL_App_Notification+0x330>)
 800bad0:	f7f4 fbae 	bl	8000230 <__aeabi_dmul>
 800bad4:	4602      	mov	r2, r0
 800bad6:	460b      	mov	r3, r1
 800bad8:	4610      	mov	r0, r2
 800bada:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800bae2:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800bae4:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800baec:	b29b      	uxth	r3, r3
 800baee:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800baf0:	4613      	mov	r3, r2
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	4413      	add	r3, r2
 800baf6:	005b      	lsls	r3, r3, #1
 800baf8:	9301      	str	r3, [sp, #4]
 800bafa:	9400      	str	r4, [sp, #0]
 800bafc:	4602      	mov	r2, r0
 800bafe:	460b      	mov	r3, r1
 800bb00:	4862      	ldr	r0, [pc, #392]	@ (800bc8c <SVCCTL_App_Notification+0x334>)
 800bb02:	f001 fbc1 	bl	800d288 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800bb06:	4b59      	ldr	r3, [pc, #356]	@ (800bc6c <SVCCTL_App_Notification+0x314>)
 800bb08:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bb0c:	2b04      	cmp	r3, #4
 800bb0e:	d104      	bne.n	800bb1a <SVCCTL_App_Notification+0x1c2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800bb10:	4b56      	ldr	r3, [pc, #344]	@ (800bc6c <SVCCTL_App_Notification+0x314>)
 800bb12:	2206      	movs	r2, #6
 800bb14:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800bb18:	e003      	b.n	800bb22 <SVCCTL_App_Notification+0x1ca>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800bb1a:	4b54      	ldr	r3, [pc, #336]	@ (800bc6c <SVCCTL_App_Notification+0x314>)
 800bb1c:	2205      	movs	r2, #5
 800bb1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bb28:	b29a      	uxth	r2, r3
 800bb2a:	4b50      	ldr	r3, [pc, #320]	@ (800bc6c <SVCCTL_App_Notification+0x314>)
 800bb2c:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800bb2e:	4b52      	ldr	r3, [pc, #328]	@ (800bc78 <SVCCTL_App_Notification+0x320>)
 800bb30:	2200      	movs	r2, #0
 800bb32:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800bb34:	4b4d      	ldr	r3, [pc, #308]	@ (800bc6c <SVCCTL_App_Notification+0x314>)
 800bb36:	8ada      	ldrh	r2, [r3, #22]
 800bb38:	4b4f      	ldr	r3, [pc, #316]	@ (800bc78 <SVCCTL_App_Notification+0x320>)
 800bb3a:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800bb3c:	484e      	ldr	r0, [pc, #312]	@ (800bc78 <SVCCTL_App_Notification+0x320>)
 800bb3e:	f000 fbde 	bl	800c2fe <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800bb42:	e000      	b.n	800bb46 <SVCCTL_App_Notification+0x1ee>
          break;
 800bb44:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800bb46:	e0f5      	b.n	800bd34 <SVCCTL_App_Notification+0x3dc>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800bb48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb4a:	3302      	adds	r3, #2
 800bb4c:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 800bb4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb50:	881b      	ldrh	r3, [r3, #0]
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	f000 80ce 	beq.w	800bcfa <SVCCTL_App_Notification+0x3a2>
 800bb5e:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800bb62:	4293      	cmp	r3, r2
 800bb64:	f300 80e5 	bgt.w	800bd32 <SVCCTL_App_Notification+0x3da>
 800bb68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb6c:	f000 80db 	beq.w	800bd26 <SVCCTL_App_Notification+0x3ce>
 800bb70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb74:	f300 80dd 	bgt.w	800bd32 <SVCCTL_App_Notification+0x3da>
 800bb78:	f240 420a 	movw	r2, #1034	@ 0x40a
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	f300 80d8 	bgt.w	800bd32 <SVCCTL_App_Notification+0x3da>
 800bb82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb86:	dc06      	bgt.n	800bb96 <SVCCTL_App_Notification+0x23e>
 800bb88:	2b04      	cmp	r3, #4
 800bb8a:	f000 80ce 	beq.w	800bd2a <SVCCTL_App_Notification+0x3d2>
 800bb8e:	2b06      	cmp	r3, #6
 800bb90:	f000 80bc 	beq.w	800bd0c <SVCCTL_App_Notification+0x3b4>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800bb94:	e0cd      	b.n	800bd32 <SVCCTL_App_Notification+0x3da>
      switch (p_blecore_evt->ecode)
 800bb96:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800bb9a:	2b09      	cmp	r3, #9
 800bb9c:	f200 80c9 	bhi.w	800bd32 <SVCCTL_App_Notification+0x3da>
 800bba0:	a201      	add	r2, pc, #4	@ (adr r2, 800bba8 <SVCCTL_App_Notification+0x250>)
 800bba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba6:	bf00      	nop
 800bba8:	0800bcc5 	.word	0x0800bcc5
 800bbac:	0800bbe1 	.word	0x0800bbe1
 800bbb0:	0800bd33 	.word	0x0800bd33
 800bbb4:	0800bd33 	.word	0x0800bd33
 800bbb8:	0800bd33 	.word	0x0800bd33
 800bbbc:	0800bd33 	.word	0x0800bd33
 800bbc0:	0800bbd1 	.word	0x0800bbd1
 800bbc4:	0800bd33 	.word	0x0800bd33
 800bbc8:	0800bc17 	.word	0x0800bc17
 800bbcc:	0800bbd9 	.word	0x0800bbd9
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800bbd0:	4831      	ldr	r0, [pc, #196]	@ (800bc98 <SVCCTL_App_Notification+0x340>)
 800bbd2:	f001 fb59 	bl	800d288 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800bbd6:	e0a9      	b.n	800bd2c <SVCCTL_App_Notification+0x3d4>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800bbd8:	4830      	ldr	r0, [pc, #192]	@ (800bc9c <SVCCTL_App_Notification+0x344>)
 800bbda:	f001 fbc5 	bl	800d368 <puts>
          break;
 800bbde:	e0a5      	b.n	800bd2c <SVCCTL_App_Notification+0x3d4>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800bbe0:	482f      	ldr	r0, [pc, #188]	@ (800bca0 <SVCCTL_App_Notification+0x348>)
 800bbe2:	f001 fbc1 	bl	800d368 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800bbe6:	4b21      	ldr	r3, [pc, #132]	@ (800bc6c <SVCCTL_App_Notification+0x314>)
 800bbe8:	8adb      	ldrh	r3, [r3, #22]
 800bbea:	492e      	ldr	r1, [pc, #184]	@ (800bca4 <SVCCTL_App_Notification+0x34c>)
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7fd fa31 	bl	8009054 <aci_gap_pass_key_resp>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800bbf8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d006      	beq.n	800bc0e <SVCCTL_App_Notification+0x2b6>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800bc00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bc04:	4619      	mov	r1, r3
 800bc06:	4828      	ldr	r0, [pc, #160]	@ (800bca8 <SVCCTL_App_Notification+0x350>)
 800bc08:	f001 fb3e 	bl	800d288 <iprintf>
          break;
 800bc0c:	e08e      	b.n	800bd2c <SVCCTL_App_Notification+0x3d4>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800bc0e:	4827      	ldr	r0, [pc, #156]	@ (800bcac <SVCCTL_App_Notification+0x354>)
 800bc10:	f001 fbaa 	bl	800d368 <puts>
          break;
 800bc14:	e08a      	b.n	800bd2c <SVCCTL_App_Notification+0x3d4>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800bc16:	4826      	ldr	r0, [pc, #152]	@ (800bcb0 <SVCCTL_App_Notification+0x358>)
 800bc18:	f001 fba6 	bl	800d368 <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800bc1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc1e:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800bc20:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800bc24:	4619      	mov	r1, r3
 800bc26:	4823      	ldr	r0, [pc, #140]	@ (800bcb4 <SVCCTL_App_Notification+0x35c>)
 800bc28:	f001 fb2e 	bl	800d288 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800bc2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc2e:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800bc30:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800bc34:	4619      	mov	r1, r3
 800bc36:	4820      	ldr	r0, [pc, #128]	@ (800bcb8 <SVCCTL_App_Notification+0x360>)
 800bc38:	f001 fb26 	bl	800d288 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800bc3c:	4b0b      	ldr	r3, [pc, #44]	@ (800bc6c <SVCCTL_App_Notification+0x314>)
 800bc3e:	8adb      	ldrh	r3, [r3, #22]
 800bc40:	2101      	movs	r1, #1
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7fd fbb0 	bl	80093a8 <aci_gap_numeric_comparison_value_confirm_yesno>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800bc4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d006      	beq.n	800bc64 <SVCCTL_App_Notification+0x30c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800bc56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	4817      	ldr	r0, [pc, #92]	@ (800bcbc <SVCCTL_App_Notification+0x364>)
 800bc5e:	f001 fb13 	bl	800d288 <iprintf>
          break;
 800bc62:	e063      	b.n	800bd2c <SVCCTL_App_Notification+0x3d4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800bc64:	4816      	ldr	r0, [pc, #88]	@ (800bcc0 <SVCCTL_App_Notification+0x368>)
 800bc66:	f001 fb7f 	bl	800d368 <puts>
          break;
 800bc6a:	e05f      	b.n	800bd2c <SVCCTL_App_Notification+0x3d4>
 800bc6c:	200017f0 	.word	0x200017f0
 800bc70:	0800e568 	.word	0x0800e568
 800bc74:	0800e594 	.word	0x0800e594
 800bc78:	20001874 	.word	0x20001874
 800bc7c:	0800e5d0 	.word	0x0800e5d0
 800bc80:	0800e5f4 	.word	0x0800e5f4
 800bc84:	0800e60c 	.word	0x0800e60c
 800bc88:	3ff40000 	.word	0x3ff40000
 800bc8c:	0800e640 	.word	0x0800e640
 800bc90:	0800e6ac 	.word	0x0800e6ac
 800bc94:	0800e6f4 	.word	0x0800e6f4
 800bc98:	0800e744 	.word	0x0800e744
 800bc9c:	0800e76c 	.word	0x0800e76c
 800bca0:	0800e79c 	.word	0x0800e79c
 800bca4:	0001b207 	.word	0x0001b207
 800bca8:	0800e7c4 	.word	0x0800e7c4
 800bcac:	0800e7f8 	.word	0x0800e7f8
 800bcb0:	0800e820 	.word	0x0800e820
 800bcb4:	0800e854 	.word	0x0800e854
 800bcb8:	0800e870 	.word	0x0800e870
 800bcbc:	0800e888 	.word	0x0800e888
 800bcc0:	0800e8d8 	.word	0x0800e8d8
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800bcc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc6:	3302      	adds	r3, #2
 800bcc8:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800bcca:	481d      	ldr	r0, [pc, #116]	@ (800bd40 <SVCCTL_App_Notification+0x3e8>)
 800bccc:	f001 fb4c 	bl	800d368 <puts>
          if (p_pairing_complete->Status != 0)
 800bcd0:	6a3b      	ldr	r3, [r7, #32]
 800bcd2:	789b      	ldrb	r3, [r3, #2]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d009      	beq.n	800bcec <SVCCTL_App_Notification+0x394>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800bcd8:	6a3b      	ldr	r3, [r7, #32]
 800bcda:	789b      	ldrb	r3, [r3, #2]
 800bcdc:	4619      	mov	r1, r3
 800bcde:	6a3b      	ldr	r3, [r7, #32]
 800bce0:	78db      	ldrb	r3, [r3, #3]
 800bce2:	461a      	mov	r2, r3
 800bce4:	4817      	ldr	r0, [pc, #92]	@ (800bd44 <SVCCTL_App_Notification+0x3ec>)
 800bce6:	f001 facf 	bl	800d288 <iprintf>
 800bcea:	e002      	b.n	800bcf2 <SVCCTL_App_Notification+0x39a>
            APP_DBG_MSG("     - Pairing Success\n");
 800bcec:	4816      	ldr	r0, [pc, #88]	@ (800bd48 <SVCCTL_App_Notification+0x3f0>)
 800bcee:	f001 fb3b 	bl	800d368 <puts>
          APP_DBG_MSG("\n");
 800bcf2:	200a      	movs	r0, #10
 800bcf4:	f001 fada 	bl	800d2ac <putchar>
          break;
 800bcf8:	e018      	b.n	800bd2c <SVCCTL_App_Notification+0x3d4>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 800bcfa:	4814      	ldr	r0, [pc, #80]	@ (800bd4c <SVCCTL_App_Notification+0x3f4>)
 800bcfc:	f001 fac4 	bl	800d288 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800bd00:	4b13      	ldr	r3, [pc, #76]	@ (800bd50 <SVCCTL_App_Notification+0x3f8>)
 800bd02:	8adb      	ldrh	r3, [r3, #22]
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7fd fe62 	bl	80099ce <aci_gatt_confirm_indication>
        break;
 800bd0a:	e00f      	b.n	800bd2c <SVCCTL_App_Notification+0x3d4>
	      p_warning_event = (aci_hal_warning_event_rp0 *)p_blecore_evt->data;
 800bd0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd0e:	3302      	adds	r3, #2
 800bd10:	61fb      	str	r3, [r7, #28]
          APP_DBG_MSG(">>== ACI_HAL_WARNING_VSEVT_CODE\n");
 800bd12:	4810      	ldr	r0, [pc, #64]	@ (800bd54 <SVCCTL_App_Notification+0x3fc>)
 800bd14:	f001 fb28 	bl	800d368 <puts>
          APP_DBG_MSG("Warning Type = 0x%02X\n", p_warning_event->Warning_Type);
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	480e      	ldr	r0, [pc, #56]	@ (800bd58 <SVCCTL_App_Notification+0x400>)
 800bd20:	f001 fab2 	bl	800d288 <iprintf>
          break;
 800bd24:	e002      	b.n	800bd2c <SVCCTL_App_Notification+0x3d4>
          break;
 800bd26:	bf00      	nop
 800bd28:	e003      	b.n	800bd32 <SVCCTL_App_Notification+0x3da>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800bd2a:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800bd2c:	e001      	b.n	800bd32 <SVCCTL_App_Notification+0x3da>
      break;
 800bd2e:	bf00      	nop
 800bd30:	e000      	b.n	800bd34 <SVCCTL_App_Notification+0x3dc>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800bd32:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800bd34:	2301      	movs	r3, #1
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3730      	adds	r7, #48	@ 0x30
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bdb0      	pop	{r4, r5, r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	0800e920 	.word	0x0800e920
 800bd44:	0800e94c 	.word	0x0800e94c
 800bd48:	0800e988 	.word	0x0800e988
 800bd4c:	0800e9a0 	.word	0x0800e9a0
 800bd50:	200017f0 	.word	0x200017f0
 800bd54:	0800e9c8 	.word	0x0800e9c8
 800bd58:	0800e9e8 	.word	0x0800e9e8

0800bd5c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800bd62:	4b06      	ldr	r3, [pc, #24]	@ (800bd7c <Ble_Tl_Init+0x20>)
 800bd64:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800bd66:	4b06      	ldr	r3, [pc, #24]	@ (800bd80 <Ble_Tl_Init+0x24>)
 800bd68:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800bd6a:	463b      	mov	r3, r7
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	4805      	ldr	r0, [pc, #20]	@ (800bd84 <Ble_Tl_Init+0x28>)
 800bd70:	f7fe fa92 	bl	800a298 <hci_init>

  return;
 800bd74:	bf00      	nop
}
 800bd76:	3708      	adds	r7, #8
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	200300d8 	.word	0x200300d8
 800bd80:	0800c2a1 	.word	0x0800c2a1
 800bd84:	0800c269 	.word	0x0800c269

0800bd88 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800bd88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd8a:	b08d      	sub	sp, #52	@ 0x34
 800bd8c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800bd8e:	2300      	movs	r3, #0
 800bd90:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bd92:	2392      	movs	r3, #146	@ 0x92
 800bd94:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800bd96:	48a5      	ldr	r0, [pc, #660]	@ (800c02c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bd98:	f001 fae6 	bl	800d368 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800bd9c:	f7fd ffac 	bl	8009cf8 <hci_reset>
 800bda0:	4603      	mov	r3, r0
 800bda2:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bda4:	7dfb      	ldrb	r3, [r7, #23]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d005      	beq.n	800bdb6 <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800bdaa:	7dfb      	ldrb	r3, [r7, #23]
 800bdac:	4619      	mov	r1, r3
 800bdae:	48a0      	ldr	r0, [pc, #640]	@ (800c030 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800bdb0:	f001 fa6a 	bl	800d288 <iprintf>
 800bdb4:	e002      	b.n	800bdbc <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800bdb6:	489f      	ldr	r0, [pc, #636]	@ (800c034 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800bdb8:	f001 fad6 	bl	800d368 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800bdbc:	f000 f9c2 	bl	800c144 <BleGetBdAddress>
 800bdc0:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, CONFIG_DATA_PUBLIC_ADDRESS_LEN, (uint8_t*) p_bd_addr);
 800bdc2:	693a      	ldr	r2, [r7, #16]
 800bdc4:	2106      	movs	r1, #6
 800bdc6:	2000      	movs	r0, #0
 800bdc8:	f7fd fe56 	bl	8009a78 <aci_hal_write_config_data>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bdd0:	7dfb      	ldrb	r3, [r7, #23]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d005      	beq.n	800bde2 <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, result: 0x%x \n", ret);
 800bdd6:	7dfb      	ldrb	r3, [r7, #23]
 800bdd8:	4619      	mov	r1, r3
 800bdda:	4897      	ldr	r0, [pc, #604]	@ (800c038 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800bddc:	f001 fa54 	bl	800d288 <iprintf>
 800bde0:	e021      	b.n	800be26 <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBLIC_ADDRESS_OFFSET\n");
 800bde2:	4896      	ldr	r0, [pc, #600]	@ (800c03c <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800bde4:	f001 fac0 	bl	800d368 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	3305      	adds	r3, #5
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	3304      	adds	r3, #4
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	461c      	mov	r4, r3
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	3303      	adds	r3, #3
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	461d      	mov	r5, r3
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	3302      	adds	r3, #2
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	461a      	mov	r2, r3
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	3301      	adds	r3, #1
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	4619      	mov	r1, r3
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	9302      	str	r3, [sp, #8]
 800be16:	9101      	str	r1, [sp, #4]
 800be18:	9200      	str	r2, [sp, #0]
 800be1a:	462b      	mov	r3, r5
 800be1c:	4622      	mov	r2, r4
 800be1e:	4601      	mov	r1, r0
 800be20:	4887      	ldr	r0, [pc, #540]	@ (800c040 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800be22:	f001 fa31 	bl	800d288 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800be26:	4a87      	ldr	r2, [pc, #540]	@ (800c044 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800be28:	2110      	movs	r1, #16
 800be2a:	2018      	movs	r0, #24
 800be2c:	f7fd fe24 	bl	8009a78 <aci_hal_write_config_data>
 800be30:	4603      	mov	r3, r0
 800be32:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800be34:	7dfb      	ldrb	r3, [r7, #23]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d005      	beq.n	800be46 <Ble_Hci_Gap_Gatt_Init+0xbe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800be3a:	7dfb      	ldrb	r3, [r7, #23]
 800be3c:	4619      	mov	r1, r3
 800be3e:	4882      	ldr	r0, [pc, #520]	@ (800c048 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800be40:	f001 fa22 	bl	800d288 <iprintf>
 800be44:	e002      	b.n	800be4c <Ble_Hci_Gap_Gatt_Init+0xc4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800be46:	4881      	ldr	r0, [pc, #516]	@ (800c04c <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800be48:	f001 fa8e 	bl	800d368 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800be4c:	4a80      	ldr	r2, [pc, #512]	@ (800c050 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800be4e:	2110      	movs	r1, #16
 800be50:	2008      	movs	r0, #8
 800be52:	f7fd fe11 	bl	8009a78 <aci_hal_write_config_data>
 800be56:	4603      	mov	r3, r0
 800be58:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800be5a:	7dfb      	ldrb	r3, [r7, #23]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d005      	beq.n	800be6c <Ble_Hci_Gap_Gatt_Init+0xe4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800be60:	7dfb      	ldrb	r3, [r7, #23]
 800be62:	4619      	mov	r1, r3
 800be64:	487b      	ldr	r0, [pc, #492]	@ (800c054 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800be66:	f001 fa0f 	bl	800d288 <iprintf>
 800be6a:	e002      	b.n	800be72 <Ble_Hci_Gap_Gatt_Init+0xea>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800be6c:	487a      	ldr	r0, [pc, #488]	@ (800c058 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800be6e:	f001 fa7b 	bl	800d368 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800be72:	2118      	movs	r1, #24
 800be74:	2001      	movs	r0, #1
 800be76:	f7fd fe84 	bl	8009b82 <aci_hal_set_tx_power_level>
 800be7a:	4603      	mov	r3, r0
 800be7c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800be7e:	7dfb      	ldrb	r3, [r7, #23]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d005      	beq.n	800be90 <Ble_Hci_Gap_Gatt_Init+0x108>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800be84:	7dfb      	ldrb	r3, [r7, #23]
 800be86:	4619      	mov	r1, r3
 800be88:	4874      	ldr	r0, [pc, #464]	@ (800c05c <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800be8a:	f001 f9fd 	bl	800d288 <iprintf>
 800be8e:	e002      	b.n	800be96 <Ble_Hci_Gap_Gatt_Init+0x10e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800be90:	4873      	ldr	r0, [pc, #460]	@ (800c060 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800be92:	f001 fa69 	bl	800d368 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800be96:	f7fd faee 	bl	8009476 <aci_gatt_init>
 800be9a:	4603      	mov	r3, r0
 800be9c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800be9e:	7dfb      	ldrb	r3, [r7, #23]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d005      	beq.n	800beb0 <Ble_Hci_Gap_Gatt_Init+0x128>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800bea4:	7dfb      	ldrb	r3, [r7, #23]
 800bea6:	4619      	mov	r1, r3
 800bea8:	486e      	ldr	r0, [pc, #440]	@ (800c064 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800beaa:	f001 f9ed 	bl	800d288 <iprintf>
 800beae:	e002      	b.n	800beb6 <Ble_Hci_Gap_Gatt_Init+0x12e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800beb0:	486d      	ldr	r0, [pc, #436]	@ (800c068 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800beb2:	f001 fa59 	bl	800d368 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800beb6:	2300      	movs	r3, #0
 800beb8:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800beba:	7bfb      	ldrb	r3, [r7, #15]
 800bebc:	f043 0301 	orr.w	r3, r3, #1
 800bec0:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800bec2:	7bfb      	ldrb	r3, [r7, #15]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d02b      	beq.n	800bf20 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800bec8:	4b68      	ldr	r3, [pc, #416]	@ (800c06c <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800beca:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800becc:	1dba      	adds	r2, r7, #6
 800bece:	7bf8      	ldrb	r0, [r7, #15]
 800bed0:	1cbb      	adds	r3, r7, #2
 800bed2:	9301      	str	r3, [sp, #4]
 800bed4:	1d3b      	adds	r3, r7, #4
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	4613      	mov	r3, r2
 800beda:	220a      	movs	r2, #10
 800bedc:	2100      	movs	r1, #0
 800bede:	f7fd f920 	bl	8009122 <aci_gap_init>
 800bee2:	4603      	mov	r3, r0
 800bee4:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800bee6:	7dfb      	ldrb	r3, [r7, #23]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d005      	beq.n	800bef8 <Ble_Hci_Gap_Gatt_Init+0x170>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800beec:	7dfb      	ldrb	r3, [r7, #23]
 800beee:	4619      	mov	r1, r3
 800bef0:	485f      	ldr	r0, [pc, #380]	@ (800c070 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800bef2:	f001 f9c9 	bl	800d288 <iprintf>
 800bef6:	e002      	b.n	800befe <Ble_Hci_Gap_Gatt_Init+0x176>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800bef8:	485e      	ldr	r0, [pc, #376]	@ (800c074 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800befa:	f001 fa35 	bl	800d368 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800befe:	88fc      	ldrh	r4, [r7, #6]
 800bf00:	88bd      	ldrh	r5, [r7, #4]
 800bf02:	68b8      	ldr	r0, [r7, #8]
 800bf04:	f7f4 f93c 	bl	8000180 <strlen>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	b2da      	uxtb	r2, r3
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	4613      	mov	r3, r2
 800bf12:	2200      	movs	r2, #0
 800bf14:	4629      	mov	r1, r5
 800bf16:	4620      	mov	r0, r4
 800bf18:	f7fd fcb0 	bl	800987c <aci_gatt_update_char_value>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800bf20:	88f8      	ldrh	r0, [r7, #6]
 800bf22:	8879      	ldrh	r1, [r7, #2]
 800bf24:	463b      	mov	r3, r7
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	2302      	movs	r3, #2
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f7fd fca6 	bl	800987c <aci_gatt_update_char_value>
 800bf30:	4603      	mov	r3, r0
 800bf32:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800bf34:	2202      	movs	r2, #2
 800bf36:	2102      	movs	r1, #2
 800bf38:	2000      	movs	r0, #0
 800bf3a:	f7fd ff01 	bl	8009d40 <hci_le_set_default_phy>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bf42:	7dfb      	ldrb	r3, [r7, #23]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d005      	beq.n	800bf54 <Ble_Hci_Gap_Gatt_Init+0x1cc>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800bf48:	7dfb      	ldrb	r3, [r7, #23]
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	484a      	ldr	r0, [pc, #296]	@ (800c078 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800bf4e:	f001 f99b 	bl	800d288 <iprintf>
 800bf52:	e002      	b.n	800bf5a <Ble_Hci_Gap_Gatt_Init+0x1d2>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800bf54:	4849      	ldr	r0, [pc, #292]	@ (800c07c <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 800bf56:	f001 fa07 	bl	800d368 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800bf5a:	4b49      	ldr	r3, [pc, #292]	@ (800c080 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800bf60:	4b47      	ldr	r3, [pc, #284]	@ (800c080 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7fc ff5d 	bl	8008e24 <aci_gap_set_io_capability>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bf6e:	7dfb      	ldrb	r3, [r7, #23]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d005      	beq.n	800bf80 <Ble_Hci_Gap_Gatt_Init+0x1f8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800bf74:	7dfb      	ldrb	r3, [r7, #23]
 800bf76:	4619      	mov	r1, r3
 800bf78:	4842      	ldr	r0, [pc, #264]	@ (800c084 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800bf7a:	f001 f985 	bl	800d288 <iprintf>
 800bf7e:	e002      	b.n	800bf86 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800bf80:	4841      	ldr	r0, [pc, #260]	@ (800c088 <Ble_Hci_Gap_Gatt_Init+0x300>)
 800bf82:	f001 f9f1 	bl	800d368 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800bf86:	4b3e      	ldr	r3, [pc, #248]	@ (800c080 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800bf88:	2201      	movs	r2, #1
 800bf8a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800bf8c:	4b3c      	ldr	r3, [pc, #240]	@ (800c080 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800bf8e:	2208      	movs	r2, #8
 800bf90:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800bf92:	4b3b      	ldr	r3, [pc, #236]	@ (800c080 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800bf94:	2210      	movs	r2, #16
 800bf96:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800bf98:	4b39      	ldr	r3, [pc, #228]	@ (800c080 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800bf9e:	4b38      	ldr	r3, [pc, #224]	@ (800c080 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800bfa0:	4a3a      	ldr	r2, [pc, #232]	@ (800c08c <Ble_Hci_Gap_Gatt_Init+0x304>)
 800bfa2:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800bfa4:	4b36      	ldr	r3, [pc, #216]	@ (800c080 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800bfaa:	4b35      	ldr	r3, [pc, #212]	@ (800c080 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800bfac:	789c      	ldrb	r4, [r3, #2]
 800bfae:	4b34      	ldr	r3, [pc, #208]	@ (800c080 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800bfb0:	785d      	ldrb	r5, [r3, #1]
 800bfb2:	4b33      	ldr	r3, [pc, #204]	@ (800c080 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800bfb4:	791b      	ldrb	r3, [r3, #4]
 800bfb6:	4a32      	ldr	r2, [pc, #200]	@ (800c080 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800bfb8:	7952      	ldrb	r2, [r2, #5]
 800bfba:	4931      	ldr	r1, [pc, #196]	@ (800c080 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800bfbc:	78c9      	ldrb	r1, [r1, #3]
 800bfbe:	4830      	ldr	r0, [pc, #192]	@ (800c080 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800bfc0:	6880      	ldr	r0, [r0, #8]
 800bfc2:	2600      	movs	r6, #0
 800bfc4:	9604      	str	r6, [sp, #16]
 800bfc6:	9003      	str	r0, [sp, #12]
 800bfc8:	9102      	str	r1, [sp, #8]
 800bfca:	9201      	str	r2, [sp, #4]
 800bfcc:	9300      	str	r3, [sp, #0]
 800bfce:	2300      	movs	r3, #0
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	4629      	mov	r1, r5
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	f7fc ff79 	bl	8008ecc <aci_gap_set_authentication_requirement>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800bfde:	7dfb      	ldrb	r3, [r7, #23]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d005      	beq.n	800bff0 <Ble_Hci_Gap_Gatt_Init+0x268>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800bfe4:	7dfb      	ldrb	r3, [r7, #23]
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	4829      	ldr	r0, [pc, #164]	@ (800c090 <Ble_Hci_Gap_Gatt_Init+0x308>)
 800bfea:	f001 f94d 	bl	800d288 <iprintf>
 800bfee:	e002      	b.n	800bff6 <Ble_Hci_Gap_Gatt_Init+0x26e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800bff0:	4828      	ldr	r0, [pc, #160]	@ (800c094 <Ble_Hci_Gap_Gatt_Init+0x30c>)
 800bff2:	f001 f9b9 	bl	800d368 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800bff6:	4b22      	ldr	r3, [pc, #136]	@ (800c080 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800bff8:	789b      	ldrb	r3, [r3, #2]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d00f      	beq.n	800c01e <Ble_Hci_Gap_Gatt_Init+0x296>
  {
    ret = aci_gap_configure_whitelist();
 800bffe:	f7fd f9af 	bl	8009360 <aci_gap_configure_filter_accept_list>
 800c002:	4603      	mov	r3, r0
 800c004:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800c006:	7dfb      	ldrb	r3, [r7, #23]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d005      	beq.n	800c018 <Ble_Hci_Gap_Gatt_Init+0x290>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800c00c:	7dfb      	ldrb	r3, [r7, #23]
 800c00e:	4619      	mov	r1, r3
 800c010:	4821      	ldr	r0, [pc, #132]	@ (800c098 <Ble_Hci_Gap_Gatt_Init+0x310>)
 800c012:	f001 f939 	bl	800d288 <iprintf>
 800c016:	e002      	b.n	800c01e <Ble_Hci_Gap_Gatt_Init+0x296>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800c018:	4820      	ldr	r0, [pc, #128]	@ (800c09c <Ble_Hci_Gap_Gatt_Init+0x314>)
 800c01a:	f001 f9a5 	bl	800d368 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800c01e:	4820      	ldr	r0, [pc, #128]	@ (800c0a0 <Ble_Hci_Gap_Gatt_Init+0x318>)
 800c020:	f001 f932 	bl	800d288 <iprintf>
}
 800c024:	bf00      	nop
 800c026:	371c      	adds	r7, #28
 800c028:	46bd      	mov	sp, r7
 800c02a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c02c:	0800ea00 	.word	0x0800ea00
 800c030:	0800ea2c 	.word	0x0800ea2c
 800c034:	0800ea5c 	.word	0x0800ea5c
 800c038:	0800ea7c 	.word	0x0800ea7c
 800c03c:	0800eae0 	.word	0x0800eae0
 800c040:	0800eb34 	.word	0x0800eb34
 800c044:	0800fe18 	.word	0x0800fe18
 800c048:	0800eb70 	.word	0x0800eb70
 800c04c:	0800ebc8 	.word	0x0800ebc8
 800c050:	0800fe28 	.word	0x0800fe28
 800c054:	0800ec10 	.word	0x0800ec10
 800c058:	0800ec68 	.word	0x0800ec68
 800c05c:	0800ecb0 	.word	0x0800ecb0
 800c060:	0800ecf0 	.word	0x0800ecf0
 800c064:	0800ed20 	.word	0x0800ed20
 800c068:	0800ed54 	.word	0x0800ed54
 800c06c:	0800ed78 	.word	0x0800ed78
 800c070:	0800ed84 	.word	0x0800ed84
 800c074:	0800edb4 	.word	0x0800edb4
 800c078:	0800edd4 	.word	0x0800edd4
 800c07c:	0800ee10 	.word	0x0800ee10
 800c080:	200017f0 	.word	0x200017f0
 800c084:	0800ee3c 	.word	0x0800ee3c
 800c088:	0800ee7c 	.word	0x0800ee7c
 800c08c:	0001b207 	.word	0x0001b207
 800c090:	0800eeac 	.word	0x0800eeac
 800c094:	0800eef8 	.word	0x0800eef8
 800c098:	0800ef34 	.word	0x0800ef34
 800c09c:	0800ef74 	.word	0x0800ef74
 800c0a0:	0800efa4 	.word	0x0800efa4

0800c0a4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b08c      	sub	sp, #48	@ 0x30
 800c0a8:	af08      	add	r7, sp, #32
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c0ae:	2392      	movs	r3, #146	@ 0x92
 800c0b0:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800c0b2:	4a1e      	ldr	r2, [pc, #120]	@ (800c12c <Adv_Request+0x88>)
 800c0b4:	79fb      	ldrb	r3, [r7, #7]
 800c0b6:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	9306      	str	r3, [sp, #24]
 800c0be:	2300      	movs	r3, #0
 800c0c0:	9305      	str	r3, [sp, #20]
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	9304      	str	r3, [sp, #16]
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	9303      	str	r3, [sp, #12]
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	9302      	str	r3, [sp, #8]
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	9301      	str	r3, [sp, #4]
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	9300      	str	r3, [sp, #0]
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	22a0      	movs	r2, #160	@ 0xa0
 800c0da:	2180      	movs	r1, #128	@ 0x80
 800c0dc:	2000      	movs	r0, #0
 800c0de:	f7fc fda7 	bl	8008c30 <aci_gap_set_discoverable>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800c0e6:	7bfb      	ldrb	r3, [r7, #15]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d005      	beq.n	800c0f8 <Adv_Request+0x54>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800c0ec:	7bfb      	ldrb	r3, [r7, #15]
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	480f      	ldr	r0, [pc, #60]	@ (800c130 <Adv_Request+0x8c>)
 800c0f2:	f001 f8c9 	bl	800d288 <iprintf>
 800c0f6:	e002      	b.n	800c0fe <Adv_Request+0x5a>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800c0f8:	480e      	ldr	r0, [pc, #56]	@ (800c134 <Adv_Request+0x90>)
 800c0fa:	f001 f935 	bl	800d368 <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800c0fe:	490e      	ldr	r1, [pc, #56]	@ (800c138 <Adv_Request+0x94>)
 800c100:	2013      	movs	r0, #19
 800c102:	f7fd f8bb 	bl	800927c <aci_gap_update_adv_data>
 800c106:	4603      	mov	r3, r0
 800c108:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800c10a:	7bfb      	ldrb	r3, [r7, #15]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d005      	beq.n	800c11c <Adv_Request+0x78>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800c110:	7bfb      	ldrb	r3, [r7, #15]
 800c112:	4619      	mov	r1, r3
 800c114:	4809      	ldr	r0, [pc, #36]	@ (800c13c <Adv_Request+0x98>)
 800c116:	f001 f8b7 	bl	800d288 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800c11a:	e003      	b.n	800c124 <Adv_Request+0x80>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800c11c:	4808      	ldr	r0, [pc, #32]	@ (800c140 <Adv_Request+0x9c>)
 800c11e:	f001 f8b3 	bl	800d288 <iprintf>
  return;
 800c122:	bf00      	nop
}
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	200017f0 	.word	0x200017f0
 800c130:	0800efd0 	.word	0x0800efd0
 800c134:	0800f008 	.word	0x0800f008
 800c138:	20000414 	.word	0x20000414
 800c13c:	0800f030 	.word	0x0800f030
 800c140:	0800f064 	.word	0x0800f064

0800c144 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b086      	sub	sp, #24
 800c148:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800c14a:	f7ff fb65 	bl	800b818 <LL_FLASH_GetUDN>
 800c14e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c156:	d023      	beq.n	800c1a0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800c158:	f7ff fb76 	bl	800b848 <LL_FLASH_GetSTCompanyID>
 800c15c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800c15e:	f7ff fb67 	bl	800b830 <LL_FLASH_GetDeviceID>
 800c162:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	b2da      	uxtb	r2, r3
 800c168:	4b16      	ldr	r3, [pc, #88]	@ (800c1c4 <BleGetBdAddress+0x80>)
 800c16a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	0a1b      	lsrs	r3, r3, #8
 800c170:	b2da      	uxtb	r2, r3
 800c172:	4b14      	ldr	r3, [pc, #80]	@ (800c1c4 <BleGetBdAddress+0x80>)
 800c174:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	b2da      	uxtb	r2, r3
 800c17a:	4b12      	ldr	r3, [pc, #72]	@ (800c1c4 <BleGetBdAddress+0x80>)
 800c17c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	b2da      	uxtb	r2, r3
 800c182:	4b10      	ldr	r3, [pc, #64]	@ (800c1c4 <BleGetBdAddress+0x80>)
 800c184:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	0a1b      	lsrs	r3, r3, #8
 800c18a:	b2da      	uxtb	r2, r3
 800c18c:	4b0d      	ldr	r3, [pc, #52]	@ (800c1c4 <BleGetBdAddress+0x80>)
 800c18e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	0c1b      	lsrs	r3, r3, #16
 800c194:	b2da      	uxtb	r2, r3
 800c196:	4b0b      	ldr	r3, [pc, #44]	@ (800c1c4 <BleGetBdAddress+0x80>)
 800c198:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800c19a:	4b0a      	ldr	r3, [pc, #40]	@ (800c1c4 <BleGetBdAddress+0x80>)
 800c19c:	617b      	str	r3, [r7, #20]
 800c19e:	e00b      	b.n	800c1b8 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800c1a0:	2000      	movs	r0, #0
 800c1a2:	f7fe fe57 	bl	800ae54 <OTP_Read>
 800c1a6:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d002      	beq.n	800c1b4 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	617b      	str	r3, [r7, #20]
 800c1b2:	e001      	b.n	800c1b8 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800c1b4:	4b04      	ldr	r3, [pc, #16]	@ (800c1c8 <BleGetBdAddress+0x84>)
 800c1b6:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800c1b8:	697b      	ldr	r3, [r7, #20]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3718      	adds	r7, #24
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	200017e8 	.word	0x200017e8
 800c1c8:	0800fe10 	.word	0x0800fe10

0800c1cc <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800c1d2:	4b10      	ldr	r3, [pc, #64]	@ (800c214 <Adv_Cancel+0x48>)
 800c1d4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c1d8:	2b05      	cmp	r3, #5
 800c1da:	d017      	beq.n	800c20c <Adv_Cancel+0x40>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c1dc:	2392      	movs	r3, #146	@ 0x92
 800c1de:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800c1e0:	f7fc fd02 	bl	8008be8 <aci_gap_set_non_discoverable>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c1e8:	4b0a      	ldr	r3, [pc, #40]	@ (800c214 <Adv_Cancel+0x48>)
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800c1f0:	79fb      	ldrb	r3, [r7, #7]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d003      	beq.n	800c1fe <Adv_Cancel+0x32>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800c1f6:	4808      	ldr	r0, [pc, #32]	@ (800c218 <Adv_Cancel+0x4c>)
 800c1f8:	f001 f846 	bl	800d288 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800c1fc:	e006      	b.n	800c20c <Adv_Cancel+0x40>
      APP_DBG_MSG("  \r\n\r");
 800c1fe:	4807      	ldr	r0, [pc, #28]	@ (800c21c <Adv_Cancel+0x50>)
 800c200:	f001 f842 	bl	800d288 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800c204:	4806      	ldr	r0, [pc, #24]	@ (800c220 <Adv_Cancel+0x54>)
 800c206:	f001 f83f 	bl	800d288 <iprintf>
  return;
 800c20a:	bf00      	nop
 800c20c:	bf00      	nop
}
 800c20e:	3708      	adds	r7, #8
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}
 800c214:	200017f0 	.word	0x200017f0
 800c218:	0800f08c 	.word	0x0800f08c
 800c21c:	0800f0b0 	.word	0x0800f0b0
 800c220:	0800f0b8 	.word	0x0800f0b8

0800c224 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800c22c:	2100      	movs	r1, #0
 800c22e:	2002      	movs	r0, #2
 800c230:	f000 fe3e 	bl	800ceb0 <UTIL_SEQ_SetTask>

  return;
 800c234:	bf00      	nop
}
 800c236:	3708      	adds	r7, #8
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c244:	2001      	movs	r0, #1
 800c246:	f000 fe9f 	bl	800cf88 <UTIL_SEQ_SetEvt>

  return;
 800c24a:	bf00      	nop
}
 800c24c:	3708      	adds	r7, #8
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800c252:	b580      	push	{r7, lr}
 800c254:	b082      	sub	sp, #8
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c25a:	2001      	movs	r0, #1
 800c25c:	f000 feb4 	bl	800cfc8 <UTIL_SEQ_WaitEvt>

  return;
 800c260:	bf00      	nop
}
 800c262:	3708      	adds	r7, #8
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	3308      	adds	r3, #8
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7fd fec6 	bl	800a00c <SVCCTL_UserEvtRx>
 800c280:	4603      	mov	r3, r0
 800c282:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800c284:	7afb      	ldrb	r3, [r7, #11]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d003      	beq.n	800c292 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2201      	movs	r2, #1
 800c28e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800c290:	e003      	b.n	800c29a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2200      	movs	r2, #0
 800c296:	701a      	strb	r2, [r3, #0]
  return;
 800c298:	bf00      	nop
}
 800c29a:	3710      	adds	r7, #16
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800c2aa:	79fb      	ldrb	r3, [r7, #7]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d002      	beq.n	800c2b6 <BLE_StatusNot+0x16>
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d006      	beq.n	800c2c2 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800c2b4:	e00b      	b.n	800c2ce <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c2b6:	2303      	movs	r3, #3
 800c2b8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800c2ba:	68f8      	ldr	r0, [r7, #12]
 800c2bc:	f000 fe24 	bl	800cf08 <UTIL_SEQ_PauseTask>
      break;
 800c2c0:	e005      	b.n	800c2ce <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c2c2:	2303      	movs	r3, #3
 800c2c4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800c2c6:	68f8      	ldr	r0, [r7, #12]
 800c2c8:	f000 fe3e 	bl	800cf48 <UTIL_SEQ_ResumeTask>
      break;
 800c2cc:	bf00      	nop
  }

  return;
 800c2ce:	bf00      	nop
}
 800c2d0:	3710      	adds	r7, #16
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800c2d6:	b480      	push	{r7}
 800c2d8:	b083      	sub	sp, #12
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d002      	beq.n	800c2ec <Custom_STM_App_Notification+0x16>
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d002      	beq.n	800c2f0 <Custom_STM_App_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800c2ea:	e002      	b.n	800c2f2 <Custom_STM_App_Notification+0x1c>
      break;
 800c2ec:	bf00      	nop
 800c2ee:	e000      	b.n	800c2f2 <Custom_STM_App_Notification+0x1c>
      break;
 800c2f0:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800c2f2:	bf00      	nop
}
 800c2f4:	370c      	adds	r7, #12
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr

0800c2fe <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800c2fe:	b480      	push	{r7}
 800c300:	b083      	sub	sp, #12
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d002      	beq.n	800c314 <Custom_APP_Notification+0x16>
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d002      	beq.n	800c318 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800c312:	e002      	b.n	800c31a <Custom_APP_Notification+0x1c>
      break;
 800c314:	bf00      	nop
 800c316:	e000      	b.n	800c31a <Custom_APP_Notification+0x1c>
      break;
 800c318:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800c31a:	bf00      	nop
}
 800c31c:	370c      	adds	r7, #12
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr

0800c326 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800c326:	b480      	push	{r7}
 800c328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800c32a:	bf00      	nop
}
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr

0800c334 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b08c      	sub	sp, #48	@ 0x30
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800c33c:	2300      	movs	r3, #0
 800c33e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	3301      	adds	r3, #1
 800c346:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 800c348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	2bff      	cmp	r3, #255	@ 0xff
 800c34e:	d166      	bne.n	800c41e <Custom_STM_Event_Handler+0xea>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800c350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c352:	3302      	adds	r3, #2
 800c354:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 800c356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c358:	881b      	ldrh	r3, [r3, #0]
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800c360:	2b1a      	cmp	r3, #26
 800c362:	d858      	bhi.n	800c416 <Custom_STM_Event_Handler+0xe2>
 800c364:	a201      	add	r2, pc, #4	@ (adr r2, 800c36c <Custom_STM_Event_Handler+0x38>)
 800c366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c36a:	bf00      	nop
 800c36c:	0800c3d9 	.word	0x0800c3d9
 800c370:	0800c417 	.word	0x0800c417
 800c374:	0800c417 	.word	0x0800c417
 800c378:	0800c417 	.word	0x0800c417
 800c37c:	0800c417 	.word	0x0800c417
 800c380:	0800c417 	.word	0x0800c417
 800c384:	0800c417 	.word	0x0800c417
 800c388:	0800c417 	.word	0x0800c417
 800c38c:	0800c417 	.word	0x0800c417
 800c390:	0800c417 	.word	0x0800c417
 800c394:	0800c417 	.word	0x0800c417
 800c398:	0800c417 	.word	0x0800c417
 800c39c:	0800c417 	.word	0x0800c417
 800c3a0:	0800c417 	.word	0x0800c417
 800c3a4:	0800c417 	.word	0x0800c417
 800c3a8:	0800c417 	.word	0x0800c417
 800c3ac:	0800c417 	.word	0x0800c417
 800c3b0:	0800c417 	.word	0x0800c417
 800c3b4:	0800c417 	.word	0x0800c417
 800c3b8:	0800c417 	.word	0x0800c417
 800c3bc:	0800c417 	.word	0x0800c417
 800c3c0:	0800c417 	.word	0x0800c417
 800c3c4:	0800c417 	.word	0x0800c417
 800c3c8:	0800c417 	.word	0x0800c417
 800c3cc:	0800c417 	.word	0x0800c417
 800c3d0:	0800c417 	.word	0x0800c417
 800c3d4:	0800c3f9 	.word	0x0800c3f9
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800c3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3da:	3302      	adds	r3, #2
 800c3dc:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomSensor_Data_BufferHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800c3de:	69fb      	ldr	r3, [r7, #28]
 800c3e0:	885b      	ldrh	r3, [r3, #2]
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	4b11      	ldr	r3, [pc, #68]	@ (800c42c <Custom_STM_Event_Handler+0xf8>)
 800c3e8:	885b      	ldrh	r3, [r3, #2]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d114      	bne.n	800c41a <Custom_STM_Event_Handler+0xe6>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomSensor_Data_BufferHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800c3f6:	e010      	b.n	800c41a <Custom_STM_Event_Handler+0xe6>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800c3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3fa:	3302      	adds	r3, #2
 800c3fc:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800c3fe:	2301      	movs	r3, #1
 800c400:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800c402:	6a3b      	ldr	r3, [r7, #32]
 800c404:	881b      	ldrh	r3, [r3, #0]
 800c406:	b29b      	uxth	r3, r3
 800c408:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 800c40a:	f107 0308 	add.w	r3, r7, #8
 800c40e:	4618      	mov	r0, r3
 800c410:	f7ff ff61 	bl	800c2d6 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800c414:	e002      	b.n	800c41c <Custom_STM_Event_Handler+0xe8>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800c416:	bf00      	nop
 800c418:	e002      	b.n	800c420 <Custom_STM_Event_Handler+0xec>
          break;
 800c41a:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800c41c:	e000      	b.n	800c420 <Custom_STM_Event_Handler+0xec>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800c41e:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800c420:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 800c424:	4618      	mov	r0, r3
 800c426:	3730      	adds	r7, #48	@ 0x30
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	20001878 	.word	0x20001878

0800c430 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b08c      	sub	sp, #48	@ 0x30
 800c434:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c436:	2392      	movs	r3, #146	@ 0x92
 800c438:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800c43a:	4840      	ldr	r0, [pc, #256]	@ (800c53c <SVCCTL_InitCustomSvc+0x10c>)
 800c43c:	f7fd fdcc 	bl	8009fd8 <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 800c440:	2303      	movs	r3, #3
 800c442:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService1 */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService1 */

  COPY_ECU_SENSOR_DATA_UUID(uuid.Char_UUID_128);
 800c444:	238f      	movs	r3, #143	@ 0x8f
 800c446:	713b      	strb	r3, [r7, #4]
 800c448:	23e5      	movs	r3, #229	@ 0xe5
 800c44a:	717b      	strb	r3, [r7, #5]
 800c44c:	23b3      	movs	r3, #179	@ 0xb3
 800c44e:	71bb      	strb	r3, [r7, #6]
 800c450:	23d5      	movs	r3, #213	@ 0xd5
 800c452:	71fb      	strb	r3, [r7, #7]
 800c454:	232e      	movs	r3, #46	@ 0x2e
 800c456:	723b      	strb	r3, [r7, #8]
 800c458:	237f      	movs	r3, #127	@ 0x7f
 800c45a:	727b      	strb	r3, [r7, #9]
 800c45c:	234a      	movs	r3, #74	@ 0x4a
 800c45e:	72bb      	strb	r3, [r7, #10]
 800c460:	2398      	movs	r3, #152	@ 0x98
 800c462:	72fb      	strb	r3, [r7, #11]
 800c464:	232a      	movs	r3, #42	@ 0x2a
 800c466:	733b      	strb	r3, [r7, #12]
 800c468:	2348      	movs	r3, #72	@ 0x48
 800c46a:	737b      	strb	r3, [r7, #13]
 800c46c:	237a      	movs	r3, #122	@ 0x7a
 800c46e:	73bb      	strb	r3, [r7, #14]
 800c470:	23cc      	movs	r3, #204	@ 0xcc
 800c472:	73fb      	strb	r3, [r7, #15]
 800c474:	2300      	movs	r3, #0
 800c476:	743b      	strb	r3, [r7, #16]
 800c478:	2300      	movs	r3, #0
 800c47a:	747b      	strb	r3, [r7, #17]
 800c47c:	2300      	movs	r3, #0
 800c47e:	74bb      	strb	r3, [r7, #18]
 800c480:	2300      	movs	r3, #0
 800c482:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800c484:	7dbb      	ldrb	r3, [r7, #22]
 800c486:	1d39      	adds	r1, r7, #4
 800c488:	4a2d      	ldr	r2, [pc, #180]	@ (800c540 <SVCCTL_InitCustomSvc+0x110>)
 800c48a:	9200      	str	r2, [sp, #0]
 800c48c:	2201      	movs	r2, #1
 800c48e:	2002      	movs	r0, #2
 800c490:	f7fd f816 	bl	80094c0 <aci_gatt_add_service>
 800c494:	4603      	mov	r3, r0
 800c496:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomEcu_Sensor_DataHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800c498:	7dfb      	ldrb	r3, [r7, #23]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d005      	beq.n	800c4aa <SVCCTL_InitCustomSvc+0x7a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: ECU_SENSOR_DATA, error code: 0x%x \n\r", ret);
 800c49e:	7dfb      	ldrb	r3, [r7, #23]
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	4828      	ldr	r0, [pc, #160]	@ (800c544 <SVCCTL_InitCustomSvc+0x114>)
 800c4a4:	f000 fef0 	bl	800d288 <iprintf>
 800c4a8:	e002      	b.n	800c4b0 <SVCCTL_InitCustomSvc+0x80>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: ECU_SENSOR_DATA \n\r");
 800c4aa:	4827      	ldr	r0, [pc, #156]	@ (800c548 <SVCCTL_InitCustomSvc+0x118>)
 800c4ac:	f000 feec 	bl	800d288 <iprintf>
  }

  /**
   *  SENSOR_DATA_BUFFER
   */
  COPY_SENSOR_DATA_BUFFER_UUID(uuid.Char_UUID_128);
 800c4b0:	2319      	movs	r3, #25
 800c4b2:	713b      	strb	r3, [r7, #4]
 800c4b4:	23ed      	movs	r3, #237	@ 0xed
 800c4b6:	717b      	strb	r3, [r7, #5]
 800c4b8:	2382      	movs	r3, #130	@ 0x82
 800c4ba:	71bb      	strb	r3, [r7, #6]
 800c4bc:	23ae      	movs	r3, #174	@ 0xae
 800c4be:	71fb      	strb	r3, [r7, #7]
 800c4c0:	23ed      	movs	r3, #237	@ 0xed
 800c4c2:	723b      	strb	r3, [r7, #8]
 800c4c4:	2321      	movs	r3, #33	@ 0x21
 800c4c6:	727b      	strb	r3, [r7, #9]
 800c4c8:	234c      	movs	r3, #76	@ 0x4c
 800c4ca:	72bb      	strb	r3, [r7, #10]
 800c4cc:	239d      	movs	r3, #157	@ 0x9d
 800c4ce:	72fb      	strb	r3, [r7, #11]
 800c4d0:	2341      	movs	r3, #65	@ 0x41
 800c4d2:	733b      	strb	r3, [r7, #12]
 800c4d4:	2345      	movs	r3, #69	@ 0x45
 800c4d6:	737b      	strb	r3, [r7, #13]
 800c4d8:	2322      	movs	r3, #34	@ 0x22
 800c4da:	73bb      	strb	r3, [r7, #14]
 800c4dc:	238e      	movs	r3, #142	@ 0x8e
 800c4de:	73fb      	strb	r3, [r7, #15]
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	743b      	strb	r3, [r7, #16]
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	747b      	strb	r3, [r7, #17]
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	74bb      	strb	r3, [r7, #18]
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomEcu_Sensor_DataHdle,
 800c4f0:	4b13      	ldr	r3, [pc, #76]	@ (800c540 <SVCCTL_InitCustomSvc+0x110>)
 800c4f2:	8818      	ldrh	r0, [r3, #0]
 800c4f4:	4b15      	ldr	r3, [pc, #84]	@ (800c54c <SVCCTL_InitCustomSvc+0x11c>)
 800c4f6:	881b      	ldrh	r3, [r3, #0]
 800c4f8:	1d3a      	adds	r2, r7, #4
 800c4fa:	4915      	ldr	r1, [pc, #84]	@ (800c550 <SVCCTL_InitCustomSvc+0x120>)
 800c4fc:	9105      	str	r1, [sp, #20]
 800c4fe:	2101      	movs	r1, #1
 800c500:	9104      	str	r1, [sp, #16]
 800c502:	2110      	movs	r1, #16
 800c504:	9103      	str	r1, [sp, #12]
 800c506:	2101      	movs	r1, #1
 800c508:	9102      	str	r1, [sp, #8]
 800c50a:	2100      	movs	r1, #0
 800c50c:	9101      	str	r1, [sp, #4]
 800c50e:	2104      	movs	r1, #4
 800c510:	9100      	str	r1, [sp, #0]
 800c512:	2102      	movs	r1, #2
 800c514:	f7fd f8aa 	bl	800966c <aci_gatt_add_char>
 800c518:	4603      	mov	r3, r0
 800c51a:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomSensor_Data_BufferHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800c51c:	7dfb      	ldrb	r3, [r7, #23]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d005      	beq.n	800c52e <SVCCTL_InitCustomSvc+0xfe>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : SENSOR_DATA_BUFFER, error code: 0x%x \n\r", ret);
 800c522:	7dfb      	ldrb	r3, [r7, #23]
 800c524:	4619      	mov	r1, r3
 800c526:	480b      	ldr	r0, [pc, #44]	@ (800c554 <SVCCTL_InitCustomSvc+0x124>)
 800c528:	f000 feae 	bl	800d288 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800c52c:	e003      	b.n	800c536 <SVCCTL_InitCustomSvc+0x106>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : SENSOR_DATA_BUFFER \n\r");
 800c52e:	480a      	ldr	r0, [pc, #40]	@ (800c558 <SVCCTL_InitCustomSvc+0x128>)
 800c530:	f000 feaa 	bl	800d288 <iprintf>
  return;
 800c534:	bf00      	nop
}
 800c536:	3718      	adds	r7, #24
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	0800c335 	.word	0x0800c335
 800c540:	20001878 	.word	0x20001878
 800c544:	0800f0d4 	.word	0x0800f0d4
 800c548:	0800f124 	.word	0x0800f124
 800c54c:	20000428 	.word	0x20000428
 800c550:	2000187a 	.word	0x2000187a
 800c554:	0800f160 	.word	0x0800f160
 800c558:	0800f1b4 	.word	0x0800f1b4

0800c55c <LL_PWR_EnableBootC2>:
{
 800c55c:	b480      	push	{r7}
 800c55e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800c560:	4b05      	ldr	r3, [pc, #20]	@ (800c578 <LL_PWR_EnableBootC2+0x1c>)
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	4a04      	ldr	r2, [pc, #16]	@ (800c578 <LL_PWR_EnableBootC2+0x1c>)
 800c566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c56a:	60d3      	str	r3, [r2, #12]
}
 800c56c:	bf00      	nop
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr
 800c576:	bf00      	nop
 800c578:	58000400 	.word	0x58000400

0800c57c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800c57c:	b480      	push	{r7}
 800c57e:	b083      	sub	sp, #12
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800c584:	4b06      	ldr	r3, [pc, #24]	@ (800c5a0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c586:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800c58a:	4905      	ldr	r1, [pc, #20]	@ (800c5a0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	4313      	orrs	r3, r2
 800c590:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800c594:	bf00      	nop
 800c596:	370c      	adds	r7, #12
 800c598:	46bd      	mov	sp, r7
 800c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59e:	4770      	bx	lr
 800c5a0:	58000800 	.word	0x58000800

0800c5a4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b083      	sub	sp, #12
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800c5ac:	4b05      	ldr	r3, [pc, #20]	@ (800c5c4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c5ae:	6a1a      	ldr	r2, [r3, #32]
 800c5b0:	4904      	ldr	r1, [pc, #16]	@ (800c5c4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	620b      	str	r3, [r1, #32]
}
 800c5b8:	bf00      	nop
 800c5ba:	370c      	adds	r7, #12
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr
 800c5c4:	58000800 	.word	0x58000800

0800c5c8 <LL_AHB3_GRP1_EnableClock>:
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800c5d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c5d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800c5e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	4013      	ands	r3, r2
 800c5ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
}
 800c5ee:	bf00      	nop
 800c5f0:	3714      	adds	r7, #20
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr

0800c5fa <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800c5fa:	b480      	push	{r7}
 800c5fc:	b085      	sub	sp, #20
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800c602:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c606:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800c60a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	4313      	orrs	r3, r2
 800c612:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800c616:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c61a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	4013      	ands	r3, r2
 800c622:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c624:	68fb      	ldr	r3, [r7, #12]
}
 800c626:	bf00      	nop
 800c628:	3714      	adds	r7, #20
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr

0800c632 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800c632:	b480      	push	{r7}
 800c634:	b083      	sub	sp, #12
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	601a      	str	r2, [r3, #0]
}
 800c646:	bf00      	nop
 800c648:	370c      	adds	r7, #12
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr

0800c652 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800c652:	b480      	push	{r7}
 800c654:	b083      	sub	sp, #12
 800c656:	af00      	add	r7, sp, #0
 800c658:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f043 0201 	orr.w	r2, r3, #1
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	601a      	str	r2, [r3, #0]
}
 800c666:	bf00      	nop
 800c668:	370c      	adds	r7, #12
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr

0800c672 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c672:	b480      	push	{r7}
 800c674:	b083      	sub	sp, #12
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
 800c67a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	685a      	ldr	r2, [r3, #4]
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	041b      	lsls	r3, r3, #16
 800c684:	43db      	mvns	r3, r3
 800c686:	401a      	ands	r2, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	605a      	str	r2, [r3, #4]
}
 800c68c:	bf00      	nop
 800c68e:	370c      	adds	r7, #12
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	685a      	ldr	r2, [r3, #4]
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	041b      	lsls	r3, r3, #16
 800c6aa:	431a      	orrs	r2, r3
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	605a      	str	r2, [r3, #4]
}
 800c6b0:	bf00      	nop
 800c6b2:	370c      	adds	r7, #12
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	685a      	ldr	r2, [r3, #4]
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	43db      	mvns	r3, r3
 800c6ce:	401a      	ands	r2, r3
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	605a      	str	r2, [r3, #4]
}
 800c6d4:	bf00      	nop
 800c6d6:	370c      	adds	r7, #12
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	683a      	ldr	r2, [r7, #0]
 800c6ee:	609a      	str	r2, [r3, #8]
}
 800c6f0:	bf00      	nop
 800c6f2:	370c      	adds	r7, #12
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b083      	sub	sp, #12
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	041a      	lsls	r2, r3, #16
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	609a      	str	r2, [r3, #8]
}
 800c70e:	bf00      	nop
 800c710:	370c      	adds	r7, #12
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr

0800c71a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800c71a:	b480      	push	{r7}
 800c71c:	b083      	sub	sp, #12
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
 800c722:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	68da      	ldr	r2, [r3, #12]
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	4013      	ands	r3, r2
 800c72c:	683a      	ldr	r2, [r7, #0]
 800c72e:	429a      	cmp	r2, r3
 800c730:	d101      	bne.n	800c736 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800c732:	2301      	movs	r3, #1
 800c734:	e000      	b.n	800c738 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800c736:	2300      	movs	r3, #0
}
 800c738:	4618      	mov	r0, r3
 800c73a:	370c      	adds	r7, #12
 800c73c:	46bd      	mov	sp, r7
 800c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c742:	4770      	bx	lr

0800c744 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800c744:	b480      	push	{r7}
 800c746:	b083      	sub	sp, #12
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	69da      	ldr	r2, [r3, #28]
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	4013      	ands	r3, r2
 800c756:	683a      	ldr	r2, [r7, #0]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d101      	bne.n	800c760 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800c75c:	2301      	movs	r3, #1
 800c75e:	e000      	b.n	800c762 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800c760:	2300      	movs	r3, #0
}
 800c762:	4618      	mov	r0, r3
 800c764:	370c      	adds	r7, #12
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr
	...

0800c770 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800c770:	b580      	push	{r7, lr}
 800c772:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800c774:	2102      	movs	r1, #2
 800c776:	4818      	ldr	r0, [pc, #96]	@ (800c7d8 <HW_IPCC_Rx_Handler+0x68>)
 800c778:	f7ff ffe4 	bl	800c744 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c77c:	4603      	mov	r3, r0
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d008      	beq.n	800c794 <HW_IPCC_Rx_Handler+0x24>
 800c782:	4b15      	ldr	r3, [pc, #84]	@ (800c7d8 <HW_IPCC_Rx_Handler+0x68>)
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	f003 0302 	and.w	r3, r3, #2
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d102      	bne.n	800c794 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800c78e:	f000 f925 	bl	800c9dc <HW_IPCC_SYS_EvtHandler>
 800c792:	e01e      	b.n	800c7d2 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800c794:	2101      	movs	r1, #1
 800c796:	4810      	ldr	r0, [pc, #64]	@ (800c7d8 <HW_IPCC_Rx_Handler+0x68>)
 800c798:	f7ff ffd4 	bl	800c744 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c79c:	4603      	mov	r3, r0
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d008      	beq.n	800c7b4 <HW_IPCC_Rx_Handler+0x44>
 800c7a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c7d8 <HW_IPCC_Rx_Handler+0x68>)
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	f003 0301 	and.w	r3, r3, #1
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d102      	bne.n	800c7b4 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800c7ae:	f000 f899 	bl	800c8e4 <HW_IPCC_BLE_EvtHandler>
 800c7b2:	e00e      	b.n	800c7d2 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800c7b4:	2108      	movs	r1, #8
 800c7b6:	4808      	ldr	r0, [pc, #32]	@ (800c7d8 <HW_IPCC_Rx_Handler+0x68>)
 800c7b8:	f7ff ffc4 	bl	800c744 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d008      	beq.n	800c7d4 <HW_IPCC_Rx_Handler+0x64>
 800c7c2:	4b05      	ldr	r3, [pc, #20]	@ (800c7d8 <HW_IPCC_Rx_Handler+0x68>)
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	f003 0308 	and.w	r3, r3, #8
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d102      	bne.n	800c7d4 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800c7ce:	f000 f97d 	bl	800cacc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800c7d2:	bf00      	nop
 800c7d4:	bf00      	nop
}
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	58000c00 	.word	0x58000c00

0800c7dc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800c7e0:	2102      	movs	r1, #2
 800c7e2:	4818      	ldr	r0, [pc, #96]	@ (800c844 <HW_IPCC_Tx_Handler+0x68>)
 800c7e4:	f7ff ff99 	bl	800c71a <LL_C1_IPCC_IsActiveFlag_CHx>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d108      	bne.n	800c800 <HW_IPCC_Tx_Handler+0x24>
 800c7ee:	4b15      	ldr	r3, [pc, #84]	@ (800c844 <HW_IPCC_Tx_Handler+0x68>)
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d102      	bne.n	800c800 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800c7fa:	f000 f8d3 	bl	800c9a4 <HW_IPCC_SYS_CmdEvtHandler>
 800c7fe:	e01e      	b.n	800c83e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800c800:	2108      	movs	r1, #8
 800c802:	4810      	ldr	r0, [pc, #64]	@ (800c844 <HW_IPCC_Tx_Handler+0x68>)
 800c804:	f7ff ff89 	bl	800c71a <LL_C1_IPCC_IsActiveFlag_CHx>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d108      	bne.n	800c820 <HW_IPCC_Tx_Handler+0x44>
 800c80e:	4b0d      	ldr	r3, [pc, #52]	@ (800c844 <HW_IPCC_Tx_Handler+0x68>)
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c816:	2b00      	cmp	r3, #0
 800c818:	d102      	bne.n	800c820 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800c81a:	f000 f919 	bl	800ca50 <HW_IPCC_MM_FreeBufHandler>
 800c81e:	e00e      	b.n	800c83e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800c820:	2120      	movs	r1, #32
 800c822:	4808      	ldr	r0, [pc, #32]	@ (800c844 <HW_IPCC_Tx_Handler+0x68>)
 800c824:	f7ff ff79 	bl	800c71a <LL_C1_IPCC_IsActiveFlag_CHx>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d108      	bne.n	800c840 <HW_IPCC_Tx_Handler+0x64>
 800c82e:	4b05      	ldr	r3, [pc, #20]	@ (800c844 <HW_IPCC_Tx_Handler+0x68>)
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c836:	2b00      	cmp	r3, #0
 800c838:	d102      	bne.n	800c840 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800c83a:	f000 f85f 	bl	800c8fc <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800c83e:	bf00      	nop
 800c840:	bf00      	nop
}
 800c842:	bd80      	pop	{r7, pc}
 800c844:	58000c00 	.word	0x58000c00

0800c848 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800c84c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c850:	f7ff fed3 	bl	800c5fa <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800c854:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800c858:	f7ff fea4 	bl	800c5a4 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800c85c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800c860:	f7ff fe8c 	bl	800c57c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800c864:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800c866:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800c868:	f7ff fe78 	bl	800c55c <LL_PWR_EnableBootC2>

  return;
 800c86c:	bf00      	nop
}
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800c870:	b580      	push	{r7, lr}
 800c872:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800c874:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c878:	f7ff fea6 	bl	800c5c8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800c87c:	4806      	ldr	r0, [pc, #24]	@ (800c898 <HW_IPCC_Init+0x28>)
 800c87e:	f7ff fee8 	bl	800c652 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800c882:	4805      	ldr	r0, [pc, #20]	@ (800c898 <HW_IPCC_Init+0x28>)
 800c884:	f7ff fed5 	bl	800c632 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800c888:	202c      	movs	r0, #44	@ 0x2c
 800c88a:	f7f7 fe80 	bl	800458e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800c88e:	202d      	movs	r0, #45	@ 0x2d
 800c890:	f7f7 fe7d 	bl	800458e <HAL_NVIC_EnableIRQ>

  return;
 800c894:	bf00      	nop
}
 800c896:	bd80      	pop	{r7, pc}
 800c898:	58000c00 	.word	0x58000c00

0800c89c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8a2:	f3ef 8310 	mrs	r3, PRIMASK
 800c8a6:	607b      	str	r3, [r7, #4]
  return(result);
 800c8a8:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800c8aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c8ac:	b672      	cpsid	i
}
 800c8ae:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c8b0:	2101      	movs	r1, #1
 800c8b2:	4806      	ldr	r0, [pc, #24]	@ (800c8cc <HW_IPCC_BLE_Init+0x30>)
 800c8b4:	f7ff ff02 	bl	800c6bc <LL_C1_IPCC_EnableReceiveChannel>
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	f383 8810 	msr	PRIMASK, r3
}
 800c8c2:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800c8c4:	bf00      	nop
}
 800c8c6:	3710      	adds	r7, #16
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	58000c00 	.word	0x58000c00

0800c8d0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800c8d4:	2101      	movs	r1, #1
 800c8d6:	4802      	ldr	r0, [pc, #8]	@ (800c8e0 <HW_IPCC_BLE_SendCmd+0x10>)
 800c8d8:	f7ff ff10 	bl	800c6fc <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c8dc:	bf00      	nop
}
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	58000c00 	.word	0x58000c00

0800c8e4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800c8e8:	f7fe f83a 	bl	800a960 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c8ec:	2101      	movs	r1, #1
 800c8ee:	4802      	ldr	r0, [pc, #8]	@ (800c8f8 <HW_IPCC_BLE_EvtHandler+0x14>)
 800c8f0:	f7ff fef6 	bl	800c6e0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c8f4:	bf00      	nop
}
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	58000c00 	.word	0x58000c00

0800c8fc <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c902:	f3ef 8310 	mrs	r3, PRIMASK
 800c906:	607b      	str	r3, [r7, #4]
  return(result);
 800c908:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800c90a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c90c:	b672      	cpsid	i
}
 800c90e:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800c910:	2120      	movs	r1, #32
 800c912:	4807      	ldr	r0, [pc, #28]	@ (800c930 <HW_IPCC_BLE_AclDataEvtHandler+0x34>)
 800c914:	f7ff fec0 	bl	800c698 <LL_C1_IPCC_DisableTransmitChannel>
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	f383 8810 	msr	PRIMASK, r3
}
 800c922:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_BLE_AclDataAckNot();
 800c924:	f7fe f84c 	bl	800a9c0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800c928:	bf00      	nop
}
 800c92a:	3710      	adds	r7, #16
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	58000c00 	.word	0x58000c00

0800c934 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c93a:	f3ef 8310 	mrs	r3, PRIMASK
 800c93e:	607b      	str	r3, [r7, #4]
  return(result);
 800c940:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800c942:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c944:	b672      	cpsid	i
}
 800c946:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c948:	2102      	movs	r1, #2
 800c94a:	4806      	ldr	r0, [pc, #24]	@ (800c964 <HW_IPCC_SYS_Init+0x30>)
 800c94c:	f7ff feb6 	bl	800c6bc <LL_C1_IPCC_EnableReceiveChannel>
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	f383 8810 	msr	PRIMASK, r3
}
 800c95a:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800c95c:	bf00      	nop
}
 800c95e:	3710      	adds	r7, #16
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	58000c00 	.word	0x58000c00

0800c968 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b084      	sub	sp, #16
 800c96c:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c96e:	2102      	movs	r1, #2
 800c970:	480b      	ldr	r0, [pc, #44]	@ (800c9a0 <HW_IPCC_SYS_SendCmd+0x38>)
 800c972:	f7ff fec3 	bl	800c6fc <LL_C1_IPCC_SetFlag_CHx>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c976:	f3ef 8310 	mrs	r3, PRIMASK
 800c97a:	607b      	str	r3, [r7, #4]
  return(result);
 800c97c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800c97e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c980:	b672      	cpsid	i
}
 800c982:	bf00      	nop
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c984:	2102      	movs	r1, #2
 800c986:	4806      	ldr	r0, [pc, #24]	@ (800c9a0 <HW_IPCC_SYS_SendCmd+0x38>)
 800c988:	f7ff fe73 	bl	800c672 <LL_C1_IPCC_EnableTransmitChannel>
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	f383 8810 	msr	PRIMASK, r3
}
 800c996:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800c998:	bf00      	nop
}
 800c99a:	3710      	adds	r7, #16
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	58000c00 	.word	0x58000c00

0800c9a4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b084      	sub	sp, #16
 800c9a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9aa:	f3ef 8310 	mrs	r3, PRIMASK
 800c9ae:	607b      	str	r3, [r7, #4]
  return(result);
 800c9b0:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800c9b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c9b4:	b672      	cpsid	i
}
 800c9b6:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c9b8:	2102      	movs	r1, #2
 800c9ba:	4807      	ldr	r0, [pc, #28]	@ (800c9d8 <HW_IPCC_SYS_CmdEvtHandler+0x34>)
 800c9bc:	f7ff fe6c 	bl	800c698 <LL_C1_IPCC_DisableTransmitChannel>
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	f383 8810 	msr	PRIMASK, r3
}
 800c9ca:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_SYS_CmdEvtNot();
 800c9cc:	f7fe f84c 	bl	800aa68 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800c9d0:	bf00      	nop
}
 800c9d2:	3710      	adds	r7, #16
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	58000c00 	.word	0x58000c00

0800c9dc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800c9e0:	f7fe f858 	bl	800aa94 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c9e4:	2102      	movs	r1, #2
 800c9e6:	4802      	ldr	r0, [pc, #8]	@ (800c9f0 <HW_IPCC_SYS_EvtHandler+0x14>)
 800c9e8:	f7ff fe7a 	bl	800c6e0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c9ec:	bf00      	nop
}
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	58000c00 	.word	0x58000c00

0800c9f4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b086      	sub	sp, #24
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800c9fc:	2108      	movs	r1, #8
 800c9fe:	4812      	ldr	r0, [pc, #72]	@ (800ca48 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800ca00:	f7ff fe8b 	bl	800c71a <LL_C1_IPCC_IsActiveFlag_CHx>
 800ca04:	4603      	mov	r3, r0
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d013      	beq.n	800ca32 <HW_IPCC_MM_SendFreeBuf+0x3e>
  {
    FreeBufCb = cb;
 800ca0a:	4a10      	ldr	r2, [pc, #64]	@ (800ca4c <HW_IPCC_MM_SendFreeBuf+0x58>)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca10:	f3ef 8310 	mrs	r3, PRIMASK
 800ca14:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca16:	68fb      	ldr	r3, [r7, #12]
    UTILS_ENTER_CRITICAL_SECTION();
 800ca18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca1a:	b672      	cpsid	i
}
 800ca1c:	bf00      	nop
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ca1e:	2108      	movs	r1, #8
 800ca20:	4809      	ldr	r0, [pc, #36]	@ (800ca48 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800ca22:	f7ff fe26 	bl	800c672 <LL_C1_IPCC_EnableTransmitChannel>
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	f383 8810 	msr	PRIMASK, r3
}
 800ca30:	e005      	b.n	800ca3e <HW_IPCC_MM_SendFreeBuf+0x4a>
    UTILS_EXIT_CRITICAL_SECTION();
  }
  else
  {
    cb();
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	4798      	blx	r3

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ca36:	2108      	movs	r1, #8
 800ca38:	4803      	ldr	r0, [pc, #12]	@ (800ca48 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800ca3a:	f7ff fe5f 	bl	800c6fc <LL_C1_IPCC_SetFlag_CHx>
  }

  return;
 800ca3e:	bf00      	nop
}
 800ca40:	3718      	adds	r7, #24
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	bf00      	nop
 800ca48:	58000c00 	.word	0x58000c00
 800ca4c:	2000187c 	.word	0x2000187c

0800ca50 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b084      	sub	sp, #16
 800ca54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca56:	f3ef 8310 	mrs	r3, PRIMASK
 800ca5a:	607b      	str	r3, [r7, #4]
  return(result);
 800ca5c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800ca5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca60:	b672      	cpsid	i
}
 800ca62:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ca64:	2108      	movs	r1, #8
 800ca66:	480a      	ldr	r0, [pc, #40]	@ (800ca90 <HW_IPCC_MM_FreeBufHandler+0x40>)
 800ca68:	f7ff fe16 	bl	800c698 <LL_C1_IPCC_DisableTransmitChannel>
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	f383 8810 	msr	PRIMASK, r3
}
 800ca76:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  FreeBufCb();
 800ca78:	4b06      	ldr	r3, [pc, #24]	@ (800ca94 <HW_IPCC_MM_FreeBufHandler+0x44>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ca7e:	2108      	movs	r1, #8
 800ca80:	4803      	ldr	r0, [pc, #12]	@ (800ca90 <HW_IPCC_MM_FreeBufHandler+0x40>)
 800ca82:	f7ff fe3b 	bl	800c6fc <LL_C1_IPCC_SetFlag_CHx>

  return;
 800ca86:	bf00      	nop
}
 800ca88:	3710      	adds	r7, #16
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	58000c00 	.word	0x58000c00
 800ca94:	2000187c 	.word	0x2000187c

0800ca98 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca9e:	f3ef 8310 	mrs	r3, PRIMASK
 800caa2:	607b      	str	r3, [r7, #4]
  return(result);
 800caa4:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800caa6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800caa8:	b672      	cpsid	i
}
 800caaa:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800caac:	2108      	movs	r1, #8
 800caae:	4806      	ldr	r0, [pc, #24]	@ (800cac8 <HW_IPCC_TRACES_Init+0x30>)
 800cab0:	f7ff fe04 	bl	800c6bc <LL_C1_IPCC_EnableReceiveChannel>
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	f383 8810 	msr	PRIMASK, r3
}
 800cabe:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800cac0:	bf00      	nop
}
 800cac2:	3710      	adds	r7, #16
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}
 800cac8:	58000c00 	.word	0x58000c00

0800cacc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800cad0:	f7fe f888 	bl	800abe4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800cad4:	2108      	movs	r1, #8
 800cad6:	4802      	ldr	r0, [pc, #8]	@ (800cae0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800cad8:	f7ff fe02 	bl	800c6e0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800cadc:	bf00      	nop
}
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	58000c00 	.word	0x58000c00

0800cae4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800cae4:	b480      	push	{r7}
 800cae6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800cae8:	4b05      	ldr	r3, [pc, #20]	@ (800cb00 <UTIL_LPM_Init+0x1c>)
 800caea:	2200      	movs	r2, #0
 800caec:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800caee:	4b05      	ldr	r3, [pc, #20]	@ (800cb04 <UTIL_LPM_Init+0x20>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800caf4:	bf00      	nop
 800caf6:	46bd      	mov	sp, r7
 800caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafc:	4770      	bx	lr
 800cafe:	bf00      	nop
 800cb00:	20001880 	.word	0x20001880
 800cb04:	20001884 	.word	0x20001884

0800cb08 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b087      	sub	sp, #28
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	460b      	mov	r3, r1
 800cb12:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb14:	f3ef 8310 	mrs	r3, PRIMASK
 800cb18:	613b      	str	r3, [r7, #16]
  return(result);
 800cb1a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800cb1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb1e:	b672      	cpsid	i
}
 800cb20:	bf00      	nop
  
  switch(state)
 800cb22:	78fb      	ldrb	r3, [r7, #3]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d008      	beq.n	800cb3a <UTIL_LPM_SetOffMode+0x32>
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d10e      	bne.n	800cb4a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800cb2c:	4b0d      	ldr	r3, [pc, #52]	@ (800cb64 <UTIL_LPM_SetOffMode+0x5c>)
 800cb2e:	681a      	ldr	r2, [r3, #0]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	4313      	orrs	r3, r2
 800cb34:	4a0b      	ldr	r2, [pc, #44]	@ (800cb64 <UTIL_LPM_SetOffMode+0x5c>)
 800cb36:	6013      	str	r3, [r2, #0]
      break;
 800cb38:	e008      	b.n	800cb4c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	43da      	mvns	r2, r3
 800cb3e:	4b09      	ldr	r3, [pc, #36]	@ (800cb64 <UTIL_LPM_SetOffMode+0x5c>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4013      	ands	r3, r2
 800cb44:	4a07      	ldr	r2, [pc, #28]	@ (800cb64 <UTIL_LPM_SetOffMode+0x5c>)
 800cb46:	6013      	str	r3, [r2, #0]
      break;
 800cb48:	e000      	b.n	800cb4c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800cb4a:	bf00      	nop
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f383 8810 	msr	PRIMASK, r3
}
 800cb56:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800cb58:	bf00      	nop
 800cb5a:	371c      	adds	r7, #28
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr
 800cb64:	20001884 	.word	0x20001884

0800cb68 <UTIL_SEQ_Run>:
  * That is the reason why many variables that are used only in that function are declared static.
  * Note: These variables could have been declared static in the function.
  *
  */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b094      	sub	sp, #80	@ 0x50
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
    /*
     * When this function is nested, the mask to be applied cannot be larger than the first call
     * The mask is always getting smaller and smaller
     * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
     */
    super_mask_backup = SuperMask;
 800cb70:	4b89      	ldr	r3, [pc, #548]	@ (800cd98 <UTIL_SEQ_Run+0x230>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    SuperMask &= Mask_bm;
 800cb76:	4b88      	ldr	r3, [pc, #544]	@ (800cd98 <UTIL_SEQ_Run+0x230>)
 800cb78:	681a      	ldr	r2, [r3, #0]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	4013      	ands	r3, r2
 800cb7e:	4a86      	ldr	r2, [pc, #536]	@ (800cd98 <UTIL_SEQ_Run+0x230>)
 800cb80:	6013      	str	r3, [r2, #0]
     * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
     * SuperMask that comes from UTIL_SEQ_Run
     * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
     * waiting task
     */
    local_taskset = TaskSet;
 800cb82:	4b86      	ldr	r3, [pc, #536]	@ (800cd9c <UTIL_SEQ_Run+0x234>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	647b      	str	r3, [r7, #68]	@ 0x44
    local_evtset = EvtSet;
 800cb88:	4b85      	ldr	r3, [pc, #532]	@ (800cda0 <UTIL_SEQ_Run+0x238>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	643b      	str	r3, [r7, #64]	@ 0x40
    local_taskmask = TaskMask;
 800cb8e:	4b85      	ldr	r3, [pc, #532]	@ (800cda4 <UTIL_SEQ_Run+0x23c>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	63fb      	str	r3, [r7, #60]	@ 0x3c
    local_evtwaited =  EvtWaited;
 800cb94:	4b84      	ldr	r3, [pc, #528]	@ (800cda8 <UTIL_SEQ_Run+0x240>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	63bb      	str	r3, [r7, #56]	@ 0x38
    while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800cb9a:	e112      	b.n	800cdc2 <UTIL_SEQ_Run+0x25a>
    {
        counter = 0U;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        /*
         * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
         * on the priority parameter given from UTIL_SEQ_SetTask()
         * The while loop is looking for a flag set from the highest priority maskr to the lower
         */
        while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800cba0:	e002      	b.n	800cba8 <UTIL_SEQ_Run+0x40>
        {
            counter++;
 800cba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cba4:	3301      	adds	r3, #1
 800cba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
        while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800cba8:	4a80      	ldr	r2, [pc, #512]	@ (800cdac <UTIL_SEQ_Run+0x244>)
 800cbaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cbb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbb2:	401a      	ands	r2, r3
 800cbb4:	4b78      	ldr	r3, [pc, #480]	@ (800cd98 <UTIL_SEQ_Run+0x230>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4013      	ands	r3, r2
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d0f1      	beq.n	800cba2 <UTIL_SEQ_Run+0x3a>
        }

        current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800cbbe:	4a7b      	ldr	r2, [pc, #492]	@ (800cdac <UTIL_SEQ_Run+0x244>)
 800cbc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbc2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cbc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbc8:	401a      	ands	r2, r3
 800cbca:	4b73      	ldr	r3, [pc, #460]	@ (800cd98 <UTIL_SEQ_Run+0x230>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4013      	ands	r3, r2
 800cbd0:	64bb      	str	r3, [r7, #72]	@ 0x48
         * the round_robin mask
         *
         * In the check below, the round_robin mask is reinitialize in case all pending
         * tasks haven been executed at least once
         */
        if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800cbd2:	4a76      	ldr	r2, [pc, #472]	@ (800cdac <UTIL_SEQ_Run+0x244>)
 800cbd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbd6:	00db      	lsls	r3, r3, #3
 800cbd8:	4413      	add	r3, r2
 800cbda:	685a      	ldr	r2, [r3, #4]
 800cbdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cbde:	4013      	ands	r3, r2
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d106      	bne.n	800cbf2 <UTIL_SEQ_Run+0x8a>
        {
            TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800cbe4:	4a71      	ldr	r2, [pc, #452]	@ (800cdac <UTIL_SEQ_Run+0x244>)
 800cbe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbe8:	00db      	lsls	r3, r3, #3
 800cbea:	4413      	add	r3, r2
 800cbec:	f04f 32ff 	mov.w	r2, #4294967295
 800cbf0:	605a      	str	r2, [r3, #4]

        /*
         * Compute the Stack Startving List
         * This is the list of the task that have been set at least once minus the one that have been cleared ar least once
         */
        task_starving_list = TaskSet;
 800cbf2:	4b6a      	ldr	r3, [pc, #424]	@ (800cd9c <UTIL_SEQ_Run+0x234>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	62bb      	str	r3, [r7, #40]	@ 0x28
         * Such situation shall not happen when evaluating task_starving_list
         * At any time, there should not be any bit reset in TaskPrio[counter].round_robin and reset in TaskClearList
         * It is correct with regard to the Sequencer Architecture to set in TaskClearList all tasks that are said to be executed from TaskPrio[counter].round_robin
         * This synchronizes both information before calculating the CurrentTaskIdx
         */
        TaskClearList |= (~TaskPrio[counter].round_robin);
 800cbf8:	4a6c      	ldr	r2, [pc, #432]	@ (800cdac <UTIL_SEQ_Run+0x244>)
 800cbfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbfc:	00db      	lsls	r3, r3, #3
 800cbfe:	4413      	add	r3, r2
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	43da      	mvns	r2, r3
 800cc04:	4b6a      	ldr	r3, [pc, #424]	@ (800cdb0 <UTIL_SEQ_Run+0x248>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	4a69      	ldr	r2, [pc, #420]	@ (800cdb0 <UTIL_SEQ_Run+0x248>)
 800cc0c:	6013      	str	r3, [r2, #0]

        task_starving_list &= (~TaskClearList);
 800cc0e:	4b68      	ldr	r3, [pc, #416]	@ (800cdb0 <UTIL_SEQ_Run+0x248>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	43db      	mvns	r3, r3
 800cc14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc16:	4013      	ands	r3, r2
 800cc18:	62bb      	str	r3, [r7, #40]	@ 0x28

        /*
         * Consider first the starving list and update current_task_set accordingly
         */
        if ((task_starving_list & current_task_set) != 0U)
 800cc1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc1e:	4013      	ands	r3, r2
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d003      	beq.n	800cc2c <UTIL_SEQ_Run+0xc4>
        {
          current_task_set = (task_starving_list & current_task_set);
 800cc24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc28:	4013      	ands	r3, r2
 800cc2a:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /*
         * Reinitialize the Starving List if required
         */
        if(task_starving_list == 0)
 800cc2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d102      	bne.n	800cc38 <UTIL_SEQ_Run+0xd0>
        {
          TaskClearList = 0;
 800cc32:	4b5f      	ldr	r3, [pc, #380]	@ (800cdb0 <UTIL_SEQ_Run+0x248>)
 800cc34:	2200      	movs	r2, #0
 800cc36:	601a      	str	r2, [r3, #0]
        /*
         * Read the flag index of the task to be executed
         * Once the index is read, the associated task will be executed even though a higher priority stack is requested
         * before task execution.
         */
        CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800cc38:	4a5c      	ldr	r2, [pc, #368]	@ (800cdac <UTIL_SEQ_Run+0x244>)
 800cc3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc3c:	00db      	lsls	r3, r3, #3
 800cc3e:	4413      	add	r3, r2
 800cc40:	685a      	ldr	r2, [r3, #4]
 800cc42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc44:	4013      	ands	r3, r2
 800cc46:	4618      	mov	r0, r3
 800cc48:	f000 fa43 	bl	800d0d2 <SEQ_BitPosition>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	461a      	mov	r2, r3
 800cc50:	4b58      	ldr	r3, [pc, #352]	@ (800cdb4 <UTIL_SEQ_Run+0x24c>)
 800cc52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc54:	f3ef 8310 	mrs	r3, PRIMASK
 800cc58:	61fb      	str	r3, [r7, #28]
  return(result);
 800cc5a:	69fb      	ldr	r3, [r7, #28]

        UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cc5c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800cc5e:	b672      	cpsid	i
}
 800cc60:	bf00      	nop
        /* remove from the list or pending task the one that has been selected to be executed */
        TaskSet &= ~(1U << CurrentTaskIdx);
 800cc62:	4b54      	ldr	r3, [pc, #336]	@ (800cdb4 <UTIL_SEQ_Run+0x24c>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	2201      	movs	r2, #1
 800cc68:	fa02 f303 	lsl.w	r3, r2, r3
 800cc6c:	43da      	mvns	r2, r3
 800cc6e:	4b4b      	ldr	r3, [pc, #300]	@ (800cd9c <UTIL_SEQ_Run+0x234>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4013      	ands	r3, r2
 800cc74:	4a49      	ldr	r2, [pc, #292]	@ (800cd9c <UTIL_SEQ_Run+0x234>)
 800cc76:	6013      	str	r3, [r2, #0]

        /*
         * remove from all priority mask the task that has been selected to be executed
         */
        for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800cc78:	2301      	movs	r3, #1
 800cc7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc7c:	e013      	b.n	800cca6 <UTIL_SEQ_Run+0x13e>
        {
          TaskPrio[counter - 1u].priority    &= ~(1U << CurrentTaskIdx);
 800cc7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc80:	3b01      	subs	r3, #1
 800cc82:	4a4a      	ldr	r2, [pc, #296]	@ (800cdac <UTIL_SEQ_Run+0x244>)
 800cc84:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800cc88:	4b4a      	ldr	r3, [pc, #296]	@ (800cdb4 <UTIL_SEQ_Run+0x24c>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	fa02 f303 	lsl.w	r3, r2, r3
 800cc92:	43da      	mvns	r2, r3
 800cc94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc96:	3b01      	subs	r3, #1
 800cc98:	400a      	ands	r2, r1
 800cc9a:	4944      	ldr	r1, [pc, #272]	@ (800cdac <UTIL_SEQ_Run+0x244>)
 800cc9c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800cca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cca2:	3b01      	subs	r3, #1
 800cca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d1e8      	bne.n	800cc7e <UTIL_SEQ_Run+0x116>
 800ccac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccb0:	69bb      	ldr	r3, [r7, #24]
 800ccb2:	f383 8810 	msr	PRIMASK, r3
}
 800ccb6:	bf00      	nop
        }
        UTIL_SEQ_EXIT_CRITICAL_SECTION( );

        UTIL_SEQ_PreTask(CurrentTaskIdx);
 800ccb8:	4b3e      	ldr	r3, [pc, #248]	@ (800cdb4 <UTIL_SEQ_Run+0x24c>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f000 f9e9 	bl	800d094 <UTIL_SEQ_PreTask>

        /*
         * Check that function exists before calling it
         */
        if ((CurrentTaskIdx < UTIL_SEQ_CONF_TASK_NBR) && (TaskCb[CurrentTaskIdx] != NULL))
 800ccc2:	4b3c      	ldr	r3, [pc, #240]	@ (800cdb4 <UTIL_SEQ_Run+0x24c>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2b1f      	cmp	r3, #31
 800ccc8:	d878      	bhi.n	800cdbc <UTIL_SEQ_Run+0x254>
 800ccca:	4b3a      	ldr	r3, [pc, #232]	@ (800cdb4 <UTIL_SEQ_Run+0x24c>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4a3a      	ldr	r2, [pc, #232]	@ (800cdb8 <UTIL_SEQ_Run+0x250>)
 800ccd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d071      	beq.n	800cdbc <UTIL_SEQ_Run+0x254>
        {
          /*
           * save the round-robin value to take into account the operation done in UTIL_SEQ_WaitEvt
           */
          for (uint32_t index = 0; index < UTIL_SEQ_CONF_PRIO_NBR; index++)
 800ccd8:	2300      	movs	r3, #0
 800ccda:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccdc:	e01e      	b.n	800cd1c <UTIL_SEQ_Run+0x1b4>
          {
            TaskPrio[index].round_robin &= ~(1U << CurrentTaskIdx);
 800ccde:	4a33      	ldr	r2, [pc, #204]	@ (800cdac <UTIL_SEQ_Run+0x244>)
 800cce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cce2:	00db      	lsls	r3, r3, #3
 800cce4:	4413      	add	r3, r2
 800cce6:	685a      	ldr	r2, [r3, #4]
 800cce8:	4b32      	ldr	r3, [pc, #200]	@ (800cdb4 <UTIL_SEQ_Run+0x24c>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	2101      	movs	r1, #1
 800ccee:	fa01 f303 	lsl.w	r3, r1, r3
 800ccf2:	43db      	mvns	r3, r3
 800ccf4:	401a      	ands	r2, r3
 800ccf6:	492d      	ldr	r1, [pc, #180]	@ (800cdac <UTIL_SEQ_Run+0x244>)
 800ccf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccfa:	00db      	lsls	r3, r3, #3
 800ccfc:	440b      	add	r3, r1
 800ccfe:	605a      	str	r2, [r3, #4]
            round_robin[index] = TaskPrio[index].round_robin;
 800cd00:	4a2a      	ldr	r2, [pc, #168]	@ (800cdac <UTIL_SEQ_Run+0x244>)
 800cd02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd04:	00db      	lsls	r3, r3, #3
 800cd06:	4413      	add	r3, r2
 800cd08:	685a      	ldr	r2, [r3, #4]
 800cd0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	3350      	adds	r3, #80	@ 0x50
 800cd10:	443b      	add	r3, r7
 800cd12:	f843 2c44 	str.w	r2, [r3, #-68]
          for (uint32_t index = 0; index < UTIL_SEQ_CONF_PRIO_NBR; index++)
 800cd16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd18:	3301      	adds	r3, #1
 800cd1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d0dd      	beq.n	800ccde <UTIL_SEQ_Run+0x176>
          }

          /* Execute the task */
          TaskCb[CurrentTaskIdx]( );
 800cd22:	4b24      	ldr	r3, [pc, #144]	@ (800cdb4 <UTIL_SEQ_Run+0x24c>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4a24      	ldr	r2, [pc, #144]	@ (800cdb8 <UTIL_SEQ_Run+0x250>)
 800cd28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd2c:	4798      	blx	r3

          /*
           * restore the round-robin context
           */
          for (uint32_t index = 0; index < UTIL_SEQ_CONF_PRIO_NBR; index++)
 800cd2e:	2300      	movs	r3, #0
 800cd30:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd32:	e013      	b.n	800cd5c <UTIL_SEQ_Run+0x1f4>
          {
            TaskPrio[index].round_robin &= round_robin[index];
 800cd34:	4a1d      	ldr	r2, [pc, #116]	@ (800cdac <UTIL_SEQ_Run+0x244>)
 800cd36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd38:	00db      	lsls	r3, r3, #3
 800cd3a:	4413      	add	r3, r2
 800cd3c:	685a      	ldr	r2, [r3, #4]
 800cd3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	3350      	adds	r3, #80	@ 0x50
 800cd44:	443b      	add	r3, r7
 800cd46:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cd4a:	401a      	ands	r2, r3
 800cd4c:	4917      	ldr	r1, [pc, #92]	@ (800cdac <UTIL_SEQ_Run+0x244>)
 800cd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd50:	00db      	lsls	r3, r3, #3
 800cd52:	440b      	add	r3, r1
 800cd54:	605a      	str	r2, [r3, #4]
          for (uint32_t index = 0; index < UTIL_SEQ_CONF_PRIO_NBR; index++)
 800cd56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd58:	3301      	adds	r3, #1
 800cd5a:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d0e8      	beq.n	800cd34 <UTIL_SEQ_Run+0x1cc>
          }

          UTIL_SEQ_PostTask(CurrentTaskIdx);
 800cd62:	4b14      	ldr	r3, [pc, #80]	@ (800cdb4 <UTIL_SEQ_Run+0x24c>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f000 f99e 	bl	800d0a8 <UTIL_SEQ_PostTask>

          local_taskset = TaskSet;
 800cd6c:	4b0b      	ldr	r3, [pc, #44]	@ (800cd9c <UTIL_SEQ_Run+0x234>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	647b      	str	r3, [r7, #68]	@ 0x44
          local_evtset = EvtSet;
 800cd72:	4b0b      	ldr	r3, [pc, #44]	@ (800cda0 <UTIL_SEQ_Run+0x238>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	643b      	str	r3, [r7, #64]	@ 0x40
          local_taskmask = TaskMask;
 800cd78:	4b0a      	ldr	r3, [pc, #40]	@ (800cda4 <UTIL_SEQ_Run+0x23c>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          local_evtwaited = EvtWaited;
 800cd7e:	4b0a      	ldr	r3, [pc, #40]	@ (800cda8 <UTIL_SEQ_Run+0x240>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	63bb      	str	r3, [r7, #56]	@ 0x38

          /*
           * Update the two list for next round
           */
          TaskClearList |= (1U << CurrentTaskIdx);
 800cd84:	4b0b      	ldr	r3, [pc, #44]	@ (800cdb4 <UTIL_SEQ_Run+0x24c>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	2201      	movs	r2, #1
 800cd8a:	409a      	lsls	r2, r3
 800cd8c:	4b08      	ldr	r3, [pc, #32]	@ (800cdb0 <UTIL_SEQ_Run+0x248>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4313      	orrs	r3, r2
 800cd92:	4a07      	ldr	r2, [pc, #28]	@ (800cdb0 <UTIL_SEQ_Run+0x248>)
 800cd94:	6013      	str	r3, [r2, #0]
 800cd96:	e014      	b.n	800cdc2 <UTIL_SEQ_Run+0x25a>
 800cd98:	20000430 	.word	0x20000430
 800cd9c:	20001888 	.word	0x20001888
 800cda0:	2000188c 	.word	0x2000188c
 800cda4:	2000042c 	.word	0x2000042c
 800cda8:	20001890 	.word	0x20001890
 800cdac:	20001918 	.word	0x20001918
 800cdb0:	20001920 	.word	0x20001920
 800cdb4:	20001894 	.word	0x20001894
 800cdb8:	20001898 	.word	0x20001898
        else
        {
          /*
           * must never occurs, it means there is a warning in the system
           */
          UTIL_SEQ_CatchWarning(UTIL_SEQ_WARNING_INVALIDTASKID);
 800cdbc:	2000      	movs	r0, #0
 800cdbe:	f000 f97d 	bl	800d0bc <UTIL_SEQ_CatchWarning>
    while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800cdc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cdc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdc6:	401a      	ands	r2, r3
 800cdc8:	4b22      	ldr	r3, [pc, #136]	@ (800ce54 <UTIL_SEQ_Run+0x2ec>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4013      	ands	r3, r2
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d005      	beq.n	800cdde <UTIL_SEQ_Run+0x276>
 800cdd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cdd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdd6:	4013      	ands	r3, r2
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	f43f aedf 	beq.w	800cb9c <UTIL_SEQ_Run+0x34>
        }
    }

    /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
    CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800cdde:	4b1e      	ldr	r3, [pc, #120]	@ (800ce58 <UTIL_SEQ_Run+0x2f0>)
 800cde0:	f04f 32ff 	mov.w	r2, #4294967295
 800cde4:	601a      	str	r2, [r3, #0]
    /* if a waited event is present, ignore the IDLE sequence */
    if ((local_evtset & EvtWaited)== 0U)
 800cde6:	4b1d      	ldr	r3, [pc, #116]	@ (800ce5c <UTIL_SEQ_Run+0x2f4>)
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdec:	4013      	ands	r3, r2
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d129      	bne.n	800ce46 <UTIL_SEQ_Run+0x2de>
    {
        UTIL_SEQ_PreIdle( );
 800cdf2:	f000 f941 	bl	800d078 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdf6:	f3ef 8310 	mrs	r3, PRIMASK
 800cdfa:	617b      	str	r3, [r7, #20]
  return(result);
 800cdfc:	697b      	ldr	r3, [r7, #20]

        UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800cdfe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800ce00:	b672      	cpsid	i
}
 800ce02:	bf00      	nop
        local_taskset = TaskSet;
 800ce04:	4b16      	ldr	r3, [pc, #88]	@ (800ce60 <UTIL_SEQ_Run+0x2f8>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	647b      	str	r3, [r7, #68]	@ 0x44
        local_evtset = EvtSet;
 800ce0a:	4b16      	ldr	r3, [pc, #88]	@ (800ce64 <UTIL_SEQ_Run+0x2fc>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	643b      	str	r3, [r7, #64]	@ 0x40
        local_taskmask = TaskMask;
 800ce10:	4b15      	ldr	r3, [pc, #84]	@ (800ce68 <UTIL_SEQ_Run+0x300>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800ce16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce1a:	401a      	ands	r2, r3
 800ce1c:	4b0d      	ldr	r3, [pc, #52]	@ (800ce54 <UTIL_SEQ_Run+0x2ec>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4013      	ands	r3, r2
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d107      	bne.n	800ce36 <UTIL_SEQ_Run+0x2ce>
        {
            if ((local_evtset & EvtWaited)== 0U)
 800ce26:	4b0d      	ldr	r3, [pc, #52]	@ (800ce5c <UTIL_SEQ_Run+0x2f4>)
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce2c:	4013      	ands	r3, r2
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d101      	bne.n	800ce36 <UTIL_SEQ_Run+0x2ce>
            {
                UTIL_SEQ_Idle( );
 800ce32:	f7f4 fabe 	bl	80013b2 <UTIL_SEQ_Idle>
 800ce36:	6a3b      	ldr	r3, [r7, #32]
 800ce38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	f383 8810 	msr	PRIMASK, r3
}
 800ce40:	bf00      	nop
            }
        }
        UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

        UTIL_SEQ_PostIdle( );
 800ce42:	f000 f920 	bl	800d086 <UTIL_SEQ_PostIdle>
    }

    /* restore the mask from UTIL_SEQ_Run() */
    SuperMask = super_mask_backup;
 800ce46:	4a03      	ldr	r2, [pc, #12]	@ (800ce54 <UTIL_SEQ_Run+0x2ec>)
 800ce48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce4a:	6013      	str	r3, [r2, #0]

    return;
 800ce4c:	bf00      	nop
}
 800ce4e:	3750      	adds	r7, #80	@ 0x50
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	20000430 	.word	0x20000430
 800ce58:	20001894 	.word	0x20001894
 800ce5c:	20001890 	.word	0x20001890
 800ce60:	20001888 	.word	0x20001888
 800ce64:	2000188c 	.word	0x2000188c
 800ce68:	2000042c 	.word	0x2000042c

0800ce6c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b088      	sub	sp, #32
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	60f8      	str	r0, [r7, #12]
 800ce74:	60b9      	str	r1, [r7, #8]
 800ce76:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce78:	f3ef 8310 	mrs	r3, PRIMASK
 800ce7c:	617b      	str	r3, [r7, #20]
  return(result);
 800ce7e:	697b      	ldr	r3, [r7, #20]
    (void)Flags;
    UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800ce80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ce82:	b672      	cpsid	i
}
 800ce84:	bf00      	nop

    TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800ce86:	68f8      	ldr	r0, [r7, #12]
 800ce88:	f000 f923 	bl	800d0d2 <SEQ_BitPosition>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	4619      	mov	r1, r3
 800ce90:	4a06      	ldr	r2, [pc, #24]	@ (800ceac <UTIL_SEQ_RegTask+0x40>)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ce98:	69fb      	ldr	r3, [r7, #28]
 800ce9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce9c:	69bb      	ldr	r3, [r7, #24]
 800ce9e:	f383 8810 	msr	PRIMASK, r3
}
 800cea2:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION();

    return;
 800cea4:	bf00      	nop
}
 800cea6:	3720      	adds	r7, #32
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	20001898 	.word	0x20001898

0800ceb0 <UTIL_SEQ_SetTask>:
    UTIL_SEQ_EXIT_CRITICAL_SECTION();
    return _status;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm, uint32_t Task_Prio )
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b087      	sub	sp, #28
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ceba:	f3ef 8310 	mrs	r3, PRIMASK
 800cebe:	60fb      	str	r3, [r7, #12]
  return(result);
 800cec0:	68fb      	ldr	r3, [r7, #12]
    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cec2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cec4:	b672      	cpsid	i
}
 800cec6:	bf00      	nop

    TaskSet |= TaskId_bm;
 800cec8:	4b0d      	ldr	r3, [pc, #52]	@ (800cf00 <UTIL_SEQ_SetTask+0x50>)
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	4313      	orrs	r3, r2
 800ced0:	4a0b      	ldr	r2, [pc, #44]	@ (800cf00 <UTIL_SEQ_SetTask+0x50>)
 800ced2:	6013      	str	r3, [r2, #0]
    TaskPrio[Task_Prio].priority |= TaskId_bm;
 800ced4:	4a0b      	ldr	r2, [pc, #44]	@ (800cf04 <UTIL_SEQ_SetTask+0x54>)
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	431a      	orrs	r2, r3
 800cee0:	4908      	ldr	r1, [pc, #32]	@ (800cf04 <UTIL_SEQ_SetTask+0x54>)
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	f383 8810 	msr	PRIMASK, r3
}
 800cef2:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    return;
 800cef4:	bf00      	nop
}
 800cef6:	371c      	adds	r7, #28
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr
 800cf00:	20001888 	.word	0x20001888
 800cf04:	20001918 	.word	0x20001918

0800cf08 <UTIL_SEQ_PauseTask>:
    UTIL_SEQ_EXIT_CRITICAL_SECTION();
    return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b087      	sub	sp, #28
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf10:	f3ef 8310 	mrs	r3, PRIMASK
 800cf14:	60fb      	str	r3, [r7, #12]
  return(result);
 800cf16:	68fb      	ldr	r3, [r7, #12]
    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cf18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cf1a:	b672      	cpsid	i
}
 800cf1c:	bf00      	nop

    TaskMask &= (~TaskId_bm);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	43da      	mvns	r2, r3
 800cf22:	4b08      	ldr	r3, [pc, #32]	@ (800cf44 <UTIL_SEQ_PauseTask+0x3c>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	4013      	ands	r3, r2
 800cf28:	4a06      	ldr	r2, [pc, #24]	@ (800cf44 <UTIL_SEQ_PauseTask+0x3c>)
 800cf2a:	6013      	str	r3, [r2, #0]
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	f383 8810 	msr	PRIMASK, r3
}
 800cf36:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    return;
 800cf38:	bf00      	nop
}
 800cf3a:	371c      	adds	r7, #28
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr
 800cf44:	2000042c 	.word	0x2000042c

0800cf48 <UTIL_SEQ_ResumeTask>:
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b087      	sub	sp, #28
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf50:	f3ef 8310 	mrs	r3, PRIMASK
 800cf54:	60fb      	str	r3, [r7, #12]
  return(result);
 800cf56:	68fb      	ldr	r3, [r7, #12]
    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cf58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cf5a:	b672      	cpsid	i
}
 800cf5c:	bf00      	nop

    TaskMask |= TaskId_bm;
 800cf5e:	4b09      	ldr	r3, [pc, #36]	@ (800cf84 <UTIL_SEQ_ResumeTask+0x3c>)
 800cf60:	681a      	ldr	r2, [r3, #0]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	4313      	orrs	r3, r2
 800cf66:	4a07      	ldr	r2, [pc, #28]	@ (800cf84 <UTIL_SEQ_ResumeTask+0x3c>)
 800cf68:	6013      	str	r3, [r2, #0]
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	f383 8810 	msr	PRIMASK, r3
}
 800cf74:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    return;
 800cf76:	bf00      	nop
}
 800cf78:	371c      	adds	r7, #28
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr
 800cf82:	bf00      	nop
 800cf84:	2000042c 	.word	0x2000042c

0800cf88 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b087      	sub	sp, #28
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf90:	f3ef 8310 	mrs	r3, PRIMASK
 800cf94:	60fb      	str	r3, [r7, #12]
  return(result);
 800cf96:	68fb      	ldr	r3, [r7, #12]
    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cf98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cf9a:	b672      	cpsid	i
}
 800cf9c:	bf00      	nop

    EvtSet |= EvtId_bm;
 800cf9e:	4b09      	ldr	r3, [pc, #36]	@ (800cfc4 <UTIL_SEQ_SetEvt+0x3c>)
 800cfa0:	681a      	ldr	r2, [r3, #0]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	4313      	orrs	r3, r2
 800cfa6:	4a07      	ldr	r2, [pc, #28]	@ (800cfc4 <UTIL_SEQ_SetEvt+0x3c>)
 800cfa8:	6013      	str	r3, [r2, #0]
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	f383 8810 	msr	PRIMASK, r3
}
 800cfb4:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    return;
 800cfb6:	bf00      	nop
}
 800cfb8:	371c      	adds	r7, #28
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr
 800cfc2:	bf00      	nop
 800cfc4:	2000188c 	.word	0x2000188c

0800cfc8 <UTIL_SEQ_WaitEvt>:

    return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b088      	sub	sp, #32
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
    UTIL_SEQ_bm_t wait_task_idx;
    /*
     * store in local the current_task_id_bm as the global variable CurrentTaskIdx
     * may be overwritten in case there are nested call of UTIL_SEQ_Run()
     */
    current_task_idx = CurrentTaskIdx;
 800cfd0:	4b1f      	ldr	r3, [pc, #124]	@ (800d050 <UTIL_SEQ_WaitEvt+0x88>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	61bb      	str	r3, [r7, #24]
    if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800cfd6:	4b1e      	ldr	r3, [pc, #120]	@ (800d050 <UTIL_SEQ_WaitEvt+0x88>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfde:	d102      	bne.n	800cfe6 <UTIL_SEQ_WaitEvt+0x1e>
    {
        wait_task_idx = 0u;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	61fb      	str	r3, [r7, #28]
 800cfe4:	e005      	b.n	800cff2 <UTIL_SEQ_WaitEvt+0x2a>
    }
    else
    {
        wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800cfe6:	4b1a      	ldr	r3, [pc, #104]	@ (800d050 <UTIL_SEQ_WaitEvt+0x88>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	2201      	movs	r2, #1
 800cfec:	fa02 f303 	lsl.w	r3, r2, r3
 800cff0:	61fb      	str	r3, [r7, #28]
    }

    /* backup the event id that was currently waited */
    event_waited_id_backup = EvtWaited;
 800cff2:	4b18      	ldr	r3, [pc, #96]	@ (800d054 <UTIL_SEQ_WaitEvt+0x8c>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	617b      	str	r3, [r7, #20]
    EvtWaited = EvtId_bm;
 800cff8:	4a16      	ldr	r2, [pc, #88]	@ (800d054 <UTIL_SEQ_WaitEvt+0x8c>)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6013      	str	r3, [r2, #0]
     * The system is waiting only for the last waited event.
     * When it will go out, it will wait again from the previous one.
     * It case it occurs while waiting for the second one, the while loop will exit immediately
     */

    while ((EvtSet & EvtId_bm) == 0U)
 800cffe:	e003      	b.n	800d008 <UTIL_SEQ_WaitEvt+0x40>
    {
        UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800d000:	6879      	ldr	r1, [r7, #4]
 800d002:	69f8      	ldr	r0, [r7, #28]
 800d004:	f000 f82a 	bl	800d05c <UTIL_SEQ_EvtIdle>
    while ((EvtSet & EvtId_bm) == 0U)
 800d008:	4b13      	ldr	r3, [pc, #76]	@ (800d058 <UTIL_SEQ_WaitEvt+0x90>)
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	4013      	ands	r3, r2
 800d010:	2b00      	cmp	r3, #0
 800d012:	d0f5      	beq.n	800d000 <UTIL_SEQ_WaitEvt+0x38>
    /*
     * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run()
     * from UTIL_SEQ_EvtIdle(). This is required so that a second call of UTIL_SEQ_WaitEvt()
     * in the same process pass the correct current_task_id_bm in the call of UTIL_SEQ_EvtIdle()
     */
    CurrentTaskIdx = current_task_idx;
 800d014:	4a0e      	ldr	r2, [pc, #56]	@ (800d050 <UTIL_SEQ_WaitEvt+0x88>)
 800d016:	69bb      	ldr	r3, [r7, #24]
 800d018:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d01a:	f3ef 8310 	mrs	r3, PRIMASK
 800d01e:	60bb      	str	r3, [r7, #8]
  return(result);
 800d020:	68bb      	ldr	r3, [r7, #8]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d022:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d024:	b672      	cpsid	i
}
 800d026:	bf00      	nop

    EvtSet &= (~EvtId_bm);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	43da      	mvns	r2, r3
 800d02c:	4b0a      	ldr	r3, [pc, #40]	@ (800d058 <UTIL_SEQ_WaitEvt+0x90>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4013      	ands	r3, r2
 800d032:	4a09      	ldr	r2, [pc, #36]	@ (800d058 <UTIL_SEQ_WaitEvt+0x90>)
 800d034:	6013      	str	r3, [r2, #0]
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	f383 8810 	msr	PRIMASK, r3
}
 800d040:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    EvtWaited = event_waited_id_backup;
 800d042:	4a04      	ldr	r2, [pc, #16]	@ (800d054 <UTIL_SEQ_WaitEvt+0x8c>)
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	6013      	str	r3, [r2, #0]
    return;
 800d048:	bf00      	nop
}
 800d04a:	3720      	adds	r7, #32
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	20001894 	.word	0x20001894
 800d054:	20001890 	.word	0x20001890
 800d058:	2000188c 	.word	0x2000188c

0800d05c <UTIL_SEQ_EvtIdle>:
    UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
    return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b082      	sub	sp, #8
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
    (void)EvtWaited_bm;
    UTIL_SEQ_Run(~TaskId_bm);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	43db      	mvns	r3, r3
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7ff fd7c 	bl	800cb68 <UTIL_SEQ_Run>
    return;
 800d070:	bf00      	nop
}
 800d072:	3708      	adds	r7, #8
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <UTIL_SEQ_PreIdle>:
{
    return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800d078:	b480      	push	{r7}
 800d07a:	af00      	add	r7, sp, #0
    /*
     * Unless specified by the application, there is nothing to be done
     */
    return;
 800d07c:	bf00      	nop
}
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr

0800d086 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800d086:	b480      	push	{r7}
 800d088:	af00      	add	r7, sp, #0
    /*
     * Unless specified by the application, there is nothing to be done
     */
    return;
 800d08a:	bf00      	nop
}
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr

0800d094 <UTIL_SEQ_PreTask>:

__WEAK void UTIL_SEQ_PreTask( uint32_t TaskId )
{
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
    (void)TaskId;
    return;
 800d09c:	bf00      	nop
}
 800d09e:	370c      	adds	r7, #12
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr

0800d0a8 <UTIL_SEQ_PostTask>:

__WEAK void UTIL_SEQ_PostTask( uint32_t TaskId )
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b083      	sub	sp, #12
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
    (void)TaskId;
    return;
 800d0b0:	bf00      	nop
}
 800d0b2:	370c      	adds	r7, #12
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr

0800d0bc <UTIL_SEQ_CatchWarning>:

__WEAK void UTIL_SEQ_CatchWarning(UTIL_SEQ_WARNING WarningId)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b083      	sub	sp, #12
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	71fb      	strb	r3, [r7, #7]
    (void)WarningId;
    return;
 800d0c6:	bf00      	nop
}
 800d0c8:	370c      	adds	r7, #12
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr

0800d0d2 <SEQ_BitPosition>:
  * @brief return the position of the first bit set to 1
  * @param Value 32 bit value
  * @retval bit position
  */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800d0d2:	b480      	push	{r7}
 800d0d4:	b085      	sub	sp, #20
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	6078      	str	r0, [r7, #4]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d101      	bne.n	800d0e8 <SEQ_BitPosition+0x16>
    return 32U;
 800d0e4:	2320      	movs	r3, #32
 800d0e6:	e003      	b.n	800d0f0 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	fab3 f383 	clz	r3, r3
 800d0ee:	b2db      	uxtb	r3, r3
    return (uint8_t)(31 -__CLZ( Value ));
 800d0f0:	f1c3 031f 	rsb	r3, r3, #31
 800d0f4:	b2db      	uxtb	r3, r3
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3714      	adds	r7, #20
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr
	...

0800d104 <std>:
 800d104:	2300      	movs	r3, #0
 800d106:	b510      	push	{r4, lr}
 800d108:	4604      	mov	r4, r0
 800d10a:	e9c0 3300 	strd	r3, r3, [r0]
 800d10e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d112:	6083      	str	r3, [r0, #8]
 800d114:	8181      	strh	r1, [r0, #12]
 800d116:	6643      	str	r3, [r0, #100]	@ 0x64
 800d118:	81c2      	strh	r2, [r0, #14]
 800d11a:	6183      	str	r3, [r0, #24]
 800d11c:	4619      	mov	r1, r3
 800d11e:	2208      	movs	r2, #8
 800d120:	305c      	adds	r0, #92	@ 0x5c
 800d122:	f000 fa01 	bl	800d528 <memset>
 800d126:	4b0d      	ldr	r3, [pc, #52]	@ (800d15c <std+0x58>)
 800d128:	6263      	str	r3, [r4, #36]	@ 0x24
 800d12a:	4b0d      	ldr	r3, [pc, #52]	@ (800d160 <std+0x5c>)
 800d12c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d12e:	4b0d      	ldr	r3, [pc, #52]	@ (800d164 <std+0x60>)
 800d130:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d132:	4b0d      	ldr	r3, [pc, #52]	@ (800d168 <std+0x64>)
 800d134:	6323      	str	r3, [r4, #48]	@ 0x30
 800d136:	4b0d      	ldr	r3, [pc, #52]	@ (800d16c <std+0x68>)
 800d138:	6224      	str	r4, [r4, #32]
 800d13a:	429c      	cmp	r4, r3
 800d13c:	d006      	beq.n	800d14c <std+0x48>
 800d13e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d142:	4294      	cmp	r4, r2
 800d144:	d002      	beq.n	800d14c <std+0x48>
 800d146:	33d0      	adds	r3, #208	@ 0xd0
 800d148:	429c      	cmp	r4, r3
 800d14a:	d105      	bne.n	800d158 <std+0x54>
 800d14c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d154:	f000 ba60 	b.w	800d618 <__retarget_lock_init_recursive>
 800d158:	bd10      	pop	{r4, pc}
 800d15a:	bf00      	nop
 800d15c:	0800d379 	.word	0x0800d379
 800d160:	0800d39b 	.word	0x0800d39b
 800d164:	0800d3d3 	.word	0x0800d3d3
 800d168:	0800d3f7 	.word	0x0800d3f7
 800d16c:	20001924 	.word	0x20001924

0800d170 <stdio_exit_handler>:
 800d170:	4a02      	ldr	r2, [pc, #8]	@ (800d17c <stdio_exit_handler+0xc>)
 800d172:	4903      	ldr	r1, [pc, #12]	@ (800d180 <stdio_exit_handler+0x10>)
 800d174:	4803      	ldr	r0, [pc, #12]	@ (800d184 <stdio_exit_handler+0x14>)
 800d176:	f000 b869 	b.w	800d24c <_fwalk_sglue>
 800d17a:	bf00      	nop
 800d17c:	20000434 	.word	0x20000434
 800d180:	0800ded1 	.word	0x0800ded1
 800d184:	20000444 	.word	0x20000444

0800d188 <cleanup_stdio>:
 800d188:	6841      	ldr	r1, [r0, #4]
 800d18a:	4b0c      	ldr	r3, [pc, #48]	@ (800d1bc <cleanup_stdio+0x34>)
 800d18c:	4299      	cmp	r1, r3
 800d18e:	b510      	push	{r4, lr}
 800d190:	4604      	mov	r4, r0
 800d192:	d001      	beq.n	800d198 <cleanup_stdio+0x10>
 800d194:	f000 fe9c 	bl	800ded0 <_fflush_r>
 800d198:	68a1      	ldr	r1, [r4, #8]
 800d19a:	4b09      	ldr	r3, [pc, #36]	@ (800d1c0 <cleanup_stdio+0x38>)
 800d19c:	4299      	cmp	r1, r3
 800d19e:	d002      	beq.n	800d1a6 <cleanup_stdio+0x1e>
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	f000 fe95 	bl	800ded0 <_fflush_r>
 800d1a6:	68e1      	ldr	r1, [r4, #12]
 800d1a8:	4b06      	ldr	r3, [pc, #24]	@ (800d1c4 <cleanup_stdio+0x3c>)
 800d1aa:	4299      	cmp	r1, r3
 800d1ac:	d004      	beq.n	800d1b8 <cleanup_stdio+0x30>
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1b4:	f000 be8c 	b.w	800ded0 <_fflush_r>
 800d1b8:	bd10      	pop	{r4, pc}
 800d1ba:	bf00      	nop
 800d1bc:	20001924 	.word	0x20001924
 800d1c0:	2000198c 	.word	0x2000198c
 800d1c4:	200019f4 	.word	0x200019f4

0800d1c8 <global_stdio_init.part.0>:
 800d1c8:	b510      	push	{r4, lr}
 800d1ca:	4b0b      	ldr	r3, [pc, #44]	@ (800d1f8 <global_stdio_init.part.0+0x30>)
 800d1cc:	4c0b      	ldr	r4, [pc, #44]	@ (800d1fc <global_stdio_init.part.0+0x34>)
 800d1ce:	4a0c      	ldr	r2, [pc, #48]	@ (800d200 <global_stdio_init.part.0+0x38>)
 800d1d0:	601a      	str	r2, [r3, #0]
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	2104      	movs	r1, #4
 800d1d8:	f7ff ff94 	bl	800d104 <std>
 800d1dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	2109      	movs	r1, #9
 800d1e4:	f7ff ff8e 	bl	800d104 <std>
 800d1e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d1ec:	2202      	movs	r2, #2
 800d1ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1f2:	2112      	movs	r1, #18
 800d1f4:	f7ff bf86 	b.w	800d104 <std>
 800d1f8:	20001a5c 	.word	0x20001a5c
 800d1fc:	20001924 	.word	0x20001924
 800d200:	0800d171 	.word	0x0800d171

0800d204 <__sfp_lock_acquire>:
 800d204:	4801      	ldr	r0, [pc, #4]	@ (800d20c <__sfp_lock_acquire+0x8>)
 800d206:	f000 ba08 	b.w	800d61a <__retarget_lock_acquire_recursive>
 800d20a:	bf00      	nop
 800d20c:	20001a65 	.word	0x20001a65

0800d210 <__sfp_lock_release>:
 800d210:	4801      	ldr	r0, [pc, #4]	@ (800d218 <__sfp_lock_release+0x8>)
 800d212:	f000 ba03 	b.w	800d61c <__retarget_lock_release_recursive>
 800d216:	bf00      	nop
 800d218:	20001a65 	.word	0x20001a65

0800d21c <__sinit>:
 800d21c:	b510      	push	{r4, lr}
 800d21e:	4604      	mov	r4, r0
 800d220:	f7ff fff0 	bl	800d204 <__sfp_lock_acquire>
 800d224:	6a23      	ldr	r3, [r4, #32]
 800d226:	b11b      	cbz	r3, 800d230 <__sinit+0x14>
 800d228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d22c:	f7ff bff0 	b.w	800d210 <__sfp_lock_release>
 800d230:	4b04      	ldr	r3, [pc, #16]	@ (800d244 <__sinit+0x28>)
 800d232:	6223      	str	r3, [r4, #32]
 800d234:	4b04      	ldr	r3, [pc, #16]	@ (800d248 <__sinit+0x2c>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d1f5      	bne.n	800d228 <__sinit+0xc>
 800d23c:	f7ff ffc4 	bl	800d1c8 <global_stdio_init.part.0>
 800d240:	e7f2      	b.n	800d228 <__sinit+0xc>
 800d242:	bf00      	nop
 800d244:	0800d189 	.word	0x0800d189
 800d248:	20001a5c 	.word	0x20001a5c

0800d24c <_fwalk_sglue>:
 800d24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d250:	4607      	mov	r7, r0
 800d252:	4688      	mov	r8, r1
 800d254:	4614      	mov	r4, r2
 800d256:	2600      	movs	r6, #0
 800d258:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d25c:	f1b9 0901 	subs.w	r9, r9, #1
 800d260:	d505      	bpl.n	800d26e <_fwalk_sglue+0x22>
 800d262:	6824      	ldr	r4, [r4, #0]
 800d264:	2c00      	cmp	r4, #0
 800d266:	d1f7      	bne.n	800d258 <_fwalk_sglue+0xc>
 800d268:	4630      	mov	r0, r6
 800d26a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d26e:	89ab      	ldrh	r3, [r5, #12]
 800d270:	2b01      	cmp	r3, #1
 800d272:	d907      	bls.n	800d284 <_fwalk_sglue+0x38>
 800d274:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d278:	3301      	adds	r3, #1
 800d27a:	d003      	beq.n	800d284 <_fwalk_sglue+0x38>
 800d27c:	4629      	mov	r1, r5
 800d27e:	4638      	mov	r0, r7
 800d280:	47c0      	blx	r8
 800d282:	4306      	orrs	r6, r0
 800d284:	3568      	adds	r5, #104	@ 0x68
 800d286:	e7e9      	b.n	800d25c <_fwalk_sglue+0x10>

0800d288 <iprintf>:
 800d288:	b40f      	push	{r0, r1, r2, r3}
 800d28a:	b507      	push	{r0, r1, r2, lr}
 800d28c:	4906      	ldr	r1, [pc, #24]	@ (800d2a8 <iprintf+0x20>)
 800d28e:	ab04      	add	r3, sp, #16
 800d290:	6808      	ldr	r0, [r1, #0]
 800d292:	f853 2b04 	ldr.w	r2, [r3], #4
 800d296:	6881      	ldr	r1, [r0, #8]
 800d298:	9301      	str	r3, [sp, #4]
 800d29a:	f000 faf1 	bl	800d880 <_vfiprintf_r>
 800d29e:	b003      	add	sp, #12
 800d2a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2a4:	b004      	add	sp, #16
 800d2a6:	4770      	bx	lr
 800d2a8:	20000440 	.word	0x20000440

0800d2ac <putchar>:
 800d2ac:	4b02      	ldr	r3, [pc, #8]	@ (800d2b8 <putchar+0xc>)
 800d2ae:	4601      	mov	r1, r0
 800d2b0:	6818      	ldr	r0, [r3, #0]
 800d2b2:	6882      	ldr	r2, [r0, #8]
 800d2b4:	f000 be96 	b.w	800dfe4 <_putc_r>
 800d2b8:	20000440 	.word	0x20000440

0800d2bc <_puts_r>:
 800d2bc:	6a03      	ldr	r3, [r0, #32]
 800d2be:	b570      	push	{r4, r5, r6, lr}
 800d2c0:	6884      	ldr	r4, [r0, #8]
 800d2c2:	4605      	mov	r5, r0
 800d2c4:	460e      	mov	r6, r1
 800d2c6:	b90b      	cbnz	r3, 800d2cc <_puts_r+0x10>
 800d2c8:	f7ff ffa8 	bl	800d21c <__sinit>
 800d2cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d2ce:	07db      	lsls	r3, r3, #31
 800d2d0:	d405      	bmi.n	800d2de <_puts_r+0x22>
 800d2d2:	89a3      	ldrh	r3, [r4, #12]
 800d2d4:	0598      	lsls	r0, r3, #22
 800d2d6:	d402      	bmi.n	800d2de <_puts_r+0x22>
 800d2d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2da:	f000 f99e 	bl	800d61a <__retarget_lock_acquire_recursive>
 800d2de:	89a3      	ldrh	r3, [r4, #12]
 800d2e0:	0719      	lsls	r1, r3, #28
 800d2e2:	d502      	bpl.n	800d2ea <_puts_r+0x2e>
 800d2e4:	6923      	ldr	r3, [r4, #16]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d135      	bne.n	800d356 <_puts_r+0x9a>
 800d2ea:	4621      	mov	r1, r4
 800d2ec:	4628      	mov	r0, r5
 800d2ee:	f000 f8c5 	bl	800d47c <__swsetup_r>
 800d2f2:	b380      	cbz	r0, 800d356 <_puts_r+0x9a>
 800d2f4:	f04f 35ff 	mov.w	r5, #4294967295
 800d2f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d2fa:	07da      	lsls	r2, r3, #31
 800d2fc:	d405      	bmi.n	800d30a <_puts_r+0x4e>
 800d2fe:	89a3      	ldrh	r3, [r4, #12]
 800d300:	059b      	lsls	r3, r3, #22
 800d302:	d402      	bmi.n	800d30a <_puts_r+0x4e>
 800d304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d306:	f000 f989 	bl	800d61c <__retarget_lock_release_recursive>
 800d30a:	4628      	mov	r0, r5
 800d30c:	bd70      	pop	{r4, r5, r6, pc}
 800d30e:	2b00      	cmp	r3, #0
 800d310:	da04      	bge.n	800d31c <_puts_r+0x60>
 800d312:	69a2      	ldr	r2, [r4, #24]
 800d314:	429a      	cmp	r2, r3
 800d316:	dc17      	bgt.n	800d348 <_puts_r+0x8c>
 800d318:	290a      	cmp	r1, #10
 800d31a:	d015      	beq.n	800d348 <_puts_r+0x8c>
 800d31c:	6823      	ldr	r3, [r4, #0]
 800d31e:	1c5a      	adds	r2, r3, #1
 800d320:	6022      	str	r2, [r4, #0]
 800d322:	7019      	strb	r1, [r3, #0]
 800d324:	68a3      	ldr	r3, [r4, #8]
 800d326:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d32a:	3b01      	subs	r3, #1
 800d32c:	60a3      	str	r3, [r4, #8]
 800d32e:	2900      	cmp	r1, #0
 800d330:	d1ed      	bne.n	800d30e <_puts_r+0x52>
 800d332:	2b00      	cmp	r3, #0
 800d334:	da11      	bge.n	800d35a <_puts_r+0x9e>
 800d336:	4622      	mov	r2, r4
 800d338:	210a      	movs	r1, #10
 800d33a:	4628      	mov	r0, r5
 800d33c:	f000 f85f 	bl	800d3fe <__swbuf_r>
 800d340:	3001      	adds	r0, #1
 800d342:	d0d7      	beq.n	800d2f4 <_puts_r+0x38>
 800d344:	250a      	movs	r5, #10
 800d346:	e7d7      	b.n	800d2f8 <_puts_r+0x3c>
 800d348:	4622      	mov	r2, r4
 800d34a:	4628      	mov	r0, r5
 800d34c:	f000 f857 	bl	800d3fe <__swbuf_r>
 800d350:	3001      	adds	r0, #1
 800d352:	d1e7      	bne.n	800d324 <_puts_r+0x68>
 800d354:	e7ce      	b.n	800d2f4 <_puts_r+0x38>
 800d356:	3e01      	subs	r6, #1
 800d358:	e7e4      	b.n	800d324 <_puts_r+0x68>
 800d35a:	6823      	ldr	r3, [r4, #0]
 800d35c:	1c5a      	adds	r2, r3, #1
 800d35e:	6022      	str	r2, [r4, #0]
 800d360:	220a      	movs	r2, #10
 800d362:	701a      	strb	r2, [r3, #0]
 800d364:	e7ee      	b.n	800d344 <_puts_r+0x88>
	...

0800d368 <puts>:
 800d368:	4b02      	ldr	r3, [pc, #8]	@ (800d374 <puts+0xc>)
 800d36a:	4601      	mov	r1, r0
 800d36c:	6818      	ldr	r0, [r3, #0]
 800d36e:	f7ff bfa5 	b.w	800d2bc <_puts_r>
 800d372:	bf00      	nop
 800d374:	20000440 	.word	0x20000440

0800d378 <__sread>:
 800d378:	b510      	push	{r4, lr}
 800d37a:	460c      	mov	r4, r1
 800d37c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d380:	f000 f8fc 	bl	800d57c <_read_r>
 800d384:	2800      	cmp	r0, #0
 800d386:	bfab      	itete	ge
 800d388:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d38a:	89a3      	ldrhlt	r3, [r4, #12]
 800d38c:	181b      	addge	r3, r3, r0
 800d38e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d392:	bfac      	ite	ge
 800d394:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d396:	81a3      	strhlt	r3, [r4, #12]
 800d398:	bd10      	pop	{r4, pc}

0800d39a <__swrite>:
 800d39a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d39e:	461f      	mov	r7, r3
 800d3a0:	898b      	ldrh	r3, [r1, #12]
 800d3a2:	05db      	lsls	r3, r3, #23
 800d3a4:	4605      	mov	r5, r0
 800d3a6:	460c      	mov	r4, r1
 800d3a8:	4616      	mov	r6, r2
 800d3aa:	d505      	bpl.n	800d3b8 <__swrite+0x1e>
 800d3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3b0:	2302      	movs	r3, #2
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	f000 f8d0 	bl	800d558 <_lseek_r>
 800d3b8:	89a3      	ldrh	r3, [r4, #12]
 800d3ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d3c2:	81a3      	strh	r3, [r4, #12]
 800d3c4:	4632      	mov	r2, r6
 800d3c6:	463b      	mov	r3, r7
 800d3c8:	4628      	mov	r0, r5
 800d3ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3ce:	f000 b8e7 	b.w	800d5a0 <_write_r>

0800d3d2 <__sseek>:
 800d3d2:	b510      	push	{r4, lr}
 800d3d4:	460c      	mov	r4, r1
 800d3d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3da:	f000 f8bd 	bl	800d558 <_lseek_r>
 800d3de:	1c43      	adds	r3, r0, #1
 800d3e0:	89a3      	ldrh	r3, [r4, #12]
 800d3e2:	bf15      	itete	ne
 800d3e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d3e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d3ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d3ee:	81a3      	strheq	r3, [r4, #12]
 800d3f0:	bf18      	it	ne
 800d3f2:	81a3      	strhne	r3, [r4, #12]
 800d3f4:	bd10      	pop	{r4, pc}

0800d3f6 <__sclose>:
 800d3f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3fa:	f000 b89d 	b.w	800d538 <_close_r>

0800d3fe <__swbuf_r>:
 800d3fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d400:	460e      	mov	r6, r1
 800d402:	4614      	mov	r4, r2
 800d404:	4605      	mov	r5, r0
 800d406:	b118      	cbz	r0, 800d410 <__swbuf_r+0x12>
 800d408:	6a03      	ldr	r3, [r0, #32]
 800d40a:	b90b      	cbnz	r3, 800d410 <__swbuf_r+0x12>
 800d40c:	f7ff ff06 	bl	800d21c <__sinit>
 800d410:	69a3      	ldr	r3, [r4, #24]
 800d412:	60a3      	str	r3, [r4, #8]
 800d414:	89a3      	ldrh	r3, [r4, #12]
 800d416:	071a      	lsls	r2, r3, #28
 800d418:	d501      	bpl.n	800d41e <__swbuf_r+0x20>
 800d41a:	6923      	ldr	r3, [r4, #16]
 800d41c:	b943      	cbnz	r3, 800d430 <__swbuf_r+0x32>
 800d41e:	4621      	mov	r1, r4
 800d420:	4628      	mov	r0, r5
 800d422:	f000 f82b 	bl	800d47c <__swsetup_r>
 800d426:	b118      	cbz	r0, 800d430 <__swbuf_r+0x32>
 800d428:	f04f 37ff 	mov.w	r7, #4294967295
 800d42c:	4638      	mov	r0, r7
 800d42e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d430:	6823      	ldr	r3, [r4, #0]
 800d432:	6922      	ldr	r2, [r4, #16]
 800d434:	1a98      	subs	r0, r3, r2
 800d436:	6963      	ldr	r3, [r4, #20]
 800d438:	b2f6      	uxtb	r6, r6
 800d43a:	4283      	cmp	r3, r0
 800d43c:	4637      	mov	r7, r6
 800d43e:	dc05      	bgt.n	800d44c <__swbuf_r+0x4e>
 800d440:	4621      	mov	r1, r4
 800d442:	4628      	mov	r0, r5
 800d444:	f000 fd44 	bl	800ded0 <_fflush_r>
 800d448:	2800      	cmp	r0, #0
 800d44a:	d1ed      	bne.n	800d428 <__swbuf_r+0x2a>
 800d44c:	68a3      	ldr	r3, [r4, #8]
 800d44e:	3b01      	subs	r3, #1
 800d450:	60a3      	str	r3, [r4, #8]
 800d452:	6823      	ldr	r3, [r4, #0]
 800d454:	1c5a      	adds	r2, r3, #1
 800d456:	6022      	str	r2, [r4, #0]
 800d458:	701e      	strb	r6, [r3, #0]
 800d45a:	6962      	ldr	r2, [r4, #20]
 800d45c:	1c43      	adds	r3, r0, #1
 800d45e:	429a      	cmp	r2, r3
 800d460:	d004      	beq.n	800d46c <__swbuf_r+0x6e>
 800d462:	89a3      	ldrh	r3, [r4, #12]
 800d464:	07db      	lsls	r3, r3, #31
 800d466:	d5e1      	bpl.n	800d42c <__swbuf_r+0x2e>
 800d468:	2e0a      	cmp	r6, #10
 800d46a:	d1df      	bne.n	800d42c <__swbuf_r+0x2e>
 800d46c:	4621      	mov	r1, r4
 800d46e:	4628      	mov	r0, r5
 800d470:	f000 fd2e 	bl	800ded0 <_fflush_r>
 800d474:	2800      	cmp	r0, #0
 800d476:	d0d9      	beq.n	800d42c <__swbuf_r+0x2e>
 800d478:	e7d6      	b.n	800d428 <__swbuf_r+0x2a>
	...

0800d47c <__swsetup_r>:
 800d47c:	b538      	push	{r3, r4, r5, lr}
 800d47e:	4b29      	ldr	r3, [pc, #164]	@ (800d524 <__swsetup_r+0xa8>)
 800d480:	4605      	mov	r5, r0
 800d482:	6818      	ldr	r0, [r3, #0]
 800d484:	460c      	mov	r4, r1
 800d486:	b118      	cbz	r0, 800d490 <__swsetup_r+0x14>
 800d488:	6a03      	ldr	r3, [r0, #32]
 800d48a:	b90b      	cbnz	r3, 800d490 <__swsetup_r+0x14>
 800d48c:	f7ff fec6 	bl	800d21c <__sinit>
 800d490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d494:	0719      	lsls	r1, r3, #28
 800d496:	d422      	bmi.n	800d4de <__swsetup_r+0x62>
 800d498:	06da      	lsls	r2, r3, #27
 800d49a:	d407      	bmi.n	800d4ac <__swsetup_r+0x30>
 800d49c:	2209      	movs	r2, #9
 800d49e:	602a      	str	r2, [r5, #0]
 800d4a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4a4:	81a3      	strh	r3, [r4, #12]
 800d4a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d4aa:	e033      	b.n	800d514 <__swsetup_r+0x98>
 800d4ac:	0758      	lsls	r0, r3, #29
 800d4ae:	d512      	bpl.n	800d4d6 <__swsetup_r+0x5a>
 800d4b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d4b2:	b141      	cbz	r1, 800d4c6 <__swsetup_r+0x4a>
 800d4b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d4b8:	4299      	cmp	r1, r3
 800d4ba:	d002      	beq.n	800d4c2 <__swsetup_r+0x46>
 800d4bc:	4628      	mov	r0, r5
 800d4be:	f000 f8bd 	bl	800d63c <_free_r>
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d4c6:	89a3      	ldrh	r3, [r4, #12]
 800d4c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d4cc:	81a3      	strh	r3, [r4, #12]
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	6063      	str	r3, [r4, #4]
 800d4d2:	6923      	ldr	r3, [r4, #16]
 800d4d4:	6023      	str	r3, [r4, #0]
 800d4d6:	89a3      	ldrh	r3, [r4, #12]
 800d4d8:	f043 0308 	orr.w	r3, r3, #8
 800d4dc:	81a3      	strh	r3, [r4, #12]
 800d4de:	6923      	ldr	r3, [r4, #16]
 800d4e0:	b94b      	cbnz	r3, 800d4f6 <__swsetup_r+0x7a>
 800d4e2:	89a3      	ldrh	r3, [r4, #12]
 800d4e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d4e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4ec:	d003      	beq.n	800d4f6 <__swsetup_r+0x7a>
 800d4ee:	4621      	mov	r1, r4
 800d4f0:	4628      	mov	r0, r5
 800d4f2:	f000 fd3b 	bl	800df6c <__smakebuf_r>
 800d4f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4fa:	f013 0201 	ands.w	r2, r3, #1
 800d4fe:	d00a      	beq.n	800d516 <__swsetup_r+0x9a>
 800d500:	2200      	movs	r2, #0
 800d502:	60a2      	str	r2, [r4, #8]
 800d504:	6962      	ldr	r2, [r4, #20]
 800d506:	4252      	negs	r2, r2
 800d508:	61a2      	str	r2, [r4, #24]
 800d50a:	6922      	ldr	r2, [r4, #16]
 800d50c:	b942      	cbnz	r2, 800d520 <__swsetup_r+0xa4>
 800d50e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d512:	d1c5      	bne.n	800d4a0 <__swsetup_r+0x24>
 800d514:	bd38      	pop	{r3, r4, r5, pc}
 800d516:	0799      	lsls	r1, r3, #30
 800d518:	bf58      	it	pl
 800d51a:	6962      	ldrpl	r2, [r4, #20]
 800d51c:	60a2      	str	r2, [r4, #8]
 800d51e:	e7f4      	b.n	800d50a <__swsetup_r+0x8e>
 800d520:	2000      	movs	r0, #0
 800d522:	e7f7      	b.n	800d514 <__swsetup_r+0x98>
 800d524:	20000440 	.word	0x20000440

0800d528 <memset>:
 800d528:	4402      	add	r2, r0
 800d52a:	4603      	mov	r3, r0
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d100      	bne.n	800d532 <memset+0xa>
 800d530:	4770      	bx	lr
 800d532:	f803 1b01 	strb.w	r1, [r3], #1
 800d536:	e7f9      	b.n	800d52c <memset+0x4>

0800d538 <_close_r>:
 800d538:	b538      	push	{r3, r4, r5, lr}
 800d53a:	4d06      	ldr	r5, [pc, #24]	@ (800d554 <_close_r+0x1c>)
 800d53c:	2300      	movs	r3, #0
 800d53e:	4604      	mov	r4, r0
 800d540:	4608      	mov	r0, r1
 800d542:	602b      	str	r3, [r5, #0]
 800d544:	f7f5 fb4f 	bl	8002be6 <_close>
 800d548:	1c43      	adds	r3, r0, #1
 800d54a:	d102      	bne.n	800d552 <_close_r+0x1a>
 800d54c:	682b      	ldr	r3, [r5, #0]
 800d54e:	b103      	cbz	r3, 800d552 <_close_r+0x1a>
 800d550:	6023      	str	r3, [r4, #0]
 800d552:	bd38      	pop	{r3, r4, r5, pc}
 800d554:	20001a60 	.word	0x20001a60

0800d558 <_lseek_r>:
 800d558:	b538      	push	{r3, r4, r5, lr}
 800d55a:	4d07      	ldr	r5, [pc, #28]	@ (800d578 <_lseek_r+0x20>)
 800d55c:	4604      	mov	r4, r0
 800d55e:	4608      	mov	r0, r1
 800d560:	4611      	mov	r1, r2
 800d562:	2200      	movs	r2, #0
 800d564:	602a      	str	r2, [r5, #0]
 800d566:	461a      	mov	r2, r3
 800d568:	f7f5 fb64 	bl	8002c34 <_lseek>
 800d56c:	1c43      	adds	r3, r0, #1
 800d56e:	d102      	bne.n	800d576 <_lseek_r+0x1e>
 800d570:	682b      	ldr	r3, [r5, #0]
 800d572:	b103      	cbz	r3, 800d576 <_lseek_r+0x1e>
 800d574:	6023      	str	r3, [r4, #0]
 800d576:	bd38      	pop	{r3, r4, r5, pc}
 800d578:	20001a60 	.word	0x20001a60

0800d57c <_read_r>:
 800d57c:	b538      	push	{r3, r4, r5, lr}
 800d57e:	4d07      	ldr	r5, [pc, #28]	@ (800d59c <_read_r+0x20>)
 800d580:	4604      	mov	r4, r0
 800d582:	4608      	mov	r0, r1
 800d584:	4611      	mov	r1, r2
 800d586:	2200      	movs	r2, #0
 800d588:	602a      	str	r2, [r5, #0]
 800d58a:	461a      	mov	r2, r3
 800d58c:	f7f5 fb0e 	bl	8002bac <_read>
 800d590:	1c43      	adds	r3, r0, #1
 800d592:	d102      	bne.n	800d59a <_read_r+0x1e>
 800d594:	682b      	ldr	r3, [r5, #0]
 800d596:	b103      	cbz	r3, 800d59a <_read_r+0x1e>
 800d598:	6023      	str	r3, [r4, #0]
 800d59a:	bd38      	pop	{r3, r4, r5, pc}
 800d59c:	20001a60 	.word	0x20001a60

0800d5a0 <_write_r>:
 800d5a0:	b538      	push	{r3, r4, r5, lr}
 800d5a2:	4d07      	ldr	r5, [pc, #28]	@ (800d5c0 <_write_r+0x20>)
 800d5a4:	4604      	mov	r4, r0
 800d5a6:	4608      	mov	r0, r1
 800d5a8:	4611      	mov	r1, r2
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	602a      	str	r2, [r5, #0]
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	f7fd fbe8 	bl	800ad84 <_write>
 800d5b4:	1c43      	adds	r3, r0, #1
 800d5b6:	d102      	bne.n	800d5be <_write_r+0x1e>
 800d5b8:	682b      	ldr	r3, [r5, #0]
 800d5ba:	b103      	cbz	r3, 800d5be <_write_r+0x1e>
 800d5bc:	6023      	str	r3, [r4, #0]
 800d5be:	bd38      	pop	{r3, r4, r5, pc}
 800d5c0:	20001a60 	.word	0x20001a60

0800d5c4 <__errno>:
 800d5c4:	4b01      	ldr	r3, [pc, #4]	@ (800d5cc <__errno+0x8>)
 800d5c6:	6818      	ldr	r0, [r3, #0]
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop
 800d5cc:	20000440 	.word	0x20000440

0800d5d0 <__libc_init_array>:
 800d5d0:	b570      	push	{r4, r5, r6, lr}
 800d5d2:	4d0d      	ldr	r5, [pc, #52]	@ (800d608 <__libc_init_array+0x38>)
 800d5d4:	4c0d      	ldr	r4, [pc, #52]	@ (800d60c <__libc_init_array+0x3c>)
 800d5d6:	1b64      	subs	r4, r4, r5
 800d5d8:	10a4      	asrs	r4, r4, #2
 800d5da:	2600      	movs	r6, #0
 800d5dc:	42a6      	cmp	r6, r4
 800d5de:	d109      	bne.n	800d5f4 <__libc_init_array+0x24>
 800d5e0:	4d0b      	ldr	r5, [pc, #44]	@ (800d610 <__libc_init_array+0x40>)
 800d5e2:	4c0c      	ldr	r4, [pc, #48]	@ (800d614 <__libc_init_array+0x44>)
 800d5e4:	f000 fd64 	bl	800e0b0 <_init>
 800d5e8:	1b64      	subs	r4, r4, r5
 800d5ea:	10a4      	asrs	r4, r4, #2
 800d5ec:	2600      	movs	r6, #0
 800d5ee:	42a6      	cmp	r6, r4
 800d5f0:	d105      	bne.n	800d5fe <__libc_init_array+0x2e>
 800d5f2:	bd70      	pop	{r4, r5, r6, pc}
 800d5f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5f8:	4798      	blx	r3
 800d5fa:	3601      	adds	r6, #1
 800d5fc:	e7ee      	b.n	800d5dc <__libc_init_array+0xc>
 800d5fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800d602:	4798      	blx	r3
 800d604:	3601      	adds	r6, #1
 800d606:	e7f2      	b.n	800d5ee <__libc_init_array+0x1e>
 800d608:	0800fe74 	.word	0x0800fe74
 800d60c:	0800fe74 	.word	0x0800fe74
 800d610:	0800fe74 	.word	0x0800fe74
 800d614:	0800fe78 	.word	0x0800fe78

0800d618 <__retarget_lock_init_recursive>:
 800d618:	4770      	bx	lr

0800d61a <__retarget_lock_acquire_recursive>:
 800d61a:	4770      	bx	lr

0800d61c <__retarget_lock_release_recursive>:
 800d61c:	4770      	bx	lr

0800d61e <memcpy>:
 800d61e:	440a      	add	r2, r1
 800d620:	4291      	cmp	r1, r2
 800d622:	f100 33ff 	add.w	r3, r0, #4294967295
 800d626:	d100      	bne.n	800d62a <memcpy+0xc>
 800d628:	4770      	bx	lr
 800d62a:	b510      	push	{r4, lr}
 800d62c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d630:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d634:	4291      	cmp	r1, r2
 800d636:	d1f9      	bne.n	800d62c <memcpy+0xe>
 800d638:	bd10      	pop	{r4, pc}
	...

0800d63c <_free_r>:
 800d63c:	b538      	push	{r3, r4, r5, lr}
 800d63e:	4605      	mov	r5, r0
 800d640:	2900      	cmp	r1, #0
 800d642:	d041      	beq.n	800d6c8 <_free_r+0x8c>
 800d644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d648:	1f0c      	subs	r4, r1, #4
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	bfb8      	it	lt
 800d64e:	18e4      	addlt	r4, r4, r3
 800d650:	f000 f8e0 	bl	800d814 <__malloc_lock>
 800d654:	4a1d      	ldr	r2, [pc, #116]	@ (800d6cc <_free_r+0x90>)
 800d656:	6813      	ldr	r3, [r2, #0]
 800d658:	b933      	cbnz	r3, 800d668 <_free_r+0x2c>
 800d65a:	6063      	str	r3, [r4, #4]
 800d65c:	6014      	str	r4, [r2, #0]
 800d65e:	4628      	mov	r0, r5
 800d660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d664:	f000 b8dc 	b.w	800d820 <__malloc_unlock>
 800d668:	42a3      	cmp	r3, r4
 800d66a:	d908      	bls.n	800d67e <_free_r+0x42>
 800d66c:	6820      	ldr	r0, [r4, #0]
 800d66e:	1821      	adds	r1, r4, r0
 800d670:	428b      	cmp	r3, r1
 800d672:	bf01      	itttt	eq
 800d674:	6819      	ldreq	r1, [r3, #0]
 800d676:	685b      	ldreq	r3, [r3, #4]
 800d678:	1809      	addeq	r1, r1, r0
 800d67a:	6021      	streq	r1, [r4, #0]
 800d67c:	e7ed      	b.n	800d65a <_free_r+0x1e>
 800d67e:	461a      	mov	r2, r3
 800d680:	685b      	ldr	r3, [r3, #4]
 800d682:	b10b      	cbz	r3, 800d688 <_free_r+0x4c>
 800d684:	42a3      	cmp	r3, r4
 800d686:	d9fa      	bls.n	800d67e <_free_r+0x42>
 800d688:	6811      	ldr	r1, [r2, #0]
 800d68a:	1850      	adds	r0, r2, r1
 800d68c:	42a0      	cmp	r0, r4
 800d68e:	d10b      	bne.n	800d6a8 <_free_r+0x6c>
 800d690:	6820      	ldr	r0, [r4, #0]
 800d692:	4401      	add	r1, r0
 800d694:	1850      	adds	r0, r2, r1
 800d696:	4283      	cmp	r3, r0
 800d698:	6011      	str	r1, [r2, #0]
 800d69a:	d1e0      	bne.n	800d65e <_free_r+0x22>
 800d69c:	6818      	ldr	r0, [r3, #0]
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	6053      	str	r3, [r2, #4]
 800d6a2:	4408      	add	r0, r1
 800d6a4:	6010      	str	r0, [r2, #0]
 800d6a6:	e7da      	b.n	800d65e <_free_r+0x22>
 800d6a8:	d902      	bls.n	800d6b0 <_free_r+0x74>
 800d6aa:	230c      	movs	r3, #12
 800d6ac:	602b      	str	r3, [r5, #0]
 800d6ae:	e7d6      	b.n	800d65e <_free_r+0x22>
 800d6b0:	6820      	ldr	r0, [r4, #0]
 800d6b2:	1821      	adds	r1, r4, r0
 800d6b4:	428b      	cmp	r3, r1
 800d6b6:	bf04      	itt	eq
 800d6b8:	6819      	ldreq	r1, [r3, #0]
 800d6ba:	685b      	ldreq	r3, [r3, #4]
 800d6bc:	6063      	str	r3, [r4, #4]
 800d6be:	bf04      	itt	eq
 800d6c0:	1809      	addeq	r1, r1, r0
 800d6c2:	6021      	streq	r1, [r4, #0]
 800d6c4:	6054      	str	r4, [r2, #4]
 800d6c6:	e7ca      	b.n	800d65e <_free_r+0x22>
 800d6c8:	bd38      	pop	{r3, r4, r5, pc}
 800d6ca:	bf00      	nop
 800d6cc:	20001a6c 	.word	0x20001a6c

0800d6d0 <sbrk_aligned>:
 800d6d0:	b570      	push	{r4, r5, r6, lr}
 800d6d2:	4e0f      	ldr	r6, [pc, #60]	@ (800d710 <sbrk_aligned+0x40>)
 800d6d4:	460c      	mov	r4, r1
 800d6d6:	6831      	ldr	r1, [r6, #0]
 800d6d8:	4605      	mov	r5, r0
 800d6da:	b911      	cbnz	r1, 800d6e2 <sbrk_aligned+0x12>
 800d6dc:	f000 fcd8 	bl	800e090 <_sbrk_r>
 800d6e0:	6030      	str	r0, [r6, #0]
 800d6e2:	4621      	mov	r1, r4
 800d6e4:	4628      	mov	r0, r5
 800d6e6:	f000 fcd3 	bl	800e090 <_sbrk_r>
 800d6ea:	1c43      	adds	r3, r0, #1
 800d6ec:	d103      	bne.n	800d6f6 <sbrk_aligned+0x26>
 800d6ee:	f04f 34ff 	mov.w	r4, #4294967295
 800d6f2:	4620      	mov	r0, r4
 800d6f4:	bd70      	pop	{r4, r5, r6, pc}
 800d6f6:	1cc4      	adds	r4, r0, #3
 800d6f8:	f024 0403 	bic.w	r4, r4, #3
 800d6fc:	42a0      	cmp	r0, r4
 800d6fe:	d0f8      	beq.n	800d6f2 <sbrk_aligned+0x22>
 800d700:	1a21      	subs	r1, r4, r0
 800d702:	4628      	mov	r0, r5
 800d704:	f000 fcc4 	bl	800e090 <_sbrk_r>
 800d708:	3001      	adds	r0, #1
 800d70a:	d1f2      	bne.n	800d6f2 <sbrk_aligned+0x22>
 800d70c:	e7ef      	b.n	800d6ee <sbrk_aligned+0x1e>
 800d70e:	bf00      	nop
 800d710:	20001a68 	.word	0x20001a68

0800d714 <_malloc_r>:
 800d714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d718:	1ccd      	adds	r5, r1, #3
 800d71a:	f025 0503 	bic.w	r5, r5, #3
 800d71e:	3508      	adds	r5, #8
 800d720:	2d0c      	cmp	r5, #12
 800d722:	bf38      	it	cc
 800d724:	250c      	movcc	r5, #12
 800d726:	2d00      	cmp	r5, #0
 800d728:	4606      	mov	r6, r0
 800d72a:	db01      	blt.n	800d730 <_malloc_r+0x1c>
 800d72c:	42a9      	cmp	r1, r5
 800d72e:	d904      	bls.n	800d73a <_malloc_r+0x26>
 800d730:	230c      	movs	r3, #12
 800d732:	6033      	str	r3, [r6, #0]
 800d734:	2000      	movs	r0, #0
 800d736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d73a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d810 <_malloc_r+0xfc>
 800d73e:	f000 f869 	bl	800d814 <__malloc_lock>
 800d742:	f8d8 3000 	ldr.w	r3, [r8]
 800d746:	461c      	mov	r4, r3
 800d748:	bb44      	cbnz	r4, 800d79c <_malloc_r+0x88>
 800d74a:	4629      	mov	r1, r5
 800d74c:	4630      	mov	r0, r6
 800d74e:	f7ff ffbf 	bl	800d6d0 <sbrk_aligned>
 800d752:	1c43      	adds	r3, r0, #1
 800d754:	4604      	mov	r4, r0
 800d756:	d158      	bne.n	800d80a <_malloc_r+0xf6>
 800d758:	f8d8 4000 	ldr.w	r4, [r8]
 800d75c:	4627      	mov	r7, r4
 800d75e:	2f00      	cmp	r7, #0
 800d760:	d143      	bne.n	800d7ea <_malloc_r+0xd6>
 800d762:	2c00      	cmp	r4, #0
 800d764:	d04b      	beq.n	800d7fe <_malloc_r+0xea>
 800d766:	6823      	ldr	r3, [r4, #0]
 800d768:	4639      	mov	r1, r7
 800d76a:	4630      	mov	r0, r6
 800d76c:	eb04 0903 	add.w	r9, r4, r3
 800d770:	f000 fc8e 	bl	800e090 <_sbrk_r>
 800d774:	4581      	cmp	r9, r0
 800d776:	d142      	bne.n	800d7fe <_malloc_r+0xea>
 800d778:	6821      	ldr	r1, [r4, #0]
 800d77a:	1a6d      	subs	r5, r5, r1
 800d77c:	4629      	mov	r1, r5
 800d77e:	4630      	mov	r0, r6
 800d780:	f7ff ffa6 	bl	800d6d0 <sbrk_aligned>
 800d784:	3001      	adds	r0, #1
 800d786:	d03a      	beq.n	800d7fe <_malloc_r+0xea>
 800d788:	6823      	ldr	r3, [r4, #0]
 800d78a:	442b      	add	r3, r5
 800d78c:	6023      	str	r3, [r4, #0]
 800d78e:	f8d8 3000 	ldr.w	r3, [r8]
 800d792:	685a      	ldr	r2, [r3, #4]
 800d794:	bb62      	cbnz	r2, 800d7f0 <_malloc_r+0xdc>
 800d796:	f8c8 7000 	str.w	r7, [r8]
 800d79a:	e00f      	b.n	800d7bc <_malloc_r+0xa8>
 800d79c:	6822      	ldr	r2, [r4, #0]
 800d79e:	1b52      	subs	r2, r2, r5
 800d7a0:	d420      	bmi.n	800d7e4 <_malloc_r+0xd0>
 800d7a2:	2a0b      	cmp	r2, #11
 800d7a4:	d917      	bls.n	800d7d6 <_malloc_r+0xc2>
 800d7a6:	1961      	adds	r1, r4, r5
 800d7a8:	42a3      	cmp	r3, r4
 800d7aa:	6025      	str	r5, [r4, #0]
 800d7ac:	bf18      	it	ne
 800d7ae:	6059      	strne	r1, [r3, #4]
 800d7b0:	6863      	ldr	r3, [r4, #4]
 800d7b2:	bf08      	it	eq
 800d7b4:	f8c8 1000 	streq.w	r1, [r8]
 800d7b8:	5162      	str	r2, [r4, r5]
 800d7ba:	604b      	str	r3, [r1, #4]
 800d7bc:	4630      	mov	r0, r6
 800d7be:	f000 f82f 	bl	800d820 <__malloc_unlock>
 800d7c2:	f104 000b 	add.w	r0, r4, #11
 800d7c6:	1d23      	adds	r3, r4, #4
 800d7c8:	f020 0007 	bic.w	r0, r0, #7
 800d7cc:	1ac2      	subs	r2, r0, r3
 800d7ce:	bf1c      	itt	ne
 800d7d0:	1a1b      	subne	r3, r3, r0
 800d7d2:	50a3      	strne	r3, [r4, r2]
 800d7d4:	e7af      	b.n	800d736 <_malloc_r+0x22>
 800d7d6:	6862      	ldr	r2, [r4, #4]
 800d7d8:	42a3      	cmp	r3, r4
 800d7da:	bf0c      	ite	eq
 800d7dc:	f8c8 2000 	streq.w	r2, [r8]
 800d7e0:	605a      	strne	r2, [r3, #4]
 800d7e2:	e7eb      	b.n	800d7bc <_malloc_r+0xa8>
 800d7e4:	4623      	mov	r3, r4
 800d7e6:	6864      	ldr	r4, [r4, #4]
 800d7e8:	e7ae      	b.n	800d748 <_malloc_r+0x34>
 800d7ea:	463c      	mov	r4, r7
 800d7ec:	687f      	ldr	r7, [r7, #4]
 800d7ee:	e7b6      	b.n	800d75e <_malloc_r+0x4a>
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	42a3      	cmp	r3, r4
 800d7f6:	d1fb      	bne.n	800d7f0 <_malloc_r+0xdc>
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	6053      	str	r3, [r2, #4]
 800d7fc:	e7de      	b.n	800d7bc <_malloc_r+0xa8>
 800d7fe:	230c      	movs	r3, #12
 800d800:	6033      	str	r3, [r6, #0]
 800d802:	4630      	mov	r0, r6
 800d804:	f000 f80c 	bl	800d820 <__malloc_unlock>
 800d808:	e794      	b.n	800d734 <_malloc_r+0x20>
 800d80a:	6005      	str	r5, [r0, #0]
 800d80c:	e7d6      	b.n	800d7bc <_malloc_r+0xa8>
 800d80e:	bf00      	nop
 800d810:	20001a6c 	.word	0x20001a6c

0800d814 <__malloc_lock>:
 800d814:	4801      	ldr	r0, [pc, #4]	@ (800d81c <__malloc_lock+0x8>)
 800d816:	f7ff bf00 	b.w	800d61a <__retarget_lock_acquire_recursive>
 800d81a:	bf00      	nop
 800d81c:	20001a64 	.word	0x20001a64

0800d820 <__malloc_unlock>:
 800d820:	4801      	ldr	r0, [pc, #4]	@ (800d828 <__malloc_unlock+0x8>)
 800d822:	f7ff befb 	b.w	800d61c <__retarget_lock_release_recursive>
 800d826:	bf00      	nop
 800d828:	20001a64 	.word	0x20001a64

0800d82c <__sfputc_r>:
 800d82c:	6893      	ldr	r3, [r2, #8]
 800d82e:	3b01      	subs	r3, #1
 800d830:	2b00      	cmp	r3, #0
 800d832:	b410      	push	{r4}
 800d834:	6093      	str	r3, [r2, #8]
 800d836:	da08      	bge.n	800d84a <__sfputc_r+0x1e>
 800d838:	6994      	ldr	r4, [r2, #24]
 800d83a:	42a3      	cmp	r3, r4
 800d83c:	db01      	blt.n	800d842 <__sfputc_r+0x16>
 800d83e:	290a      	cmp	r1, #10
 800d840:	d103      	bne.n	800d84a <__sfputc_r+0x1e>
 800d842:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d846:	f7ff bdda 	b.w	800d3fe <__swbuf_r>
 800d84a:	6813      	ldr	r3, [r2, #0]
 800d84c:	1c58      	adds	r0, r3, #1
 800d84e:	6010      	str	r0, [r2, #0]
 800d850:	7019      	strb	r1, [r3, #0]
 800d852:	4608      	mov	r0, r1
 800d854:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d858:	4770      	bx	lr

0800d85a <__sfputs_r>:
 800d85a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d85c:	4606      	mov	r6, r0
 800d85e:	460f      	mov	r7, r1
 800d860:	4614      	mov	r4, r2
 800d862:	18d5      	adds	r5, r2, r3
 800d864:	42ac      	cmp	r4, r5
 800d866:	d101      	bne.n	800d86c <__sfputs_r+0x12>
 800d868:	2000      	movs	r0, #0
 800d86a:	e007      	b.n	800d87c <__sfputs_r+0x22>
 800d86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d870:	463a      	mov	r2, r7
 800d872:	4630      	mov	r0, r6
 800d874:	f7ff ffda 	bl	800d82c <__sfputc_r>
 800d878:	1c43      	adds	r3, r0, #1
 800d87a:	d1f3      	bne.n	800d864 <__sfputs_r+0xa>
 800d87c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d880 <_vfiprintf_r>:
 800d880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d884:	460d      	mov	r5, r1
 800d886:	b09d      	sub	sp, #116	@ 0x74
 800d888:	4614      	mov	r4, r2
 800d88a:	4698      	mov	r8, r3
 800d88c:	4606      	mov	r6, r0
 800d88e:	b118      	cbz	r0, 800d898 <_vfiprintf_r+0x18>
 800d890:	6a03      	ldr	r3, [r0, #32]
 800d892:	b90b      	cbnz	r3, 800d898 <_vfiprintf_r+0x18>
 800d894:	f7ff fcc2 	bl	800d21c <__sinit>
 800d898:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d89a:	07d9      	lsls	r1, r3, #31
 800d89c:	d405      	bmi.n	800d8aa <_vfiprintf_r+0x2a>
 800d89e:	89ab      	ldrh	r3, [r5, #12]
 800d8a0:	059a      	lsls	r2, r3, #22
 800d8a2:	d402      	bmi.n	800d8aa <_vfiprintf_r+0x2a>
 800d8a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8a6:	f7ff feb8 	bl	800d61a <__retarget_lock_acquire_recursive>
 800d8aa:	89ab      	ldrh	r3, [r5, #12]
 800d8ac:	071b      	lsls	r3, r3, #28
 800d8ae:	d501      	bpl.n	800d8b4 <_vfiprintf_r+0x34>
 800d8b0:	692b      	ldr	r3, [r5, #16]
 800d8b2:	b99b      	cbnz	r3, 800d8dc <_vfiprintf_r+0x5c>
 800d8b4:	4629      	mov	r1, r5
 800d8b6:	4630      	mov	r0, r6
 800d8b8:	f7ff fde0 	bl	800d47c <__swsetup_r>
 800d8bc:	b170      	cbz	r0, 800d8dc <_vfiprintf_r+0x5c>
 800d8be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d8c0:	07dc      	lsls	r4, r3, #31
 800d8c2:	d504      	bpl.n	800d8ce <_vfiprintf_r+0x4e>
 800d8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8c8:	b01d      	add	sp, #116	@ 0x74
 800d8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ce:	89ab      	ldrh	r3, [r5, #12]
 800d8d0:	0598      	lsls	r0, r3, #22
 800d8d2:	d4f7      	bmi.n	800d8c4 <_vfiprintf_r+0x44>
 800d8d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8d6:	f7ff fea1 	bl	800d61c <__retarget_lock_release_recursive>
 800d8da:	e7f3      	b.n	800d8c4 <_vfiprintf_r+0x44>
 800d8dc:	2300      	movs	r3, #0
 800d8de:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8e0:	2320      	movs	r3, #32
 800d8e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d8e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8ea:	2330      	movs	r3, #48	@ 0x30
 800d8ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800da9c <_vfiprintf_r+0x21c>
 800d8f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d8f4:	f04f 0901 	mov.w	r9, #1
 800d8f8:	4623      	mov	r3, r4
 800d8fa:	469a      	mov	sl, r3
 800d8fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d900:	b10a      	cbz	r2, 800d906 <_vfiprintf_r+0x86>
 800d902:	2a25      	cmp	r2, #37	@ 0x25
 800d904:	d1f9      	bne.n	800d8fa <_vfiprintf_r+0x7a>
 800d906:	ebba 0b04 	subs.w	fp, sl, r4
 800d90a:	d00b      	beq.n	800d924 <_vfiprintf_r+0xa4>
 800d90c:	465b      	mov	r3, fp
 800d90e:	4622      	mov	r2, r4
 800d910:	4629      	mov	r1, r5
 800d912:	4630      	mov	r0, r6
 800d914:	f7ff ffa1 	bl	800d85a <__sfputs_r>
 800d918:	3001      	adds	r0, #1
 800d91a:	f000 80a7 	beq.w	800da6c <_vfiprintf_r+0x1ec>
 800d91e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d920:	445a      	add	r2, fp
 800d922:	9209      	str	r2, [sp, #36]	@ 0x24
 800d924:	f89a 3000 	ldrb.w	r3, [sl]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	f000 809f 	beq.w	800da6c <_vfiprintf_r+0x1ec>
 800d92e:	2300      	movs	r3, #0
 800d930:	f04f 32ff 	mov.w	r2, #4294967295
 800d934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d938:	f10a 0a01 	add.w	sl, sl, #1
 800d93c:	9304      	str	r3, [sp, #16]
 800d93e:	9307      	str	r3, [sp, #28]
 800d940:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d944:	931a      	str	r3, [sp, #104]	@ 0x68
 800d946:	4654      	mov	r4, sl
 800d948:	2205      	movs	r2, #5
 800d94a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d94e:	4853      	ldr	r0, [pc, #332]	@ (800da9c <_vfiprintf_r+0x21c>)
 800d950:	f7f2 fc1e 	bl	8000190 <memchr>
 800d954:	9a04      	ldr	r2, [sp, #16]
 800d956:	b9d8      	cbnz	r0, 800d990 <_vfiprintf_r+0x110>
 800d958:	06d1      	lsls	r1, r2, #27
 800d95a:	bf44      	itt	mi
 800d95c:	2320      	movmi	r3, #32
 800d95e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d962:	0713      	lsls	r3, r2, #28
 800d964:	bf44      	itt	mi
 800d966:	232b      	movmi	r3, #43	@ 0x2b
 800d968:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d96c:	f89a 3000 	ldrb.w	r3, [sl]
 800d970:	2b2a      	cmp	r3, #42	@ 0x2a
 800d972:	d015      	beq.n	800d9a0 <_vfiprintf_r+0x120>
 800d974:	9a07      	ldr	r2, [sp, #28]
 800d976:	4654      	mov	r4, sl
 800d978:	2000      	movs	r0, #0
 800d97a:	f04f 0c0a 	mov.w	ip, #10
 800d97e:	4621      	mov	r1, r4
 800d980:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d984:	3b30      	subs	r3, #48	@ 0x30
 800d986:	2b09      	cmp	r3, #9
 800d988:	d94b      	bls.n	800da22 <_vfiprintf_r+0x1a2>
 800d98a:	b1b0      	cbz	r0, 800d9ba <_vfiprintf_r+0x13a>
 800d98c:	9207      	str	r2, [sp, #28]
 800d98e:	e014      	b.n	800d9ba <_vfiprintf_r+0x13a>
 800d990:	eba0 0308 	sub.w	r3, r0, r8
 800d994:	fa09 f303 	lsl.w	r3, r9, r3
 800d998:	4313      	orrs	r3, r2
 800d99a:	9304      	str	r3, [sp, #16]
 800d99c:	46a2      	mov	sl, r4
 800d99e:	e7d2      	b.n	800d946 <_vfiprintf_r+0xc6>
 800d9a0:	9b03      	ldr	r3, [sp, #12]
 800d9a2:	1d19      	adds	r1, r3, #4
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	9103      	str	r1, [sp, #12]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	bfbb      	ittet	lt
 800d9ac:	425b      	neglt	r3, r3
 800d9ae:	f042 0202 	orrlt.w	r2, r2, #2
 800d9b2:	9307      	strge	r3, [sp, #28]
 800d9b4:	9307      	strlt	r3, [sp, #28]
 800d9b6:	bfb8      	it	lt
 800d9b8:	9204      	strlt	r2, [sp, #16]
 800d9ba:	7823      	ldrb	r3, [r4, #0]
 800d9bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800d9be:	d10a      	bne.n	800d9d6 <_vfiprintf_r+0x156>
 800d9c0:	7863      	ldrb	r3, [r4, #1]
 800d9c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9c4:	d132      	bne.n	800da2c <_vfiprintf_r+0x1ac>
 800d9c6:	9b03      	ldr	r3, [sp, #12]
 800d9c8:	1d1a      	adds	r2, r3, #4
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	9203      	str	r2, [sp, #12]
 800d9ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d9d2:	3402      	adds	r4, #2
 800d9d4:	9305      	str	r3, [sp, #20]
 800d9d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800daac <_vfiprintf_r+0x22c>
 800d9da:	7821      	ldrb	r1, [r4, #0]
 800d9dc:	2203      	movs	r2, #3
 800d9de:	4650      	mov	r0, sl
 800d9e0:	f7f2 fbd6 	bl	8000190 <memchr>
 800d9e4:	b138      	cbz	r0, 800d9f6 <_vfiprintf_r+0x176>
 800d9e6:	9b04      	ldr	r3, [sp, #16]
 800d9e8:	eba0 000a 	sub.w	r0, r0, sl
 800d9ec:	2240      	movs	r2, #64	@ 0x40
 800d9ee:	4082      	lsls	r2, r0
 800d9f0:	4313      	orrs	r3, r2
 800d9f2:	3401      	adds	r4, #1
 800d9f4:	9304      	str	r3, [sp, #16]
 800d9f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9fa:	4829      	ldr	r0, [pc, #164]	@ (800daa0 <_vfiprintf_r+0x220>)
 800d9fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800da00:	2206      	movs	r2, #6
 800da02:	f7f2 fbc5 	bl	8000190 <memchr>
 800da06:	2800      	cmp	r0, #0
 800da08:	d03f      	beq.n	800da8a <_vfiprintf_r+0x20a>
 800da0a:	4b26      	ldr	r3, [pc, #152]	@ (800daa4 <_vfiprintf_r+0x224>)
 800da0c:	bb1b      	cbnz	r3, 800da56 <_vfiprintf_r+0x1d6>
 800da0e:	9b03      	ldr	r3, [sp, #12]
 800da10:	3307      	adds	r3, #7
 800da12:	f023 0307 	bic.w	r3, r3, #7
 800da16:	3308      	adds	r3, #8
 800da18:	9303      	str	r3, [sp, #12]
 800da1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da1c:	443b      	add	r3, r7
 800da1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800da20:	e76a      	b.n	800d8f8 <_vfiprintf_r+0x78>
 800da22:	fb0c 3202 	mla	r2, ip, r2, r3
 800da26:	460c      	mov	r4, r1
 800da28:	2001      	movs	r0, #1
 800da2a:	e7a8      	b.n	800d97e <_vfiprintf_r+0xfe>
 800da2c:	2300      	movs	r3, #0
 800da2e:	3401      	adds	r4, #1
 800da30:	9305      	str	r3, [sp, #20]
 800da32:	4619      	mov	r1, r3
 800da34:	f04f 0c0a 	mov.w	ip, #10
 800da38:	4620      	mov	r0, r4
 800da3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da3e:	3a30      	subs	r2, #48	@ 0x30
 800da40:	2a09      	cmp	r2, #9
 800da42:	d903      	bls.n	800da4c <_vfiprintf_r+0x1cc>
 800da44:	2b00      	cmp	r3, #0
 800da46:	d0c6      	beq.n	800d9d6 <_vfiprintf_r+0x156>
 800da48:	9105      	str	r1, [sp, #20]
 800da4a:	e7c4      	b.n	800d9d6 <_vfiprintf_r+0x156>
 800da4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800da50:	4604      	mov	r4, r0
 800da52:	2301      	movs	r3, #1
 800da54:	e7f0      	b.n	800da38 <_vfiprintf_r+0x1b8>
 800da56:	ab03      	add	r3, sp, #12
 800da58:	9300      	str	r3, [sp, #0]
 800da5a:	462a      	mov	r2, r5
 800da5c:	4b12      	ldr	r3, [pc, #72]	@ (800daa8 <_vfiprintf_r+0x228>)
 800da5e:	a904      	add	r1, sp, #16
 800da60:	4630      	mov	r0, r6
 800da62:	f3af 8000 	nop.w
 800da66:	4607      	mov	r7, r0
 800da68:	1c78      	adds	r0, r7, #1
 800da6a:	d1d6      	bne.n	800da1a <_vfiprintf_r+0x19a>
 800da6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da6e:	07d9      	lsls	r1, r3, #31
 800da70:	d405      	bmi.n	800da7e <_vfiprintf_r+0x1fe>
 800da72:	89ab      	ldrh	r3, [r5, #12]
 800da74:	059a      	lsls	r2, r3, #22
 800da76:	d402      	bmi.n	800da7e <_vfiprintf_r+0x1fe>
 800da78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da7a:	f7ff fdcf 	bl	800d61c <__retarget_lock_release_recursive>
 800da7e:	89ab      	ldrh	r3, [r5, #12]
 800da80:	065b      	lsls	r3, r3, #25
 800da82:	f53f af1f 	bmi.w	800d8c4 <_vfiprintf_r+0x44>
 800da86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800da88:	e71e      	b.n	800d8c8 <_vfiprintf_r+0x48>
 800da8a:	ab03      	add	r3, sp, #12
 800da8c:	9300      	str	r3, [sp, #0]
 800da8e:	462a      	mov	r2, r5
 800da90:	4b05      	ldr	r3, [pc, #20]	@ (800daa8 <_vfiprintf_r+0x228>)
 800da92:	a904      	add	r1, sp, #16
 800da94:	4630      	mov	r0, r6
 800da96:	f000 f879 	bl	800db8c <_printf_i>
 800da9a:	e7e4      	b.n	800da66 <_vfiprintf_r+0x1e6>
 800da9c:	0800fe38 	.word	0x0800fe38
 800daa0:	0800fe42 	.word	0x0800fe42
 800daa4:	00000000 	.word	0x00000000
 800daa8:	0800d85b 	.word	0x0800d85b
 800daac:	0800fe3e 	.word	0x0800fe3e

0800dab0 <_printf_common>:
 800dab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dab4:	4616      	mov	r6, r2
 800dab6:	4698      	mov	r8, r3
 800dab8:	688a      	ldr	r2, [r1, #8]
 800daba:	690b      	ldr	r3, [r1, #16]
 800dabc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dac0:	4293      	cmp	r3, r2
 800dac2:	bfb8      	it	lt
 800dac4:	4613      	movlt	r3, r2
 800dac6:	6033      	str	r3, [r6, #0]
 800dac8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dacc:	4607      	mov	r7, r0
 800dace:	460c      	mov	r4, r1
 800dad0:	b10a      	cbz	r2, 800dad6 <_printf_common+0x26>
 800dad2:	3301      	adds	r3, #1
 800dad4:	6033      	str	r3, [r6, #0]
 800dad6:	6823      	ldr	r3, [r4, #0]
 800dad8:	0699      	lsls	r1, r3, #26
 800dada:	bf42      	ittt	mi
 800dadc:	6833      	ldrmi	r3, [r6, #0]
 800dade:	3302      	addmi	r3, #2
 800dae0:	6033      	strmi	r3, [r6, #0]
 800dae2:	6825      	ldr	r5, [r4, #0]
 800dae4:	f015 0506 	ands.w	r5, r5, #6
 800dae8:	d106      	bne.n	800daf8 <_printf_common+0x48>
 800daea:	f104 0a19 	add.w	sl, r4, #25
 800daee:	68e3      	ldr	r3, [r4, #12]
 800daf0:	6832      	ldr	r2, [r6, #0]
 800daf2:	1a9b      	subs	r3, r3, r2
 800daf4:	42ab      	cmp	r3, r5
 800daf6:	dc26      	bgt.n	800db46 <_printf_common+0x96>
 800daf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dafc:	6822      	ldr	r2, [r4, #0]
 800dafe:	3b00      	subs	r3, #0
 800db00:	bf18      	it	ne
 800db02:	2301      	movne	r3, #1
 800db04:	0692      	lsls	r2, r2, #26
 800db06:	d42b      	bmi.n	800db60 <_printf_common+0xb0>
 800db08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800db0c:	4641      	mov	r1, r8
 800db0e:	4638      	mov	r0, r7
 800db10:	47c8      	blx	r9
 800db12:	3001      	adds	r0, #1
 800db14:	d01e      	beq.n	800db54 <_printf_common+0xa4>
 800db16:	6823      	ldr	r3, [r4, #0]
 800db18:	6922      	ldr	r2, [r4, #16]
 800db1a:	f003 0306 	and.w	r3, r3, #6
 800db1e:	2b04      	cmp	r3, #4
 800db20:	bf02      	ittt	eq
 800db22:	68e5      	ldreq	r5, [r4, #12]
 800db24:	6833      	ldreq	r3, [r6, #0]
 800db26:	1aed      	subeq	r5, r5, r3
 800db28:	68a3      	ldr	r3, [r4, #8]
 800db2a:	bf0c      	ite	eq
 800db2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db30:	2500      	movne	r5, #0
 800db32:	4293      	cmp	r3, r2
 800db34:	bfc4      	itt	gt
 800db36:	1a9b      	subgt	r3, r3, r2
 800db38:	18ed      	addgt	r5, r5, r3
 800db3a:	2600      	movs	r6, #0
 800db3c:	341a      	adds	r4, #26
 800db3e:	42b5      	cmp	r5, r6
 800db40:	d11a      	bne.n	800db78 <_printf_common+0xc8>
 800db42:	2000      	movs	r0, #0
 800db44:	e008      	b.n	800db58 <_printf_common+0xa8>
 800db46:	2301      	movs	r3, #1
 800db48:	4652      	mov	r2, sl
 800db4a:	4641      	mov	r1, r8
 800db4c:	4638      	mov	r0, r7
 800db4e:	47c8      	blx	r9
 800db50:	3001      	adds	r0, #1
 800db52:	d103      	bne.n	800db5c <_printf_common+0xac>
 800db54:	f04f 30ff 	mov.w	r0, #4294967295
 800db58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db5c:	3501      	adds	r5, #1
 800db5e:	e7c6      	b.n	800daee <_printf_common+0x3e>
 800db60:	18e1      	adds	r1, r4, r3
 800db62:	1c5a      	adds	r2, r3, #1
 800db64:	2030      	movs	r0, #48	@ 0x30
 800db66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800db6a:	4422      	add	r2, r4
 800db6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800db70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800db74:	3302      	adds	r3, #2
 800db76:	e7c7      	b.n	800db08 <_printf_common+0x58>
 800db78:	2301      	movs	r3, #1
 800db7a:	4622      	mov	r2, r4
 800db7c:	4641      	mov	r1, r8
 800db7e:	4638      	mov	r0, r7
 800db80:	47c8      	blx	r9
 800db82:	3001      	adds	r0, #1
 800db84:	d0e6      	beq.n	800db54 <_printf_common+0xa4>
 800db86:	3601      	adds	r6, #1
 800db88:	e7d9      	b.n	800db3e <_printf_common+0x8e>
	...

0800db8c <_printf_i>:
 800db8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db90:	7e0f      	ldrb	r7, [r1, #24]
 800db92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800db94:	2f78      	cmp	r7, #120	@ 0x78
 800db96:	4691      	mov	r9, r2
 800db98:	4680      	mov	r8, r0
 800db9a:	460c      	mov	r4, r1
 800db9c:	469a      	mov	sl, r3
 800db9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dba2:	d807      	bhi.n	800dbb4 <_printf_i+0x28>
 800dba4:	2f62      	cmp	r7, #98	@ 0x62
 800dba6:	d80a      	bhi.n	800dbbe <_printf_i+0x32>
 800dba8:	2f00      	cmp	r7, #0
 800dbaa:	f000 80d1 	beq.w	800dd50 <_printf_i+0x1c4>
 800dbae:	2f58      	cmp	r7, #88	@ 0x58
 800dbb0:	f000 80b8 	beq.w	800dd24 <_printf_i+0x198>
 800dbb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dbb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dbbc:	e03a      	b.n	800dc34 <_printf_i+0xa8>
 800dbbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dbc2:	2b15      	cmp	r3, #21
 800dbc4:	d8f6      	bhi.n	800dbb4 <_printf_i+0x28>
 800dbc6:	a101      	add	r1, pc, #4	@ (adr r1, 800dbcc <_printf_i+0x40>)
 800dbc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dbcc:	0800dc25 	.word	0x0800dc25
 800dbd0:	0800dc39 	.word	0x0800dc39
 800dbd4:	0800dbb5 	.word	0x0800dbb5
 800dbd8:	0800dbb5 	.word	0x0800dbb5
 800dbdc:	0800dbb5 	.word	0x0800dbb5
 800dbe0:	0800dbb5 	.word	0x0800dbb5
 800dbe4:	0800dc39 	.word	0x0800dc39
 800dbe8:	0800dbb5 	.word	0x0800dbb5
 800dbec:	0800dbb5 	.word	0x0800dbb5
 800dbf0:	0800dbb5 	.word	0x0800dbb5
 800dbf4:	0800dbb5 	.word	0x0800dbb5
 800dbf8:	0800dd37 	.word	0x0800dd37
 800dbfc:	0800dc63 	.word	0x0800dc63
 800dc00:	0800dcf1 	.word	0x0800dcf1
 800dc04:	0800dbb5 	.word	0x0800dbb5
 800dc08:	0800dbb5 	.word	0x0800dbb5
 800dc0c:	0800dd59 	.word	0x0800dd59
 800dc10:	0800dbb5 	.word	0x0800dbb5
 800dc14:	0800dc63 	.word	0x0800dc63
 800dc18:	0800dbb5 	.word	0x0800dbb5
 800dc1c:	0800dbb5 	.word	0x0800dbb5
 800dc20:	0800dcf9 	.word	0x0800dcf9
 800dc24:	6833      	ldr	r3, [r6, #0]
 800dc26:	1d1a      	adds	r2, r3, #4
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	6032      	str	r2, [r6, #0]
 800dc2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dc34:	2301      	movs	r3, #1
 800dc36:	e09c      	b.n	800dd72 <_printf_i+0x1e6>
 800dc38:	6833      	ldr	r3, [r6, #0]
 800dc3a:	6820      	ldr	r0, [r4, #0]
 800dc3c:	1d19      	adds	r1, r3, #4
 800dc3e:	6031      	str	r1, [r6, #0]
 800dc40:	0606      	lsls	r6, r0, #24
 800dc42:	d501      	bpl.n	800dc48 <_printf_i+0xbc>
 800dc44:	681d      	ldr	r5, [r3, #0]
 800dc46:	e003      	b.n	800dc50 <_printf_i+0xc4>
 800dc48:	0645      	lsls	r5, r0, #25
 800dc4a:	d5fb      	bpl.n	800dc44 <_printf_i+0xb8>
 800dc4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dc50:	2d00      	cmp	r5, #0
 800dc52:	da03      	bge.n	800dc5c <_printf_i+0xd0>
 800dc54:	232d      	movs	r3, #45	@ 0x2d
 800dc56:	426d      	negs	r5, r5
 800dc58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc5c:	4858      	ldr	r0, [pc, #352]	@ (800ddc0 <_printf_i+0x234>)
 800dc5e:	230a      	movs	r3, #10
 800dc60:	e011      	b.n	800dc86 <_printf_i+0xfa>
 800dc62:	6821      	ldr	r1, [r4, #0]
 800dc64:	6833      	ldr	r3, [r6, #0]
 800dc66:	0608      	lsls	r0, r1, #24
 800dc68:	f853 5b04 	ldr.w	r5, [r3], #4
 800dc6c:	d402      	bmi.n	800dc74 <_printf_i+0xe8>
 800dc6e:	0649      	lsls	r1, r1, #25
 800dc70:	bf48      	it	mi
 800dc72:	b2ad      	uxthmi	r5, r5
 800dc74:	2f6f      	cmp	r7, #111	@ 0x6f
 800dc76:	4852      	ldr	r0, [pc, #328]	@ (800ddc0 <_printf_i+0x234>)
 800dc78:	6033      	str	r3, [r6, #0]
 800dc7a:	bf14      	ite	ne
 800dc7c:	230a      	movne	r3, #10
 800dc7e:	2308      	moveq	r3, #8
 800dc80:	2100      	movs	r1, #0
 800dc82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dc86:	6866      	ldr	r6, [r4, #4]
 800dc88:	60a6      	str	r6, [r4, #8]
 800dc8a:	2e00      	cmp	r6, #0
 800dc8c:	db05      	blt.n	800dc9a <_printf_i+0x10e>
 800dc8e:	6821      	ldr	r1, [r4, #0]
 800dc90:	432e      	orrs	r6, r5
 800dc92:	f021 0104 	bic.w	r1, r1, #4
 800dc96:	6021      	str	r1, [r4, #0]
 800dc98:	d04b      	beq.n	800dd32 <_printf_i+0x1a6>
 800dc9a:	4616      	mov	r6, r2
 800dc9c:	fbb5 f1f3 	udiv	r1, r5, r3
 800dca0:	fb03 5711 	mls	r7, r3, r1, r5
 800dca4:	5dc7      	ldrb	r7, [r0, r7]
 800dca6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dcaa:	462f      	mov	r7, r5
 800dcac:	42bb      	cmp	r3, r7
 800dcae:	460d      	mov	r5, r1
 800dcb0:	d9f4      	bls.n	800dc9c <_printf_i+0x110>
 800dcb2:	2b08      	cmp	r3, #8
 800dcb4:	d10b      	bne.n	800dcce <_printf_i+0x142>
 800dcb6:	6823      	ldr	r3, [r4, #0]
 800dcb8:	07df      	lsls	r7, r3, #31
 800dcba:	d508      	bpl.n	800dcce <_printf_i+0x142>
 800dcbc:	6923      	ldr	r3, [r4, #16]
 800dcbe:	6861      	ldr	r1, [r4, #4]
 800dcc0:	4299      	cmp	r1, r3
 800dcc2:	bfde      	ittt	le
 800dcc4:	2330      	movle	r3, #48	@ 0x30
 800dcc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dcca:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dcce:	1b92      	subs	r2, r2, r6
 800dcd0:	6122      	str	r2, [r4, #16]
 800dcd2:	f8cd a000 	str.w	sl, [sp]
 800dcd6:	464b      	mov	r3, r9
 800dcd8:	aa03      	add	r2, sp, #12
 800dcda:	4621      	mov	r1, r4
 800dcdc:	4640      	mov	r0, r8
 800dcde:	f7ff fee7 	bl	800dab0 <_printf_common>
 800dce2:	3001      	adds	r0, #1
 800dce4:	d14a      	bne.n	800dd7c <_printf_i+0x1f0>
 800dce6:	f04f 30ff 	mov.w	r0, #4294967295
 800dcea:	b004      	add	sp, #16
 800dcec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcf0:	6823      	ldr	r3, [r4, #0]
 800dcf2:	f043 0320 	orr.w	r3, r3, #32
 800dcf6:	6023      	str	r3, [r4, #0]
 800dcf8:	4832      	ldr	r0, [pc, #200]	@ (800ddc4 <_printf_i+0x238>)
 800dcfa:	2778      	movs	r7, #120	@ 0x78
 800dcfc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dd00:	6823      	ldr	r3, [r4, #0]
 800dd02:	6831      	ldr	r1, [r6, #0]
 800dd04:	061f      	lsls	r7, r3, #24
 800dd06:	f851 5b04 	ldr.w	r5, [r1], #4
 800dd0a:	d402      	bmi.n	800dd12 <_printf_i+0x186>
 800dd0c:	065f      	lsls	r7, r3, #25
 800dd0e:	bf48      	it	mi
 800dd10:	b2ad      	uxthmi	r5, r5
 800dd12:	6031      	str	r1, [r6, #0]
 800dd14:	07d9      	lsls	r1, r3, #31
 800dd16:	bf44      	itt	mi
 800dd18:	f043 0320 	orrmi.w	r3, r3, #32
 800dd1c:	6023      	strmi	r3, [r4, #0]
 800dd1e:	b11d      	cbz	r5, 800dd28 <_printf_i+0x19c>
 800dd20:	2310      	movs	r3, #16
 800dd22:	e7ad      	b.n	800dc80 <_printf_i+0xf4>
 800dd24:	4826      	ldr	r0, [pc, #152]	@ (800ddc0 <_printf_i+0x234>)
 800dd26:	e7e9      	b.n	800dcfc <_printf_i+0x170>
 800dd28:	6823      	ldr	r3, [r4, #0]
 800dd2a:	f023 0320 	bic.w	r3, r3, #32
 800dd2e:	6023      	str	r3, [r4, #0]
 800dd30:	e7f6      	b.n	800dd20 <_printf_i+0x194>
 800dd32:	4616      	mov	r6, r2
 800dd34:	e7bd      	b.n	800dcb2 <_printf_i+0x126>
 800dd36:	6833      	ldr	r3, [r6, #0]
 800dd38:	6825      	ldr	r5, [r4, #0]
 800dd3a:	6961      	ldr	r1, [r4, #20]
 800dd3c:	1d18      	adds	r0, r3, #4
 800dd3e:	6030      	str	r0, [r6, #0]
 800dd40:	062e      	lsls	r6, r5, #24
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	d501      	bpl.n	800dd4a <_printf_i+0x1be>
 800dd46:	6019      	str	r1, [r3, #0]
 800dd48:	e002      	b.n	800dd50 <_printf_i+0x1c4>
 800dd4a:	0668      	lsls	r0, r5, #25
 800dd4c:	d5fb      	bpl.n	800dd46 <_printf_i+0x1ba>
 800dd4e:	8019      	strh	r1, [r3, #0]
 800dd50:	2300      	movs	r3, #0
 800dd52:	6123      	str	r3, [r4, #16]
 800dd54:	4616      	mov	r6, r2
 800dd56:	e7bc      	b.n	800dcd2 <_printf_i+0x146>
 800dd58:	6833      	ldr	r3, [r6, #0]
 800dd5a:	1d1a      	adds	r2, r3, #4
 800dd5c:	6032      	str	r2, [r6, #0]
 800dd5e:	681e      	ldr	r6, [r3, #0]
 800dd60:	6862      	ldr	r2, [r4, #4]
 800dd62:	2100      	movs	r1, #0
 800dd64:	4630      	mov	r0, r6
 800dd66:	f7f2 fa13 	bl	8000190 <memchr>
 800dd6a:	b108      	cbz	r0, 800dd70 <_printf_i+0x1e4>
 800dd6c:	1b80      	subs	r0, r0, r6
 800dd6e:	6060      	str	r0, [r4, #4]
 800dd70:	6863      	ldr	r3, [r4, #4]
 800dd72:	6123      	str	r3, [r4, #16]
 800dd74:	2300      	movs	r3, #0
 800dd76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd7a:	e7aa      	b.n	800dcd2 <_printf_i+0x146>
 800dd7c:	6923      	ldr	r3, [r4, #16]
 800dd7e:	4632      	mov	r2, r6
 800dd80:	4649      	mov	r1, r9
 800dd82:	4640      	mov	r0, r8
 800dd84:	47d0      	blx	sl
 800dd86:	3001      	adds	r0, #1
 800dd88:	d0ad      	beq.n	800dce6 <_printf_i+0x15a>
 800dd8a:	6823      	ldr	r3, [r4, #0]
 800dd8c:	079b      	lsls	r3, r3, #30
 800dd8e:	d413      	bmi.n	800ddb8 <_printf_i+0x22c>
 800dd90:	68e0      	ldr	r0, [r4, #12]
 800dd92:	9b03      	ldr	r3, [sp, #12]
 800dd94:	4298      	cmp	r0, r3
 800dd96:	bfb8      	it	lt
 800dd98:	4618      	movlt	r0, r3
 800dd9a:	e7a6      	b.n	800dcea <_printf_i+0x15e>
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	4632      	mov	r2, r6
 800dda0:	4649      	mov	r1, r9
 800dda2:	4640      	mov	r0, r8
 800dda4:	47d0      	blx	sl
 800dda6:	3001      	adds	r0, #1
 800dda8:	d09d      	beq.n	800dce6 <_printf_i+0x15a>
 800ddaa:	3501      	adds	r5, #1
 800ddac:	68e3      	ldr	r3, [r4, #12]
 800ddae:	9903      	ldr	r1, [sp, #12]
 800ddb0:	1a5b      	subs	r3, r3, r1
 800ddb2:	42ab      	cmp	r3, r5
 800ddb4:	dcf2      	bgt.n	800dd9c <_printf_i+0x210>
 800ddb6:	e7eb      	b.n	800dd90 <_printf_i+0x204>
 800ddb8:	2500      	movs	r5, #0
 800ddba:	f104 0619 	add.w	r6, r4, #25
 800ddbe:	e7f5      	b.n	800ddac <_printf_i+0x220>
 800ddc0:	0800fe49 	.word	0x0800fe49
 800ddc4:	0800fe5a 	.word	0x0800fe5a

0800ddc8 <__sflush_r>:
 800ddc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ddcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddd0:	0716      	lsls	r6, r2, #28
 800ddd2:	4605      	mov	r5, r0
 800ddd4:	460c      	mov	r4, r1
 800ddd6:	d454      	bmi.n	800de82 <__sflush_r+0xba>
 800ddd8:	684b      	ldr	r3, [r1, #4]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	dc02      	bgt.n	800dde4 <__sflush_r+0x1c>
 800ddde:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	dd48      	ble.n	800de76 <__sflush_r+0xae>
 800dde4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dde6:	2e00      	cmp	r6, #0
 800dde8:	d045      	beq.n	800de76 <__sflush_r+0xae>
 800ddea:	2300      	movs	r3, #0
 800ddec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ddf0:	682f      	ldr	r7, [r5, #0]
 800ddf2:	6a21      	ldr	r1, [r4, #32]
 800ddf4:	602b      	str	r3, [r5, #0]
 800ddf6:	d030      	beq.n	800de5a <__sflush_r+0x92>
 800ddf8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ddfa:	89a3      	ldrh	r3, [r4, #12]
 800ddfc:	0759      	lsls	r1, r3, #29
 800ddfe:	d505      	bpl.n	800de0c <__sflush_r+0x44>
 800de00:	6863      	ldr	r3, [r4, #4]
 800de02:	1ad2      	subs	r2, r2, r3
 800de04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800de06:	b10b      	cbz	r3, 800de0c <__sflush_r+0x44>
 800de08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800de0a:	1ad2      	subs	r2, r2, r3
 800de0c:	2300      	movs	r3, #0
 800de0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800de10:	6a21      	ldr	r1, [r4, #32]
 800de12:	4628      	mov	r0, r5
 800de14:	47b0      	blx	r6
 800de16:	1c43      	adds	r3, r0, #1
 800de18:	89a3      	ldrh	r3, [r4, #12]
 800de1a:	d106      	bne.n	800de2a <__sflush_r+0x62>
 800de1c:	6829      	ldr	r1, [r5, #0]
 800de1e:	291d      	cmp	r1, #29
 800de20:	d82b      	bhi.n	800de7a <__sflush_r+0xb2>
 800de22:	4a2a      	ldr	r2, [pc, #168]	@ (800decc <__sflush_r+0x104>)
 800de24:	40ca      	lsrs	r2, r1
 800de26:	07d6      	lsls	r6, r2, #31
 800de28:	d527      	bpl.n	800de7a <__sflush_r+0xb2>
 800de2a:	2200      	movs	r2, #0
 800de2c:	6062      	str	r2, [r4, #4]
 800de2e:	04d9      	lsls	r1, r3, #19
 800de30:	6922      	ldr	r2, [r4, #16]
 800de32:	6022      	str	r2, [r4, #0]
 800de34:	d504      	bpl.n	800de40 <__sflush_r+0x78>
 800de36:	1c42      	adds	r2, r0, #1
 800de38:	d101      	bne.n	800de3e <__sflush_r+0x76>
 800de3a:	682b      	ldr	r3, [r5, #0]
 800de3c:	b903      	cbnz	r3, 800de40 <__sflush_r+0x78>
 800de3e:	6560      	str	r0, [r4, #84]	@ 0x54
 800de40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de42:	602f      	str	r7, [r5, #0]
 800de44:	b1b9      	cbz	r1, 800de76 <__sflush_r+0xae>
 800de46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de4a:	4299      	cmp	r1, r3
 800de4c:	d002      	beq.n	800de54 <__sflush_r+0x8c>
 800de4e:	4628      	mov	r0, r5
 800de50:	f7ff fbf4 	bl	800d63c <_free_r>
 800de54:	2300      	movs	r3, #0
 800de56:	6363      	str	r3, [r4, #52]	@ 0x34
 800de58:	e00d      	b.n	800de76 <__sflush_r+0xae>
 800de5a:	2301      	movs	r3, #1
 800de5c:	4628      	mov	r0, r5
 800de5e:	47b0      	blx	r6
 800de60:	4602      	mov	r2, r0
 800de62:	1c50      	adds	r0, r2, #1
 800de64:	d1c9      	bne.n	800ddfa <__sflush_r+0x32>
 800de66:	682b      	ldr	r3, [r5, #0]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d0c6      	beq.n	800ddfa <__sflush_r+0x32>
 800de6c:	2b1d      	cmp	r3, #29
 800de6e:	d001      	beq.n	800de74 <__sflush_r+0xac>
 800de70:	2b16      	cmp	r3, #22
 800de72:	d11e      	bne.n	800deb2 <__sflush_r+0xea>
 800de74:	602f      	str	r7, [r5, #0]
 800de76:	2000      	movs	r0, #0
 800de78:	e022      	b.n	800dec0 <__sflush_r+0xf8>
 800de7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de7e:	b21b      	sxth	r3, r3
 800de80:	e01b      	b.n	800deba <__sflush_r+0xf2>
 800de82:	690f      	ldr	r7, [r1, #16]
 800de84:	2f00      	cmp	r7, #0
 800de86:	d0f6      	beq.n	800de76 <__sflush_r+0xae>
 800de88:	0793      	lsls	r3, r2, #30
 800de8a:	680e      	ldr	r6, [r1, #0]
 800de8c:	bf08      	it	eq
 800de8e:	694b      	ldreq	r3, [r1, #20]
 800de90:	600f      	str	r7, [r1, #0]
 800de92:	bf18      	it	ne
 800de94:	2300      	movne	r3, #0
 800de96:	eba6 0807 	sub.w	r8, r6, r7
 800de9a:	608b      	str	r3, [r1, #8]
 800de9c:	f1b8 0f00 	cmp.w	r8, #0
 800dea0:	dde9      	ble.n	800de76 <__sflush_r+0xae>
 800dea2:	6a21      	ldr	r1, [r4, #32]
 800dea4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dea6:	4643      	mov	r3, r8
 800dea8:	463a      	mov	r2, r7
 800deaa:	4628      	mov	r0, r5
 800deac:	47b0      	blx	r6
 800deae:	2800      	cmp	r0, #0
 800deb0:	dc08      	bgt.n	800dec4 <__sflush_r+0xfc>
 800deb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800deb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800deba:	81a3      	strh	r3, [r4, #12]
 800debc:	f04f 30ff 	mov.w	r0, #4294967295
 800dec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dec4:	4407      	add	r7, r0
 800dec6:	eba8 0800 	sub.w	r8, r8, r0
 800deca:	e7e7      	b.n	800de9c <__sflush_r+0xd4>
 800decc:	20400001 	.word	0x20400001

0800ded0 <_fflush_r>:
 800ded0:	b538      	push	{r3, r4, r5, lr}
 800ded2:	690b      	ldr	r3, [r1, #16]
 800ded4:	4605      	mov	r5, r0
 800ded6:	460c      	mov	r4, r1
 800ded8:	b913      	cbnz	r3, 800dee0 <_fflush_r+0x10>
 800deda:	2500      	movs	r5, #0
 800dedc:	4628      	mov	r0, r5
 800dede:	bd38      	pop	{r3, r4, r5, pc}
 800dee0:	b118      	cbz	r0, 800deea <_fflush_r+0x1a>
 800dee2:	6a03      	ldr	r3, [r0, #32]
 800dee4:	b90b      	cbnz	r3, 800deea <_fflush_r+0x1a>
 800dee6:	f7ff f999 	bl	800d21c <__sinit>
 800deea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d0f3      	beq.n	800deda <_fflush_r+0xa>
 800def2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800def4:	07d0      	lsls	r0, r2, #31
 800def6:	d404      	bmi.n	800df02 <_fflush_r+0x32>
 800def8:	0599      	lsls	r1, r3, #22
 800defa:	d402      	bmi.n	800df02 <_fflush_r+0x32>
 800defc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800defe:	f7ff fb8c 	bl	800d61a <__retarget_lock_acquire_recursive>
 800df02:	4628      	mov	r0, r5
 800df04:	4621      	mov	r1, r4
 800df06:	f7ff ff5f 	bl	800ddc8 <__sflush_r>
 800df0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df0c:	07da      	lsls	r2, r3, #31
 800df0e:	4605      	mov	r5, r0
 800df10:	d4e4      	bmi.n	800dedc <_fflush_r+0xc>
 800df12:	89a3      	ldrh	r3, [r4, #12]
 800df14:	059b      	lsls	r3, r3, #22
 800df16:	d4e1      	bmi.n	800dedc <_fflush_r+0xc>
 800df18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df1a:	f7ff fb7f 	bl	800d61c <__retarget_lock_release_recursive>
 800df1e:	e7dd      	b.n	800dedc <_fflush_r+0xc>

0800df20 <__swhatbuf_r>:
 800df20:	b570      	push	{r4, r5, r6, lr}
 800df22:	460c      	mov	r4, r1
 800df24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df28:	2900      	cmp	r1, #0
 800df2a:	b096      	sub	sp, #88	@ 0x58
 800df2c:	4615      	mov	r5, r2
 800df2e:	461e      	mov	r6, r3
 800df30:	da0d      	bge.n	800df4e <__swhatbuf_r+0x2e>
 800df32:	89a3      	ldrh	r3, [r4, #12]
 800df34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800df38:	f04f 0100 	mov.w	r1, #0
 800df3c:	bf14      	ite	ne
 800df3e:	2340      	movne	r3, #64	@ 0x40
 800df40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800df44:	2000      	movs	r0, #0
 800df46:	6031      	str	r1, [r6, #0]
 800df48:	602b      	str	r3, [r5, #0]
 800df4a:	b016      	add	sp, #88	@ 0x58
 800df4c:	bd70      	pop	{r4, r5, r6, pc}
 800df4e:	466a      	mov	r2, sp
 800df50:	f000 f87c 	bl	800e04c <_fstat_r>
 800df54:	2800      	cmp	r0, #0
 800df56:	dbec      	blt.n	800df32 <__swhatbuf_r+0x12>
 800df58:	9901      	ldr	r1, [sp, #4]
 800df5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800df5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800df62:	4259      	negs	r1, r3
 800df64:	4159      	adcs	r1, r3
 800df66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df6a:	e7eb      	b.n	800df44 <__swhatbuf_r+0x24>

0800df6c <__smakebuf_r>:
 800df6c:	898b      	ldrh	r3, [r1, #12]
 800df6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df70:	079d      	lsls	r5, r3, #30
 800df72:	4606      	mov	r6, r0
 800df74:	460c      	mov	r4, r1
 800df76:	d507      	bpl.n	800df88 <__smakebuf_r+0x1c>
 800df78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800df7c:	6023      	str	r3, [r4, #0]
 800df7e:	6123      	str	r3, [r4, #16]
 800df80:	2301      	movs	r3, #1
 800df82:	6163      	str	r3, [r4, #20]
 800df84:	b003      	add	sp, #12
 800df86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df88:	ab01      	add	r3, sp, #4
 800df8a:	466a      	mov	r2, sp
 800df8c:	f7ff ffc8 	bl	800df20 <__swhatbuf_r>
 800df90:	9f00      	ldr	r7, [sp, #0]
 800df92:	4605      	mov	r5, r0
 800df94:	4639      	mov	r1, r7
 800df96:	4630      	mov	r0, r6
 800df98:	f7ff fbbc 	bl	800d714 <_malloc_r>
 800df9c:	b948      	cbnz	r0, 800dfb2 <__smakebuf_r+0x46>
 800df9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfa2:	059a      	lsls	r2, r3, #22
 800dfa4:	d4ee      	bmi.n	800df84 <__smakebuf_r+0x18>
 800dfa6:	f023 0303 	bic.w	r3, r3, #3
 800dfaa:	f043 0302 	orr.w	r3, r3, #2
 800dfae:	81a3      	strh	r3, [r4, #12]
 800dfb0:	e7e2      	b.n	800df78 <__smakebuf_r+0xc>
 800dfb2:	89a3      	ldrh	r3, [r4, #12]
 800dfb4:	6020      	str	r0, [r4, #0]
 800dfb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfba:	81a3      	strh	r3, [r4, #12]
 800dfbc:	9b01      	ldr	r3, [sp, #4]
 800dfbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dfc2:	b15b      	cbz	r3, 800dfdc <__smakebuf_r+0x70>
 800dfc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfc8:	4630      	mov	r0, r6
 800dfca:	f000 f851 	bl	800e070 <_isatty_r>
 800dfce:	b128      	cbz	r0, 800dfdc <__smakebuf_r+0x70>
 800dfd0:	89a3      	ldrh	r3, [r4, #12]
 800dfd2:	f023 0303 	bic.w	r3, r3, #3
 800dfd6:	f043 0301 	orr.w	r3, r3, #1
 800dfda:	81a3      	strh	r3, [r4, #12]
 800dfdc:	89a3      	ldrh	r3, [r4, #12]
 800dfde:	431d      	orrs	r5, r3
 800dfe0:	81a5      	strh	r5, [r4, #12]
 800dfe2:	e7cf      	b.n	800df84 <__smakebuf_r+0x18>

0800dfe4 <_putc_r>:
 800dfe4:	b570      	push	{r4, r5, r6, lr}
 800dfe6:	460d      	mov	r5, r1
 800dfe8:	4614      	mov	r4, r2
 800dfea:	4606      	mov	r6, r0
 800dfec:	b118      	cbz	r0, 800dff6 <_putc_r+0x12>
 800dfee:	6a03      	ldr	r3, [r0, #32]
 800dff0:	b90b      	cbnz	r3, 800dff6 <_putc_r+0x12>
 800dff2:	f7ff f913 	bl	800d21c <__sinit>
 800dff6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dff8:	07d8      	lsls	r0, r3, #31
 800dffa:	d405      	bmi.n	800e008 <_putc_r+0x24>
 800dffc:	89a3      	ldrh	r3, [r4, #12]
 800dffe:	0599      	lsls	r1, r3, #22
 800e000:	d402      	bmi.n	800e008 <_putc_r+0x24>
 800e002:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e004:	f7ff fb09 	bl	800d61a <__retarget_lock_acquire_recursive>
 800e008:	68a3      	ldr	r3, [r4, #8]
 800e00a:	3b01      	subs	r3, #1
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	60a3      	str	r3, [r4, #8]
 800e010:	da05      	bge.n	800e01e <_putc_r+0x3a>
 800e012:	69a2      	ldr	r2, [r4, #24]
 800e014:	4293      	cmp	r3, r2
 800e016:	db12      	blt.n	800e03e <_putc_r+0x5a>
 800e018:	b2eb      	uxtb	r3, r5
 800e01a:	2b0a      	cmp	r3, #10
 800e01c:	d00f      	beq.n	800e03e <_putc_r+0x5a>
 800e01e:	6823      	ldr	r3, [r4, #0]
 800e020:	1c5a      	adds	r2, r3, #1
 800e022:	6022      	str	r2, [r4, #0]
 800e024:	701d      	strb	r5, [r3, #0]
 800e026:	b2ed      	uxtb	r5, r5
 800e028:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e02a:	07da      	lsls	r2, r3, #31
 800e02c:	d405      	bmi.n	800e03a <_putc_r+0x56>
 800e02e:	89a3      	ldrh	r3, [r4, #12]
 800e030:	059b      	lsls	r3, r3, #22
 800e032:	d402      	bmi.n	800e03a <_putc_r+0x56>
 800e034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e036:	f7ff faf1 	bl	800d61c <__retarget_lock_release_recursive>
 800e03a:	4628      	mov	r0, r5
 800e03c:	bd70      	pop	{r4, r5, r6, pc}
 800e03e:	4629      	mov	r1, r5
 800e040:	4622      	mov	r2, r4
 800e042:	4630      	mov	r0, r6
 800e044:	f7ff f9db 	bl	800d3fe <__swbuf_r>
 800e048:	4605      	mov	r5, r0
 800e04a:	e7ed      	b.n	800e028 <_putc_r+0x44>

0800e04c <_fstat_r>:
 800e04c:	b538      	push	{r3, r4, r5, lr}
 800e04e:	4d07      	ldr	r5, [pc, #28]	@ (800e06c <_fstat_r+0x20>)
 800e050:	2300      	movs	r3, #0
 800e052:	4604      	mov	r4, r0
 800e054:	4608      	mov	r0, r1
 800e056:	4611      	mov	r1, r2
 800e058:	602b      	str	r3, [r5, #0]
 800e05a:	f7f4 fdd0 	bl	8002bfe <_fstat>
 800e05e:	1c43      	adds	r3, r0, #1
 800e060:	d102      	bne.n	800e068 <_fstat_r+0x1c>
 800e062:	682b      	ldr	r3, [r5, #0]
 800e064:	b103      	cbz	r3, 800e068 <_fstat_r+0x1c>
 800e066:	6023      	str	r3, [r4, #0]
 800e068:	bd38      	pop	{r3, r4, r5, pc}
 800e06a:	bf00      	nop
 800e06c:	20001a60 	.word	0x20001a60

0800e070 <_isatty_r>:
 800e070:	b538      	push	{r3, r4, r5, lr}
 800e072:	4d06      	ldr	r5, [pc, #24]	@ (800e08c <_isatty_r+0x1c>)
 800e074:	2300      	movs	r3, #0
 800e076:	4604      	mov	r4, r0
 800e078:	4608      	mov	r0, r1
 800e07a:	602b      	str	r3, [r5, #0]
 800e07c:	f7f4 fdcf 	bl	8002c1e <_isatty>
 800e080:	1c43      	adds	r3, r0, #1
 800e082:	d102      	bne.n	800e08a <_isatty_r+0x1a>
 800e084:	682b      	ldr	r3, [r5, #0]
 800e086:	b103      	cbz	r3, 800e08a <_isatty_r+0x1a>
 800e088:	6023      	str	r3, [r4, #0]
 800e08a:	bd38      	pop	{r3, r4, r5, pc}
 800e08c:	20001a60 	.word	0x20001a60

0800e090 <_sbrk_r>:
 800e090:	b538      	push	{r3, r4, r5, lr}
 800e092:	4d06      	ldr	r5, [pc, #24]	@ (800e0ac <_sbrk_r+0x1c>)
 800e094:	2300      	movs	r3, #0
 800e096:	4604      	mov	r4, r0
 800e098:	4608      	mov	r0, r1
 800e09a:	602b      	str	r3, [r5, #0]
 800e09c:	f7f4 fdd8 	bl	8002c50 <_sbrk>
 800e0a0:	1c43      	adds	r3, r0, #1
 800e0a2:	d102      	bne.n	800e0aa <_sbrk_r+0x1a>
 800e0a4:	682b      	ldr	r3, [r5, #0]
 800e0a6:	b103      	cbz	r3, 800e0aa <_sbrk_r+0x1a>
 800e0a8:	6023      	str	r3, [r4, #0]
 800e0aa:	bd38      	pop	{r3, r4, r5, pc}
 800e0ac:	20001a60 	.word	0x20001a60

0800e0b0 <_init>:
 800e0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0b2:	bf00      	nop
 800e0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0b6:	bc08      	pop	{r3}
 800e0b8:	469e      	mov	lr, r3
 800e0ba:	4770      	bx	lr

0800e0bc <_fini>:
 800e0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0be:	bf00      	nop
 800e0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0c2:	bc08      	pop	{r3}
 800e0c4:	469e      	mov	lr, r3
 800e0c6:	4770      	bx	lr
